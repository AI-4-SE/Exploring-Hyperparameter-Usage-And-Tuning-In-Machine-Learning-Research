{
    "test.py": {
        "sklearn": {},
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:3 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "model.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "'models/patient_class_independent_icentre_Adam_relative_alpha_rerun/133_checkpoint.pth.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "sklearn": {
            "precision_recall_fscore_support_22": {
                "variable": {
                    "value": "(precision, recall, f1, support)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_17": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_289": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": []
                }
            },
            "sum_298": {
                "input": {
                    "value": "preds == labels.data",
                    "possible_values": []
                }
            },
            "set_grad_enabled_287": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "centre_labels",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(temp_list)",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "patient_centre_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patient_centre_features",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patient_centre_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_187": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'best_model_{}.pth.tar'.format(epoch)",
                    "possible_values": []
                }
            },
            "max_101": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "preds == labels.data",
                    "possible_values": []
                }
            },
            "max_157": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "preds == labels.data",
                    "possible_values": []
                }
            },
            "set_grad_enabled_99": {
                "mode": {
                    "value": "phase == 'train'",
                    "possible_values": []
                }
            },
            "set_grad_enabled_155": {
                "mode": {
                    "value": "phase == 'train'",
                    "possible_values": []
                }
            }
        }
    },
    "logger.py": {
        "tensorflow": {
            "FileWriter_16": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "possible_values": []
                }
            },
            "Summary_20": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "possible_values": []
                }
            },
            "Summary_43": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_53": {
                "variable": {
                    "value": "hist",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Summary_70": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "possible_values": []
                }
            }
        }
    },
    "centre_loss.py": {
        "torch": {
            "CenterLoss_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.patients_class": {
                    "value": "patients_class",
                    "possible_values": []
                },
                "self.feat_dim": {
                    "value": "feat_dim",
                    "possible_values": []
                },
                "self.use_gpu": {
                    "value": "use_gpu",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "self.contra_margin": {
                    "value": "contra_margin",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-09",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "arange_65": {
                "variable": {
                    "value": "classes",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "dist",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.centers",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.num_classes, self.feat_dim).to(self.device)",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.centers",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.num_classes, self.feat_dim)",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "loss_inter",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_inter",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_inter)",
                            "Call"
                        ],
                        [
                            "loss_inter.mean()",
                            "Call"
                        ],
                        [
                            "torch.cat(loss_inter)",
                            "Call"
                        ],
                        [
                            "loss_inter.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_112": {
                "variable": {
                    "value": "loss_intra",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_intra",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_intra)",
                            "Call"
                        ],
                        [
                            "loss_intra.mean()",
                            "Call"
                        ],
                        [
                            "torch.cat(loss_intra)",
                            "Call"
                        ],
                        [
                            "loss_intra.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "loss_inter",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_inter",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_inter)",
                            "Call"
                        ],
                        [
                            "loss_inter.mean()",
                            "Call"
                        ],
                        [
                            "torch.cat(loss_inter)",
                            "Call"
                        ],
                        [
                            "loss_inter.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "loss_intra",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_intra",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_intra)",
                            "Call"
                        ],
                        [
                            "loss_intra.mean()",
                            "Call"
                        ],
                        [
                            "torch.cat(loss_intra)",
                            "Call"
                        ],
                        [
                            "loss_intra.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_61": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_61": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "self.centers",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_62": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "t_62": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "val",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "possible_values": [
                        [
                            "((self.centers[labels_1[i]] - self.centers[labels_1[j]]) ** 2).mean()",
                            "Call"
                        ],
                        [
                            "val.clamp(min=1e-12, max=1000000000000.0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(val, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "self.num_classes",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "self.num_classes",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "possible_values": []
                }
            }
        }
    },
    "focal_ce_loss.py": {
        "torch": {
            "FocalLoss_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.device": {
                    "value": "device",
                    "possible_values": []
                },
                "self.class_num": {
                    "value": "class_num",
                    "possible_values": []
                },
                "self.size_average": {
                    "value": "size_average",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_26": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "class_num",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "train_image_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_image_dataset",
                    "possible_values": [
                        [
                            "modified.MyImageFolder(root=image_train_dir, transform=data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "valid_image_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_image_dataset",
                    "possible_values": [
                        [
                            "modified.MyImageFolder(root=image_valid_dir, transform=data_transforms['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_image_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_image_dataset",
                    "possible_values": [
                        [
                            "modified.MyImageFolder(root=image_test_dir, transform=data_transforms['val'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "device_70": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "model.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optim_1",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.8, 0.99)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optim_2",
                    "possible_values": []
                },
                "params": {
                    "value": "center_loss_1.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.8, 0.99)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optim_3",
                    "possible_values": []
                },
                "params": {
                    "value": "center_loss_2.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.8, 0.99)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MultiStepLR_123": {
                "variable": {
                    "value": "scheduler_1",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_1",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=0.001, betas=(0.8, 0.99), amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[15, 25, 35, 45, 55, 65, 75, 85]",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MultiStepLR_124": {
                "variable": {
                    "value": "scheduler_2",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_2",
                    "possible_values": [
                        [
                            "optim.Adam(center_loss_1.parameters(), lr=0.5, betas=(0.8, 0.99), amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[14, 21, 28, 35, 42, 49]",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "MultiStepLR_125": {
                "variable": {
                    "value": "scheduler_3",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_3",
                    "possible_values": [
                        [
                            "optim.Adam(center_loss_2.parameters(), lr=0.5, betas=(0.8, 0.99), amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[14, 21, 28, 35, 42, 49]",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Inception3_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.aux_logits": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transform_input": {
                    "value": "transform_input",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_59": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2048",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "InceptionA_133": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionB_165": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionC_188": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "c7": {
                    "value": "channels_7x7",
                    "possible_values": []
                }
            },
            "InceptionD_227": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionE_253": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionAux_295": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_302": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "768",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "BasicConv2d_323": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_327": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_328": {
                    "variable": {
                        "value": "self.bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                }
            },
            "max_pool2d_86": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "max_pool2d_92": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_120": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_182": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_220": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_248": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "branch3x3",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3dbl",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_288": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_307": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_314": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_333": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "input": {
                    "value": "x[:, 0]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "input": {
                    "value": "x[:, 1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "input": {
                    "value": "x[:, 2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "modified.py": {
        "torch": {
            "DatasetFolder_50": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.loader": {
                    "value": "loader",
                    "possible_values": [
                        [
                            "default_loader",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.extensions": {
                    "value": "extensions",
                    "possible_values": []
                },
                "self.classes": {
                    "value": "classes",
                    "possible_values": [
                        [
                            "[d.name for d in os.scandir(dir) if d.is_dir()]",
                            "ListComp"
                        ],
                        [
                            "[d for d in os.listdir(dir) if os.path.isdir(os.path.join(dir, d))]",
                            "ListComp"
                        ]
                    ]
                },
                "self.class_to_idx": {
                    "value": "class_to_idx",
                    "possible_values": [
                        [
                            "{classes[i]: i for i in range(len(classes))}",
                            "DictComp"
                        ]
                    ]
                },
                "self.samples": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "make_dataset(root, class_to_idx, extensions)",
                            "Call"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.target_transform": {
                    "value": "target_transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}