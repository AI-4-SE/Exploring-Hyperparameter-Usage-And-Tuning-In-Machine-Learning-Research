{
    "constrained_nets.py": {
        "torch": {
            "Linear_110": {
                "variable": {
                    "value": "self.beta_lin",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.R.size(1)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.R.size(0)",
                    "possible_values": []
                }
            },
            "BatchNorm1d_113": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "A_dd.shape[1]",
                    "possible_values": []
                }
            },
            "abs_132": {
                "variable": {
                    "value": "beta_abs",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "self.beta_lin(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "box_scaling",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(torch.abs(x), dim=1, keepdim=True)[0]",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_138": {
                "input": {
                    "value": "torch.abs(x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "abs_138": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "beta_abs.mm(self.R)",
                            "Call"
                        ],
                        [
                            "x / box_scaling",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "constrained_nets_experiments.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(device_id) if device_id >= 0 else cpu",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['learning_rate']",
                    "possible_values": [
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "training_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='train', transform=img_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "possible_values": [
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "validation_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='val', transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "possible_values": [
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='test', transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['batch_size']",
                    "possible_values": [
                        [
                            "vars(args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_50": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=params['learning_rate'])",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "device_103": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(device_id) if device_id >= 0 else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "validation_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='train', transform=img_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "device_163": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(device_id) if device_id >= 0 else cpu",
                    "possible_values": []
                }
            },
            "set_grad_enabled_92": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "set_grad_enabled_117": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "set_grad_enabled_73": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "mapping",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d, d)",
                    "possible_values": []
                }
            },
            "MSELoss_199": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MSELoss_202": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_175": {
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='train', transform=img_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(train_data)",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='val', transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(val_data)",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "dataset": {
                    "value": "test_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='test', transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_util.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "(self.train_data, self.train_labels)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.root, self.processed_folder, self.training_file)",
                    "possible_values": []
                }
            },
            "from_numpy_217": {
                "ndarray": {
                    "value": "parsed",
                    "possible_values": [
                        [
                            "np.frombuffer(data, dtype=np.uint8, offset=8)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(data, dtype=np.uint8, offset=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "parsed",
                    "possible_values": [
                        [
                            "np.frombuffer(data, dtype=np.uint8, offset=8)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(data, dtype=np.uint8, offset=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "variable": {
                    "value": "(self.val_data, self.val_labels)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.root, self.processed_folder, self.val_file)",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "training_set",
                    "possible_values": [
                        [
                            "(train_val_set[0][:-1000], train_val_set[1][:-1000])",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "validation_set",
                    "possible_values": [
                        [
                            "(train_val_set[0][-1000:], train_val_set[1][-1000:])",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "test_set",
                    "possible_values": [
                        [
                            "(read_image_file(os.path.join(self.root, self.raw_folder, 't10k-images-idx3-ubyte')), read_label_file(os.path.join(self.root, self.raw_folder, 't10k-labels-idx1-ubyte')))",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "(self.test_data, self.test_labels)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.root, self.processed_folder, self.test_file)",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "zeros_like_23": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "out",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "plot_results.py": {
        "torch": {
            "DataLoader_20": {
                "dataset": {
                    "value": "test_data",
                    "possible_values": [
                        [
                            "MNIST(root='data', partition='test', transform=img_transform, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(test_data)",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    }
}