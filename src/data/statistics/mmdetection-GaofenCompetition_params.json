{
    ".dev_scripts/gather_models.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "demo/webcam_demo.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/inference.py": {
        "torch": {
            "set_grad_enabled_141": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/test.py": {
        "torch": {
            "tensor_160": {
                "variable": {
                    "value": "part_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_167": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "part_send",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_121": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_130": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/train.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_device_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "sqrt_168": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_257": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_548": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_563": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_563": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_448": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_254": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_255": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_422": {},
            "Tensor_423": {}
        }
    },
    "mmdet/core/anchor/point_generator.py": {
        "torch": {
            "stack_23": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_19": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_20": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/utils.py": {
        "torch": {
            "stack_9": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_62": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[0] + ratio * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_63": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[1] + ratio * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_64": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[0] + (1 - ratio) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_65": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[1] + (1 - ratio) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/approx_max_iou_assigner.py": {
        "torch": {
            "transpose_107": {
                "variable": {
                    "value": "approxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "approxs.view(num_squares, approxs_per_octave, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approxs.new(num_gts, num_squares)",
                            "Call"
                        ],
                        [
                            "torch.transpose(overlaps, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/assign_result.py": {
        "torch": {
            "arange_197": {
                "variable": {
                    "value": "self_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "self.gt_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "self.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(len(gt_labels)), self.max_overlaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "is_assigned",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_assigned",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "true_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "true_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(num_gts)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(true_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(1, num_gts + 1, size=num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_ignore",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(0, num_classes, size=num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/atss_assigner.py": {
        "torch": {
            "stack_92": {
                "variable": {
                    "value": "gt_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_cx, gt_cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "bboxes_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes_cx, bboxes_cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "candidate_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_idxs, dim=0)",
                            "Call"
                        ],
                        [
                            "candidate_idxs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_144": {
                "variable": {
                    "value": "overlaps_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_calculator(bboxes, gt_bboxes)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-INF",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_144": {
                "variable": {
                    "value": "overlaps_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_156": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_117": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_139": {
                "tensors": {
                    "value": "[l_, t_, r_, b_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_139": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/center_region_assigner.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "boxes_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_286": {
                "variable": {
                    "value": "shadowed_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_bbox_in_gt_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_calculator(bboxes, gt_shadow, mode='iof') > self.min_pos_iof",
                            "Compare"
                        ],
                        [
                            "is_bbox_in_gt_shadow & ~is_bbox_in_gt_core",
                            "BinOp"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "any_301": {
                "variable": {
                    "value": "inds_of_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "shadowed_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shadowed_gt_inds, torch.nonzero(is_bbox_in_gt_core, as_tuple=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_221": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_276": {
                "variable": {
                    "value": "gt_priority",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "is_bbox_in_gt_core.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_304": {
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_315": {
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "nonzero_203": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/point_assigner.py": {
        "torch": {
            "log2_70": {
                "variable": {
                    "value": "points_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_80": {
                "variable": {
                    "value": "gt_bboxes_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes_lvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((torch.log2(gt_bboxes_wh[:, 0] / scale) + torch.log2(gt_bboxes_wh[:, 1] / scale)) / 2).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_bboxes_lvl, min=lvl_min, max=lvl_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lvl_min",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "lvl_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_86": {
                "variable": {
                    "value": "points_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "points.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_103": {
                "variable": {
                    "value": "(min_dist, min_dist_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "points_gt_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((lvl_points - gt_point) / gt_wh).norm(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pos_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_125": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log2_78": {
                "input": {
                    "value": "gt_bboxes_wh[:, 0] / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_79": {
                "input": {
                    "value": "gt_bboxes_wh[:, 1] / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/delta_xywh_bbox_coder.py": {
        "torch": {
            "log_109": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/legacy_delta_xywh_bbox_coder.py": {
        "torch": {
            "log_120": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_121": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/tblr_bbox_coder.py": {
        "torch": {
            "cat_102": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(top, bottom, left, right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "priors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ],
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "priors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_151": {
                "variable": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ],
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/demodata.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tlbr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.rand(num, 4).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/iou_calculators/iou2d_calculator.py": {
        "torch": {
            "max_127": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area1 + area2 - overlap",
                            "BinOp"
                        ],
                        [
                            "area1",
                            "variable"
                        ],
                        [
                            "area1[:, None] + area2 - overlap",
                            "BinOp"
                        ],
                        [
                            "area1[:, None]",
                            "Subscript"
                        ],
                        [
                            "torch.max(union, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_96": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_97": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_112": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_77": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/instance_balanced_pos_sampler.py": {
        "torch": {
            "nonzero_23": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "self.random_choice(sampled_inds, num_expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_34": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "self.random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/iou_balanced_neg_sampler.py": {
        "torch": {
            "nonzero_98": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(sampled_inds)",
                            "Call"
                        ],
                        [
                            "np.concatenate([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_floor_inds, iou_sampled_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/ohem_sampler.py": {
        "torch": {
            "nonzero_71": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_99": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/pseudo_sampler.py": {
        "torch": {
            "nonzero_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/random_sampler.py": {
        "torch": {
            "nonzero_59": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_69": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(gallery, dtype=torch.long, device=torch.cuda.current_device())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "gallery.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/sampling_result.py": {
        "torch": {
            "empty_like_39": {
                "variable": {
                    "value": "self.pos_gt_bboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "demodata.random_boxes(assign_result.num_gts, rng=rng)",
                            "Call"
                        ],
                        [
                            "gt_bboxes.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/score_hlr_sampler.py": {
        "torch": {
            "nonzero_93": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_128": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_128": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(gallery, dtype=torch.long, device=torch.cuda.current_device())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_85": {
                "n": {
                    "value": "gallery.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "pred_bboxes_with_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_bboxes, valid_max_score[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "select_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_inds[hlr_inds], invalid_inds[rand_inds]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_device_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_211": {
                "n": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_inds.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_189": {
                "n": {
                    "value": "num_invalid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "invalid_inds.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/transforms.py": {
        "torch": {
            "cat_72": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_87": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_135": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "[left, top, right, bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/evaluation/eval_hooks.py": {
        "torch": {}
    },
    "mmdet/core/fp16/decorators.py": {
        "torch": {}
    },
    "mmdet/core/fp16/hooks.py": {
        "torch": {}
    },
    "mmdet/core/fp16/utils.py": {
        "torch": {}
    },
    "mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(mask_target_single, pos_proposals_list, pos_assigned_gt_inds_list, gt_masks_list, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(mask_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(mask_targets)",
                            "Call"
                        ],
                        [
                            "gt_masks.crop_and_resize(proposals_np, mask_size, device=device, inds=pos_assigned_gt_inds).to_ndarray()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_targets).float().to(device)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0,) + mask_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(mask_target_single, pos_proposals_list, pos_assigned_gt_inds_list, gt_masks_list, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(mask_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(mask_targets)",
                            "Call"
                        ],
                        [
                            "gt_masks.crop_and_resize(proposals_np, mask_size, device=device, inds=pos_assigned_gt_inds).to_ndarray()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_targets).float().to(device)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0,) + mask_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/mask/structures.py": {
        "torch": {
            "cat_277": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_inds, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bboxes).to(device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds).to(device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "gt_masks_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_280": {
                "variable": {
                    "value": "gt_masks_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds).to(device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_312": {
                "data": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_559": {
                "data": {
                    "value": "ndarray_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_ndarray()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_275": {
                "start": {
                    "value": "num_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_555": {
                "*size": {
                    "value": "(0, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/post_processing/bbox_nms.py": {
        "torch": {}
    },
    "mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_69": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/utils/dist_utils.py": {
        "torch": {}
    },
    "mmdet/core/utils/misc.py": {
        "torch": {}
    },
    "mmdet/datasets/builder.py": {
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "ClassBalancedDataset(build_dataset(cfg['dataset'], default_args), cfg['oversample_thr'])",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * samples_per_gpu",
                            "BinOp"
                        ],
                        [
                            "samples_per_gpu",
                            "variable"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, samples_per_gpu) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, samples_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=samples_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(worker_init_fn, num_workers=num_workers, rank=rank, seed=seed) if seed is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/custom.py": {
        "torch": {}
    },
    "mmdet/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmdet/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_14": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_16": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_18": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/samplers/group_sampler.py": {
        "torch": {
            "Generator_98": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_123": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_106": {
                "n": {
                    "value": "int(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/backbones/detectors_resnet.py": {
        "torch": {
            "Sequential_177": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_162": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/hourglass.py": {
        "torch": {
            "Upsample_68": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(3, 128, 7, padding=3, stride=2, norm_cfg=norm_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.hourglass_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[HourglassModule(downsample_times, stage_channels, stage_blocks) for _ in range(num_stacks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_144": {
                "variable": {
                    "value": "self.conv1x1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(cur_channel, cur_channel, 1, norm_cfg=norm_cfg, act_cfg=None) for _ in range(num_stacks - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.out_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(cur_channel, feat_channel, 3, padding=1, norm_cfg=norm_cfg) for _ in range(num_stacks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "self.remap_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(feat_channel, cur_channel, 1, norm_cfg=norm_cfg, act_cfg=None) for _ in range(num_stacks - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_399": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_404": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "*args": {
                    "value": "*hr_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_136": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_376": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_396": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/regnet.py": {
        "torch": {
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/res2net.py": {
        "torch": {
            "AvgPool2d_47": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_116": {
                "variable": {
                    "value": "spx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cp.checkpoint(_inner_forward, x)",
                            "Call"
                        ],
                        [
                            "_inner_forward(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv1_plugin_names)",
                            "Call"
                        ],
                        [
                            "sp",
                            "variable"
                        ],
                        [
                            "torch.cat((out, spx[self.scales - 1]), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, sp), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, self.pool(spx[self.scales - 1])), 1)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv2_plugin_names)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.norm3(out)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv3_plugin_names)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=stride, stride=stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, sp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, spx[self.scales - 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, self.pool(spx[self.scales - 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_196": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnet.py": {
        "torch": {
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_567": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_523": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, stem_channels // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_566": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_533": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_543": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_553": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/ssd_vgg.py": {
        "torch": {
            "Parameter_159": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/builder.py": {
        "torch": {
            "Sequential_30": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/anchor_head.py": {
        "torch": {
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_234": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_636": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_639": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_645": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_334": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_335": {
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_479": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/atss_head.py": {
        "torch": {
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.atss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.atss_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.atss_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.anchor_generator.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "left_right",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_, r_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_313": {
                "variable": {
                    "value": "top_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_, b_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_314": {
                "variable": {
                    "value": "centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_450": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_455": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_595": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_596": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_636": {
                "variable": {
                    "value": "split_inside_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inside_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_inside_flags(flat_anchors, valid_flags, img_meta['img_shape'][:2], self.train_cfg.allowed_border)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_level_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors.size(0) for anchors in anchor_list[0]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_223": {
                "variable": {
                    "value": "centerness_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_317": {
                "input": {
                    "value": "centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.atss_centerness(reg_feat)",
                            "Call"
                        ],
                        [
                            "centerness.permute(0, 2, 3, 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0]))",
                            "Call"
                        ],
                        [
                            "centerness.permute(1, 2, 0).reshape(-1).sigmoid()",
                            "Call"
                        ],
                        [
                            "centerness[topk_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_279": {
                "data": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([max(inds.numel(), 1) for inds in pos_inds_list])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/base_dense_head.py": {
        "torch": {}
    },
    "mmdet/models/dense_heads/fcos_head.py": {
        "torch": {
            "ModuleList_132": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.fcos_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.fcos_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.fcos_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_291": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[centerness.permute(0, 2, 3, 1).reshape(-1) for centerness in centernesses]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_293": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels[min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_294": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([bbox_targets[i] for bbox_targets in bbox_targets_list])",
                            "Call"
                        ],
                        [
                            "bbox_targets / self.strides[i]",
                            "BinOp"
                        ],
                        [
                            "torch.stack((left, top, right, bottom), -1)",
                            "Call"
                        ],
                        [
                            "bbox_targets[range(num_points), min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_296": {
                "variable": {
                    "value": "flatten_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_455": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_459": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_491": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs.new_zeros(center_xs.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_493": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs.new_zeros(center_xs.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_495": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_526": {
                "variable": {
                    "value": "concat_regress_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_regress_ranges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[points[i].new_tensor(self.regress_ranges[i])[None].expand_as(points[i]) for i in range(num_levels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "concat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((x.reshape(-1), y.reshape(-1)), dim=-1) + stride // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_586": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_230": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(self.fcos_reg(reg_feat)).float()",
                            "Call"
                        ],
                        [
                            "F.relu(bbox_pred)",
                            "Call"
                        ],
                        [
                            "bbox_pred.exp()",
                            "Call"
                        ],
                        [
                            "bbox_pred * stride",
                            "BinOp"
                        ],
                        [
                            "bbox_pred.permute(1, 2, 0).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "bbox_pred[topk_inds, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_554": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_targets[i] for bbox_targets in bbox_targets_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_593": {
                "variable": {
                    "value": "center_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes[None].expand(num_points, num_gts, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_607": {
                "variable": {
                    "value": "center_gts[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_mins > gt_bboxes[..., 0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs - stride",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_bboxes[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_609": {
                "variable": {
                    "value": "center_gts[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_mins > gt_bboxes[..., 1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_ys - stride",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_bboxes[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_611": {
                "variable": {
                    "value": "center_gts[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_maxs > gt_bboxes[..., 2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_bboxes[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x_maxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs + stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_613": {
                "variable": {
                    "value": "center_gts[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_maxs > gt_bboxes[..., 3]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_bboxes[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_maxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_ys + stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_620": {
                "variable": {
                    "value": "center_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cb_dist_left, cb_dist_top, cb_dist_right, cb_dist_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_661": {
                "input": {
                    "value": "centerness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_496": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_553": {
                "tensors": {
                    "value": "[labels[i] for labels in labels_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/fovea_head.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.fovea_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_264": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([labels_level_img.flatten() for labels_level_img in labels_level]) for labels_level in zip(*label_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_265": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat([bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]) for bbox_targets_level in zip(*bbox_target_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_274": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes_raw[:, 2] - gt_bboxes_raw[:, 0]) * (gt_bboxes_raw[:, 3] - gt_bboxes_raw[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_bboxes_single(cls_score_list, bbox_pred_list, featmap_sizes, points, img_shape, scale_factor, cfg, rescale)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_bboxes)",
                            "Call"
                        ],
                        [
                            "det_bboxes / det_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_402": {
                "variable": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([det_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_406": {
                "variable": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[det_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.fovea_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.fovea_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.feat_channels * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_188": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(featmap_size[0], dtype=dtype, device=device) + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(featmap_size[1], dtype=dtype, device=device) + 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flatten_bbox_preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flatten_bbox_preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_293": {
                "variable": {
                    "value": "(_, hit_index_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-gt_areas[hit_indices]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ceil_300": {
                "variable": {
                    "value": "pos_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 - self.sigma) * half_w - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_300": {
                "variable": {
                    "value": "pos_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_303": {
                "variable": {
                    "value": "pos_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 + self.sigma) * half_w - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_303": {
                "variable": {
                    "value": "pos_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_306": {
                "variable": {
                    "value": "pos_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 - self.sigma) * half_h - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_306": {
                "variable": {
                    "value": "pos_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_309": {
                "variable": {
                    "value": "pos_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 + self.sigma) * half_h - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_309": {
                "variable": {
                    "value": "pos_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "[labels_level_img.flatten() for labels_level_img in labels_level]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_259": {
                "tensors": {
                    "value": "[bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_184": {
                "start": {
                    "value": "featmap_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_186": {
                "start": {
                    "value": "featmap_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_326": {
                "input": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_291": {
                "input": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/free_anchor_retina_head.py": {
        "torch": {
            "cat_92": {
                "variable": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(bbox_pred.size(0), -1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(bbox_preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(box_prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_160": {
                "variable": {
                    "value": "(_, matched)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps(gt_bboxes_, anchors_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pre_anchor_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob_[matched]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gt_labels_.view(-1, 1, 1).repeat(1, self.pre_anchor_topk, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_168": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_182": {
                "variable": {
                    "value": "matched_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-loss_bbox",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(num_obj).type_as(gt_labels_), gt_labels_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_122": {
                "variable": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.arange(num_obj).type_as(gt_labels_), gt_labels_], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(box_cls_prob, as_tuple=False).t_()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "object_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((object_box_iou - t1) / (t2 - t1)).clamp(min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_133": {
                "variable": {
                    "value": "box_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices, object_box_prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_136": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.sum(object_cls_box_prob, dim=0).to_dense()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "positive_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_224": {
                "input": {
                    "value": "1 - matched_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_228": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(bag_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_250": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors_.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_149": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.flip([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "nonzero_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(gt_labels_.unsqueeze(dim=-1) == indices[0], object_box_prob[:, indices[1]], torch.tensor([0]).type_as(object_box_prob)).max(dim=0).values",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(anchors_.size(0), self.cls_out_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_229": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_251": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_120": {
                "start": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels_.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_142": {
                "condition": {
                    "value": "gt_labels_.unsqueeze(dim=-1) == indices[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "object_box_prob[:, indices[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0]).type_as(object_box_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_142": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/fsaf_head.py": {
        "torch": {
            "zeros_like_89": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags.type(torch.bool), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags.type(torch.bool), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_246": {
                "variable": {
                    "value": "label_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, gt_labels)))",
                            "Call"
                        ],
                        [
                            "sum(map(len, gt_labels))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_273": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_result.pos_inds",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_379": {
                "variable": {
                    "value": "loc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_loss.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "weight_reduce_loss(reg_loss, loc_weight, reduction='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_380": {
                "variable": {
                    "value": "cls_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_loss.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "weight_reduce_loss(cls_loss, cls_weight, reduction='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_382": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_gt_inds >= 0",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_382": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "loss_levels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(loss_levels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_result.pos_inds",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_302": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_302": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_219": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ga_retina_head.py": {
        "torch": {
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ga_rpn_head.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_115": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/gfl_head.py": {
        "torch": {
            "softmax_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.reshape(-1, self.reg_max + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(x.reshape(-1, self.reg_max + 1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.project).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.gfl_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.gfl_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * (self.reg_max + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.anchor_generator.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_452": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_588": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_589": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_628": {
                "variable": {
                    "value": "split_inside_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inside_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_inside_flags(flat_anchors, valid_flags, img_meta['img_shape'][:2], self.train_cfg.allowed_border)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_level_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors.size(0) for anchors in anchor_list[0]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_216": {
                "tensors": {
                    "value": "[anchors_cx, anchors_cy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "variable": {
                    "value": "weight_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_484": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_40": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.reg_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.reg_max + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([max(inds.numel(), 1) for inds in pos_inds_list])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/guided_anchor_head.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_526": {
                "variable": {
                    "value": "bbox_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_527": {
                "variable": {
                    "value": "bbox_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_528": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_621": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_weights[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_621": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_851": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_854": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_415": {
                "variable": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(gt_bboxes_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes_list[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_422": {
                "variable": {
                    "value": "loc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_423": {
                "variable": {
                    "value": "ignore_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_429": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0]) * (gt_bboxes[:, 3] - gt_bboxes[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_434": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_580": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_581": {
                "tensors": {
                    "value": "approx_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_582": {
                "tensors": {
                    "value": "square_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_708": {
                "tensors": {
                    "value": "guided_anchors_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_290": {
                "tensors": {
                    "value": "inside_flags_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_290": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_435": {
                "input": {
                    "value": "min_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/nasfcos_head.py": {
        "torch": {
            "ModuleList_35": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.fcos_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.fcos_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.fcos_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/pisa_retinanet_head.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(num_imgs, -1, label_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores, dim=1).reshape(-1, flatten_cls_scores[0].size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "flatten_cls_scores[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(num_imgs, -1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds, dim=1).view(-1, flatten_bbox_preds[0].size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "flatten_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "flatten_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "flatten_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_anchor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_to_levels(concat_anchor_list, num_level_anchors)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "flatten_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "flatten_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "flatten_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/pisa_ssd_head.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_121": {
                "input": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_123": {
                "input": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "all_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/reppoints_head.py": {
        "torch": {
            "tensor_128": {
                "variable": {
                    "value": "self.dcn_base_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dcn_base_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([dcn_base_y, dcn_base_x], axis=1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self.dcn_base_offset.type_as(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.reppoints_cls_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.reppoints_pts_init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.reppoints_pts_init_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.reppoints_pts_refine_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_258": {
                "variable": {
                    "value": "intervel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.dcn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_266": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_y, grid_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "regressed_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_left, grid_top, grid_left + grid_width, grid_top + grid_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_432": {
                "variable": {
                    "value": "pos_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_proposals[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "self._get_bboxes_single(cls_score_list, bbox_pred_list, mlvl_points, img_shape, scale_factor, cfg, rescale, nms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_772": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_775": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.moment_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_400": {
                "variable": {
                    "value": "pts_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pts_lvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pts_lvl, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "proposals_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proposals_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_763": {
                "variable": {
                    "value": "bbox_pos_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points[:, :2], points[:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_769": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_253": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_375": {
                "variable": {
                    "value": "bbox_shift",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point[i_lvl][:, :2], point[i_lvl][:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "xy_pts_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_pts_shift, y_pts_shift]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_647": {
                "variable": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center[i_lvl][:, :2], center[i_lvl][:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_222": {
                "variable": {
                    "value": "pts_y_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_y - pts_y_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_223": {
                "variable": {
                    "value": "pts_x_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_x - pts_x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pts_x_mean - half_width, pts_y_mean - half_height, pts_x_mean + half_width, pts_y_mean + half_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_251": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "moment_width_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moment_transfer[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_229": {
                "input": {
                    "value": "moment_height_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moment_transfer[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/retina_head.py": {
        "torch": {
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/retina_sepbn_head.py": {
        "torch": {
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "cls_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "reg_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/rpn_head.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "level_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "nonzero_156": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ssd_head.py": {
        "torch": {
            "ModuleList_74": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "reg_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cls_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_251": {
                "input": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_253": {
                "input": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_155": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * (num_classes + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/base.py": {
        "torch": {
            "is_available_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/reppoints_detector.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/single_stage.py": {
        "torch": {}
    },
    "mmdet/models/detectors/two_stage.py": {
        "torch": {
            "randn_100": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/accuracy.py": {
        "torch": {}
    },
    "mmdet/models/losses/ae_loss.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "tl_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tl_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tl_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "br_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "br_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(br_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_46": {
                "variable": {
                    "value": "me_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "me_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(me_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_60": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "me_list.expand((N, N, M)).permute(1, 0, 2) - me_list",
                            "BinOp"
                        ],
                        [
                            "conf_weight * (margin - conf_mat.sum(-1).abs())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/balanced_l1_loss.py": {
        "torch": {
            "abs_40": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_47": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_122": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_124": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/focal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_38": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/gaussian_focal_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/gfocal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_36": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "zerolabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor.new_zeros(pred.shape)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_45": {
                "input": {
                    "value": "pred[pos, pos_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "score[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_74": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "dis_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.long()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "dis_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis_left + 1",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/ghm_loss.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels >= 0) & (labels < label_channels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_73": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid().detach() - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(mu * mu + diff * diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(pred.sigmoid().detach() - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(mu * mu + diff * diff)).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_39": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_92": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(g)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_117": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "input": {
                    "value": "diff * diff + mu * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "input": {
                    "value": "mu * mu + diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/iou_loss.py": {
        "torch": {
            "stack_64": {
                "variable": {
                    "value": "loss_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_93": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "enclose_x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_107": {
                "variable": {
                    "value": "enclose_x2y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_57": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_60": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_62": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_158": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_195": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_228": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/mse_loss.py": {
        "torch": {
            "mse_loss_11": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/pisa_loss.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(gts)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/losses/smooth_l1_loss.py": {
        "torch": {
            "abs_23": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/utils.py": {
        "torch": {}
    },
    "mmdet/models/necks/bfp.py": {
        "torch": {
            "adaptive_max_pool2d_80": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(feats) / len(feats)",
                            "BinOp"
                        ],
                        [
                            "self.refine(bsf)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_100": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/necks/fpn.py": {
        "torch": {
            "ModuleList_113": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_186": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_200": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_214": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/fpn_carafe.py": {
        "torch": {
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.upsample_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/hrfpn.py": {
        "torch": {
            "ModuleList_55": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs[0]]",
                            "List"
                        ],
                        [
                            "[out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/nas_fpn.py": {
        "torch": {
            "ModuleList_61": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.fpn_stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_83": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "extra_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_78": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/nasfcos_fpn.py": {
        "torch": {
            "ModuleList_60": {
                "variable": {
                    "value": "self.adapt_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_93": {
                "variable": {
                    "value": "self.fpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "feats2_resize",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats2",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "feats1.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "input": {
                    "value": "feats_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats1 + feats2_resize",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "inputs[input_idx].size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/pafpn.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.downsample_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.pafpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_124": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_134": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/rfp.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_39": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.rfp_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.rfp_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if dilation > 1 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation if dilation > 1 else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rfp_weight(x_idx[ft_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu__52": {
                "input": {
                    "value": "self.aspp[aspp_idx](inp)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/base_roi_head.py": {
        "torch": {}
    },
    "mmdet/models/roi_heads/bbox_heads/bbox_head.py": {
        "torch": {
            "AvgPool2d_55": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.roi_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * self.roi_feat_area",
                            "BinOp"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if reg_class_agnostic else 4 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_full((num_samples,), self.num_classes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_283": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_283": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_322": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_323": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "self.bbox_coder.decode(rois[:, 1:], bbox_pred)",
                            "Call"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i, as_tuple=False).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "label_weights > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/double_bbox_head.py": {
        "torch": {
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels * self.roi_feat_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/cascade_roi_head.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "self.bbox_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.bbox_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.mask_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/dynamic_roi_head.py": {
        "torch": {
            "topk_82": {
                "variable": {
                    "value": "(ious, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "iou_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.iou_topk, len(assign_result.max_overlaps))",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_127": {
                "input": {
                    "value": "cur_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_targets[2][pos_inds, :2].abs().mean(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.kthvalue(cur_target, beta_topk)[0].item()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beta_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.beta_topk * num_imgs, num_pos)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/grid_roi_head.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "new_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_x1y1, new_x2y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_111": {
                "n": {
                    "value": "grid_feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/htc_roi_head.py": {
        "torch": {
            "cat_159": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_141": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_175": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_194": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_511": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/coarse_mask_head.py": {
        "torch": {
            "ModuleList_63": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels * self.output_area",
                            "BinOp"
                        ],
                        [
                            "self.fc_out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes * self.output_area",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/fcn_mask_head.py": {
        "torch": {
            "split_280": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_300": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_302": {
                "variable": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.to(dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([gx, gy], dim=3)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_206": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(N, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "variable"
                        ],
                        [
                            "int(np.ceil(N * img_h * img_w * BYTES_PER_FLOAT / GPU_MEM_LIMIT))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(mask_pred)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[0] * scale_factor).astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool if threshold >= 0 else torch.uint8",
                    "type": "IfExp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_270": {
                "variable": {
                    "value": "(x0_int, y0_int)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes.min(dim=0).values.floor()[:2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_273": {
                "variable": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 2].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[1] * scale_factor).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_275": {
                "variable": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 3].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[0] * scale_factor).astype(np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_291": {
                "input": {
                    "value": "img_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x0_int, x1_int, device=device, dtype=torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_x - x0) / (x1 - x0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_292": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isinf(img_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_294": {
                "input": {
                    "value": "img_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y0_int, y1_int, device=device, dtype=torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_y - y0) / (y1 - y0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_295": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isinf(img_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_284": {
                "start": {
                    "value": "y0_int",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 3].max().ceil() + 1, max=img_h).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_286": {
                "start": {
                    "value": "x0_int",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 2].max().ceil() + 1, max=img_w).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_206": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(mask_pred)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isinf_292": {
                "input": {
                    "value": "img_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x0_int, x1_int, device=device, dtype=torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_x - x0) / (x1 - x0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isinf_295": {
                "input": {
                    "value": "img_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y0_int, y1_int, device=device, dtype=torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_y - y0) / (y1 - y0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_labels",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/fused_semantic_head.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/grid_head.py": {
        "torch": {
            "Sequential_70": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_79": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_80": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.forder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.sorder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(self.grid_points)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "pos_gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, self.grid_points, map_size, map_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sub_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "sub_targets.to(sampling_results[0].pos_bboxes.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "bbox_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes_x1, bboxes_y1, bboxes_x2, bboxes_y2, cls_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "fo_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "so_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, stride=1, padding=2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, 1, 2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/mask_point_head.py": {
        "torch": {
            "ModuleList_61": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "variable": {
                    "value": "self.fc_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_channels",
                            "variable"
                        ],
                        [
                            "fc_in_channels + (num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if self.class_agnostic else self.num_classes",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fine_grained_feats, coarse_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_239": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "point_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(self._get_target_single, rois_list, rel_roi_points_list, pos_assigned_gt_inds_list, gt_masks, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(point_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(point_targets)",
                            "Call"
                        ],
                        [
                            "point_sample(gt_masks_th, rel_img_points).squeeze(1)",
                            "Call"
                        ],
                        [
                            "rois.new_zeros((0, num_points))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_208": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask_pred.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_262": {
                "variable": {
                    "value": "rand_roi_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_coords, rand_roi_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, coarse_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_210": {
                "input": {
                    "value": "gt_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.clone()",
                            "Call"
                        ],
                        [
                            "mask_pred[inds, labels].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_254": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_256": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/maskiou_head.py": {
        "torch": {
            "ModuleList_35": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_feat, mask_pred_pooled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_scoring_roi_head.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/point_rend_roi_head.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "fine_grained_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "refined_mask_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.clone()",
                            "Call"
                        ],
                        [
                            "F.interpolate(refined_mask_pred, scale_factor=self.test_cfg.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.reshape(num_rois, channels, mask_height * mask_width)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.scatter_(2, point_indices, mask_point_pred)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.view(num_rois, channels, mask_height, mask_width)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.test_cfg.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "point_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/roi_extractors/base_roi_extractor.py": {
        "torch": {
            "ModuleList_54": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/roi_extractors/single_level_roi_extractor.py": {
        "torch": {
            "sqrt_47": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1]) * (rois[:, 4] - rois[:, 2])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_49": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_49": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/shared_heads/res_layer.py": {
        "torch": {}
    },
    "mmdet/models/roi_heads/standard_roi_head.py": {
        "torch": {
            "cat_194": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_177": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/test_mixins.py": {
        "torch": {
            "from_numpy_167": {
                "variable": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(scale_factor).to(det_bboxes.device)",
                            "Call"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/res_layer.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_44": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/carafe/carafe.py": {
        "torch": {
            "zeros_like_48": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "grad_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_116": {
                "variable": {
                    "value": "rgrad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "rgrad_input_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "rgrad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "rgrad_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "variable": {
                    "value": "grad_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.channel_compressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.compressed_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.content_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.compressed_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.up_kernel * self.up_kernel * self.up_group * self.scale_factor * self.scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.encoder_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.encoder_kernel - 1) * self.encoder_dilation / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.encoder_dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pixel_shuffle_217": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pixel_shuffle(mask, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "mask.view(n, mask_channel, -1, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(mask, dim=2)",
                            "Call"
                        ],
                        [
                            "mask.view(n, mask_c, h, w).contiguous()",
                            "Call"
                        ],
                        [
                            "self.content_encoder(compressed_x)",
                            "Call"
                        ],
                        [
                            "self.kernel_normalizer(mask)",
                            "Call"
                        ]
                    ]
                },
                "upscale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pixel_shuffle(mask, self.scale_factor)",
                            "Call"
                        ],
                        [
                            "mask.view(n, mask_channel, -1, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(mask, dim=2)",
                            "Call"
                        ],
                        [
                            "mask.view(n, mask_c, h, w).contiguous()",
                            "Call"
                        ],
                        [
                            "self.content_encoder(compressed_x)",
                            "Call"
                        ],
                        [
                            "self.kernel_normalizer(mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/carafe/grad_check.py": {
        "torch": {
            "randn_12": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_13": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_13": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradcheck_17": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "CARAFE(5, 4, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(feat, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_21": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "CARAFENaive(5, 4, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(feat, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/carafe/setup.py": {
        "torch": {}
    },
    "mmdet/ops/context_block.py": {
        "torch": {
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_45": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_47": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.channel_add_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.channel_mul_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "input_x.view(batch, channel, height * width)",
                            "Call"
                        ],
                        [
                            "input_x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "context_mask.view(batch, 1, height * width)",
                            "Call"
                        ],
                        [
                            "self.softmax(context_mask)",
                            "Call"
                        ],
                        [
                            "context_mask.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "channel_mul_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.channel_mul_conv(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_51": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_59": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/conv_ws.py": {
        "torch": {
            "conv2d_20": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ],
                        [
                            "(weight - mean) / std",
                            "BinOp"
                        ],
                        [
                            "self.weight_gamma * weight + self.weight_beta",
                            "BinOp"
                        ],
                        [
                            "self._get_weight(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_102": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_flat.var(dim=1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_flat.var(dim=1) + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ],
                        [
                            "(weight - mean) / std",
                            "BinOp"
                        ],
                        [
                            "self.weight_gamma * weight + self.weight_beta",
                            "BinOp"
                        ],
                        [
                            "self._get_weight(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/corner_pool/corner_pool.py": {
        "torch": {}
    },
    "mmdet/ops/dcn/deform_conv.py": {
        "torch": {
            "zeros_like_157": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_pair(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_pair(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_426": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deform_conv(x, offset, self.weight, self.stride, self.padding, self.dilation, self.groups, self.deformable_groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, :out.size(2) - pad_h, :out.size(3) - pad_w].contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_428": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_247": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_365": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/deform_pool.py": {
        "torch": {
            "zeros_like_66": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/generalized_attention.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.v_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.v_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_163": {
                "variable": {
                    "value": "h_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_166": {
                "variable": {
                    "value": "w_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_169": {
                "variable": {
                    "value": "h_kv_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h_kv - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_172": {
                "variable": {
                    "value": "w_kv_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w_kv - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_183": {
                "variable": {
                    "value": "feat_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_dim / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_185": {
                "variable": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "embedding_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((w_diff / dim_mat).sin(), (w_diff / dim_mat).cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "embedding_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((h_diff / dim_mat).sin(), (h_diff / dim_mat).cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(appr_bias, proj_key).view(n, num_heads, 1, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n, num_heads, h, w, h_kv, w_kv, dtype=x_input.dtype, device=x_input.device)",
                            "Call"
                        ],
                        [
                            "energy.masked_fill_(cur_local_constraint_map, float('-inf'))",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query + appr_bias, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy.view(n, num_heads, h * w, h_kv * w_kv)",
                            "Call"
                        ],
                        [
                            "torch.matmul(proj_query, proj_key).view(n, num_heads, h, w, h_kv, w_kv)",
                            "Call"
                        ],
                        [
                            "energy + (energy_x + energy_y)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_value_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_value.view((n, num_heads, self.v_dim, h_kv * w_kv)).permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_366": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.appr_geom_fc_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.appr_geom_fc_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.position_embedding_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.appr_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "appr_bias_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.geom_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "geom_bias_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2 * stdv * torch.rand(out_c) + stdv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.local_constraint_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(local_constraint_map).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_140": {
                "variable": {
                    "value": "self.q_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.q_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_146": {
                "variable": {
                    "value": "self.kv_downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.kv_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "appr_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_heads",
                            "Attribute"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x_input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "x_input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "w_kv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "local_constraint_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((max_len, max_len, max_len_kv, max_len_kv), dtype=np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_273": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query + appr_bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "position_feat_x.permute(0, 1, 2, 4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_302": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y.permute(0, 1, 2, 4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_101": {
                "*size": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qk_embed_dim * num_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_277": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x_q).view((n, num_heads, self.qk_embed_dim, h * w))",
                            "Call"
                        ],
                        [
                            "proj_query.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_x_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_323": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proj_query + geom_bias).view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query.view(n, num_heads, h, w, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "proj_query_reshape.permute(0, 1, 3, 2, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "position_feat_y_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "energy_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_x_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_x.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_x.view(n, num_heads, w * w_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_343": {
                "variable": {
                    "value": "energy_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_feat_y_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_feat_y.permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "position_feat_y.view(n, num_heads, h * h_kv, self.qk_embed_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "geom_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.geom_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.geom_bias.view(1, num_heads, self.qk_embed_dim, 1).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_285": {
                "input": {
                    "value": "appr_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim)",
                            "Call"
                        ],
                        [
                            "self.appr_bias.view(1, num_heads, 1, self.qk_embed_dim).repeat(n, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x_kv).view((n, num_heads, self.qk_embed_dim, h_kv * w_kv))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/masked_conv/masked_conv.py": {
        "torch": {
            "nonzero_36": {
                "variable": {
                    "value": "mask_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[0] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "addmm_48": {
                "variable": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "mat1": {
                    "value": "bias[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "beta": {
                    "value": "weight.view(out_channel, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "data_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.new_zeros(in_channel * kernel_h * kernel_w, mask_inds.size(0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/merge_cells.py": {
        "torch": {
            "cat_136": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_144": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1] // size[-1]",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_95": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, kernel_size=kernel_size, stride=kernel_size)",
                            "Call"
                        ],
                        [
                            "self._binary_op(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/nms/nms_wrapper.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "dets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "dets_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[bboxes_for_nms, scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[bboxes, scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "dets_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/non_local.py": {
        "torch": {
            "matmul_65": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / pairwise_weight.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/point_sample.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "affine_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "affine_grid_49": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affine_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]], device=device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((1, 1, *size))",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "abs_img_points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_160": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "denormalize(points)",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_209": {
                "variable": {
                    "value": "roi_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align/gradcheck.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(num_rois, 4) * img_size * 0.5",
                            "BinOp"
                        ],
                        [
                            "np.hstack((batch_ind, rois))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_27": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_29": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align/roi_align.py": {
        "torch": {}
    },
    "mmdet/ops/roi_pool/gradcheck.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradcheck_15": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIPool(4, 1.0 / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_pool/roi_pool.py": {
        "torch": {}
    },
    "mmdet/ops/saconv.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.switch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.weight_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.weight.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.pre_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.post_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "variable": {
                    "value": "avg_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + avg_x",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_96": {
                "variable": {
                    "value": "avg_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + avg_x",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "avg_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ],
                        [
                            "self.pre_context(avg_x)",
                            "Call"
                        ],
                        [
                            "avg_x.expand_as(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=(2, 2, 2, 2), mode='reflect')",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(avg_x, kernel_size=5, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, output_size=1)",
                            "Call"
                        ],
                        [
                            "self.post_context(avg_x)",
                            "Call"
                        ],
                        [
                            "avg_x.expand_as(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_122": {
                "variable": {
                    "value": "avg_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch * out_s + (1 - switch) * out_l",
                            "BinOp"
                        ],
                        [
                            "out + avg_x",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.offset_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.offset_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "18",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/sigmoid_focal_loss/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "mmdet/ops/wrappers.py": {
        "torch": {}
    },
    "mmdet/utils/collect_env.py": {
        "torch": {
            "is_available_20": {
                "variable": {
                    "value": "cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_39": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/utils/contextmanagers.py": {
        "torch": {
            "current_stream_29": {
                "variable": {
                    "value": "stream_before_context_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_45": {
                "variable": {
                    "value": "grad_enabled_before",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_108": {
                "variable": {
                    "value": "initial_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_40": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_49": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_58": {
                "variable": {
                    "value": "grad_enabled_after",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_80": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_36": {
                "enable_timing": {
                    "value": "DEBUG_COMPLETED_TIME",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(os.environ.get('DEBUG_COMPLETED_TIME', False))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_119": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/utils/profiling.py": {
        "torch": {
            "Event_26": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_27": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/async_benchmark.py": {
        "torch": {
            "Stream_60": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "str"
                        ]
                    ]
                }
            },
            "default_stream_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_anchor.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_31": {
                "input": {
                    "value": "anchors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_40": {
                "input": {
                    "value": "anchors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_145": {
                "input": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "anchor_tuples",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_assigner.py": {
        "torch": {
            "Tensor_59": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_98": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_131": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_160": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_161": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_270": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_291": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_292": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_377": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_397": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_398": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_39": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_66": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_87": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_180": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_198": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_234": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_259": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_332": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_335": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[2, 2]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_337": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[2, 5]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_340": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[0, 2]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_369": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_402": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_async.py": {
        "torch": {
            "Stream_48": {
                "variable": {
                    "value": "stream",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_grad_enabled_71": {
                "variable": {
                    "value": "ori_grad_enabled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_82": {
                "mode": {
                    "value": "ori_grad_enabled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_backbone.py": {
        "torch": {
            "allclose_31": {
                "variable": {
                    "value": "weight_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.weight.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_266": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_384": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_406": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_419": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_434": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_451": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_503": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_550": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_568": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_581": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_596": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_613": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_649": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_667": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_715": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_760": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_778": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_810": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_820": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_34": {
                "variable": {
                    "value": "bias_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.bias.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_config.py": {
        "torch": {}
    },
    "tests/test_forward.py": {
        "torch": {
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_fp16.py": {
        "torch": {
            "ones_75": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_127": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_202": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_226": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_227": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_251": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_252": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_281": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_282": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_283": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_190": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_heads.py": {
        "torch": {
            "rand_332": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_356": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_ids[:, None].float(), roi_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_518": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randint(0, 2, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_568": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_572": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_605": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_510": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_511": {
                "variable": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_514": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randint(0, n_img, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_ids)",
                            "Call"
                        ],
                        [
                            "torch.empty((0,), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_45": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_105": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_111": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_319": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_183": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_203": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_266": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_273": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_529": {
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_529": {
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_losses.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_26": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_31": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_masks.py": {
        "torch": {}
    },
    "tests/test_necks.py": {
        "torch": {
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ops/test_corner_pool.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "lr_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 0, 0, 0, 0], [2, 1, 3, 0, 2], [5, 4, 1, 1, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "tb_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 3, 1, 0, 0], [0, 1, 1, 0, 0], [0, 3, 4, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "left_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 0, 0, 0, 0], [3, 3, 3, 2, 2], [6, 6, 6, 6, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "right_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 0, 0, 0, 0], [2, 2, 3, 3, 3], [5, 5, 5, 5, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "top_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "bottom_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0, 3, 1, 0, 0], [0, 3, 1, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_34": {
                "input": {
                    "value": "left_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool(lr_tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "left_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[0, 0, 0, 0, 0], [3, 3, 3, 2, 2], [6, 6, 6, 6, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_42": {
                "input": {
                    "value": "right_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool(lr_tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "right_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[0, 0, 0, 0, 0], [2, 2, 3, 3, 3], [5, 5, 5, 5, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_50": {
                "input": {
                    "value": "top_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool(tb_tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "top_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0]]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_58": {
                "input": {
                    "value": "bottom_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool(tb_tensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bottom_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[[0, 3, 1, 0, 0], [0, 3, 1, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0], [0, 3, 4, 0, 0]]]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops/test_merge_cells.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_14": {
                "variable": {
                    "value": "inputs_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_25": {
                "variable": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "inputs_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "inputs_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 256, 128, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_63": {
                "variable": {
                    "value": "gt_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 128, 128])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_x.shape[-1] // target_size[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_x.shape[-1] // target_size[-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_56": {
                "variable": {
                    "value": "gt_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 32, 32])",
                            "Call"
                        ],
                        [
                            "torch.randn([2, 256, 128, 128])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(64, 64)",
                            "Tuple"
                        ],
                        [
                            "target_resize_sizes",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "method",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize_methods_list",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops/test_nms.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "tensor_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[49.1, 32.4, 51.0, 35.9, 0.9], [49.3, 32.9, 51.0, 35.3, 0.9], [35.3, 11.5, 39.9, 14.5, 0.4], [35.2, 11.7, 39.7, 15.7, 0.3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_36": {
                "input": {
                    "value": "suppressed",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_suppressed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed).to(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_48": {
                "input": {
                    "value": "suppressed",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_suppressed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed).to(device_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_83": {
                "input": {
                    "value": "suppressed",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_suppressed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(base_expected_suppressed)",
                            "Call"
                        ],
                        [
                            "base_expected_suppressed.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(base_expected_suppressed).to(device_id)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops/test_soft_nms.py": {
        "torch": {}
    },
    "tests/test_ops/test_wrappers.py": {
        "torch": {
            "randn_49": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_101": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_164": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(s, d) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_117": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_122": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_cha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_143": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_149": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_189": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_46": {
                "input": {
                    "value": "wrapper(x_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_98": {
                "input": {
                    "value": "wrapper(x_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_129": {
                "input": {
                    "value": "wrapper(x_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_150": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_161": {
                "input": {
                    "value": "wrapper(x_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ],
                        [
                            "ref(x_normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_176": {
                "variable": {
                    "value": "x_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_182": {
                "variable": {
                    "value": "x_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_pisa_heads.py": {
        "torch": {
            "rand_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_49": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_119": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_125": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_213": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_222": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_roi_extractor.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_34": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_73": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_74": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_103": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_105": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampler.py": {
        "torch": {
            "Tensor_26": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_57": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_58": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_172": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_206": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_214": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_267": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_271": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_297": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_150": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_230": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_268": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmark.py": {
        "torch": {
            "synchronize_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/detectron2pytorch.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "state_dict[torch_name + .running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "variable": {
                    "value": "state_dict[torch_name + .running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_w']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/fuse_conv_bn.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_w * factor.reshape([conv.out_channels, 1, 1, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(conv_b - bn.running_mean) * factor + bn.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Identity_38": {
                "variable": {
                    "value": "m._modules[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/get_flops.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/publish_model.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_23": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file[:-4]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tools/pytorch2onnx.py": {
        "torch": {
            "empty_113": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, *input_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "next(model.parameters()).dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(model.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/regnet2mmdet.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "regnet_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "current_device_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_robustness.py": {
        "torch": {
            "full_154": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_163": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    },
    "tools/upgrade_model_version.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(val[1:], val[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_val[:, 1:], new_val[:, :1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(val[1:], val[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}