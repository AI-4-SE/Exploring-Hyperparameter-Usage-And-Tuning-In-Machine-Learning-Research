{
    "utils/tools.py": {
        "sklearn": {
            "roc_curve_86": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * target - 1",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output > 0.5",
                            "Compare"
                        ],
                        [
                            "output.argmax(1)",
                            "Call"
                        ],
                        [
                            "output.round().type(torch.long).type_as(labels)",
                            "Call"
                        ],
                        [
                            "(output + 1) * lRange / 2 + lMin",
                            "BinOp"
                        ],
                        [
                            "preds.round().type(torch.long).type_as(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_87": {
                "variable": {
                    "value": "aucVal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_108": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bSize * E",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "batch_val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bSize * E",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_197": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj._nnz()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_198": {
                "variable": {
                    "value": "idx0",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj._nnz()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_200": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx0, edges[1, :])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx0, edges[0, :])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_213": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_77": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-BCE_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "w1 * target * torch.log(prediction.clamp_min(0.001)) + w2 * (1.0 - target) * torch.log(1.0 - prediction.clamp_max(0.999))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_74": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_76": {
                "variable": {
                    "value": "BCE_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_279": {
                "input": {
                    "value": "(1 - preds) ** gamma * labels * torch.log(preds) + preds ** gamma * (1 - labels) * torch.log(1 - preds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_291": {
                "input": {
                    "value": "w * labels * torch.log(preds) + (1 - w) * (1 - labels) * torch.log(1 - preds)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_48": {
                "padding": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - pt) ** self.gamma * BCE_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_99": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * output - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * target - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_287": {
                "input": {
                    "value": "preds_bin * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(k, sigma=self.sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_17": {
                "input": {
                    "value": "prediction.clamp_min(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "1.0 - prediction.clamp_max(0.999)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_242": {
                "input": {
                    "value": "preds * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_279": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output > 0.5",
                            "Compare"
                        ],
                        [
                            "output.argmax(1)",
                            "Call"
                        ],
                        [
                            "output.round().type(torch.long).type_as(labels)",
                            "Call"
                        ],
                        [
                            "(output + 1) * lRange / 2 + lMin",
                            "BinOp"
                        ],
                        [
                            "preds.round().type(torch.long).type_as(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_280": {
                "input": {
                    "value": "1 - preds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_291": {
                "input": {
                    "value": "1 - preds",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/Densenet.py": {
        "torch": {
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "interChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOutChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(nChannels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(out)), 8))",
                            "Call"
                        ],
                        [
                            "out.view(x.shape[0], self.nChannels, -1).mean(2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.fc(out))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growthRate",
                            "BinOp"
                        ],
                        [
                            "nChannels + growthRate",
                            "BinOp"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ],
                        [
                            "nOutChannels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nClasses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(self.bn1(out)), 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_33": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_119": {
                "input": {
                    "value": "F.relu(self.bn1(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_119": {
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/contractables.py": {
        "torch": {
            "einsum_127": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ein_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{bond_strs[0]},{bond_strs[1]}->{out_str}'",
                            "JoinedStr"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[tensors[0], tensors[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_386": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensor.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "right_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "right_vec.tensor.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_419": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ein_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{bond_str},b->{bond_str}'",
                            "JoinedStr"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[tensor, scalar]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_293": {
                "variable": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bslu,bsur->bslr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[even_mats, odd_mats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mats, leftover]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_259": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_vec.tensor.unsqueeze(dummy_ind)",
                            "Call"
                        ],
                        [
                            "torch.bmm(vec, mat)",
                            "Call"
                        ],
                        [
                            "torch.bmm(mat, vec)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_261": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_vec.tensor.unsqueeze(dummy_ind)",
                            "Call"
                        ],
                        [
                            "torch.bmm(vec, mat)",
                            "Call"
                        ],
                        [
                            "torch.bmm(mat, vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_253": {
                "input": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensor",
                            "Attribute"
                        ],
                        [
                            "self.tensor",
                            "Attribute"
                        ],
                        [
                            "torch.einsum('bslu,bsur->bslr', [even_mats, odd_mats])",
                            "Call"
                        ],
                        [
                            "torch.cat([mats, leftover], 1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "num_mats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mats.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/lotenet.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.module1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MPS(input_dim=self.ker ** 2, output_dim=self.virtual_dim, nCh=nCh, bond_dim=bond_dim, feature_dim=feature_dim, parallel_eval=parallel_eval, adaptive_mode=adaptive_mode, periodic_bc=periodic_bc) for i in range(torch.prod(iDim))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.virtual_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.module2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MPS(input_dim=self.ker ** 2, output_dim=self.virtual_dim, nCh=self.virtual_dim, bond_dim=bond_dim, feature_dim=feature_dim, parallel_eval=parallel_eval, adaptive_mode=adaptive_mode, periodic_bc=periodic_bc) for i in range(torch.prod(iDim))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.virtual_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.module3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MPS(input_dim=self.ker ** 2, output_dim=self.virtual_dim, nCh=self.virtual_dim, bond_dim=bond_dim, feature_dim=feature_dim, parallel_eval=parallel_eval, adaptive_mode=adaptive_mode, periodic_bc=periodic_bc) for i in range(torch.prod(iDim))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.BN3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.virtual_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.module1[i](x[:, :, :, i]) for i in range(len(self.module1))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(y, dim=2)",
                            "Call"
                        ],
                        [
                            "self.BN1(y)",
                            "Call"
                        ],
                        [
                            "y.view(b, self.virtual_dim, iDim[0], iDim[1])",
                            "Call"
                        ],
                        [
                            "y.unfold(2, iDim[0], iDim[0]).unfold(3, iDim[1], iDim[1]).reshape(b, self.virtual_dim, self.ker ** 2, -1)",
                            "Call"
                        ],
                        [
                            "[self.module3[i](x[:, :, :, i]) for i in range(len(self.module3))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(y, dim=2)",
                            "Call"
                        ],
                        [
                            "self.BN3(y)",
                            "Call"
                        ],
                        [
                            "self.mpsFinal(y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unfold(2, iDim[0], iDim[0]).unfold(3, iDim[1], iDim[1])",
                            "Call"
                        ],
                        [
                            "x.reshape(b, iDim[0], iDim[1], -1)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, iDim[0], iDim[0]).unfold(3, iDim[1], iDim[1]).reshape(b, self.nCh, self.ker ** 2, -1)",
                            "Call"
                        ],
                        [
                            "[self.module2[i](y[:, :, :, i]) for i in range(len(self.module2))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(x, dim=2)",
                            "Call"
                        ],
                        [
                            "self.BN2(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, self.virtual_dim, iDim[0], iDim[1])",
                            "Call"
                        ],
                        [
                            "x.unfold(2, iDim[0], iDim[0]).unfold(3, iDim[1], iDim[1]).reshape(b, self.virtual_dim, self.ker ** 2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.module1[i](x[:, :, :, i]) for i in range(len(self.module1))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(y, dim=2)",
                            "Call"
                        ],
                        [
                            "self.BN1(y)",
                            "Call"
                        ],
                        [
                            "y.view(b, self.virtual_dim, iDim[0], iDim[1])",
                            "Call"
                        ],
                        [
                            "y.unfold(2, iDim[0], iDim[0]).unfold(3, iDim[1], iDim[1]).reshape(b, self.virtual_dim, self.ker ** 2, -1)",
                            "Call"
                        ],
                        [
                            "[self.module3[i](x[:, :, :, i]) for i in range(len(self.module3))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(y, dim=2)",
                            "Call"
                        ],
                        [
                            "self.BN3(y)",
                            "Call"
                        ],
                        [
                            "self.mpsFinal(y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_37": {
                "input": {
                    "value": "iDim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "self.input_dim",
                            "Attribute"
                        ],
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_51": {
                "input": {
                    "value": "iDim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "self.input_dim",
                            "Attribute"
                        ],
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_63": {
                "input": {
                    "value": "iDim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "self.input_dim",
                            "Attribute"
                        ],
                        [
                            "self.input_dim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ],
                        [
                            "iDim // self.ker",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/mps.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cos_117": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data * PI / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_118": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data * PI / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "module_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[m.to(device) for m in module_list]",
                            "ListComp"
                        ],
                        [
                            "getattr(self, list_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_454": {
                "variable": {
                    "value": "self.module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "unmerged_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module_list",
                            "Attribute"
                        ],
                        [
                            "combined_list",
                            "variable"
                        ]
                    ]
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_571": {
                "variable": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "slri,bsi->bslr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor, input_data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_637": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_697": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "slrij,bsj->bslri",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor, inputs[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_698": {
                "variable": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bslri,bsi->bslr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor, inputs[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_727": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "core_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "core_list + [left_core, right_core]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_781": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lri,bi->blr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor, input_data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_791": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_883": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "olri,bi->bolr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[tensor, input_data]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_924": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_956": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bond_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_1004": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bond_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_718": {
                "variable": {
                    "value": "sv_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(2)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_901": {
                "variable": {
                    "value": "sv_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(2)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_911": {
                "variable": {
                    "value": "sv_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(2)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_207": {
                "equation": {
                    "value": "ein_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_str + '->' + out_str",
                            "BinOp"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_474": {
                "variable": {
                    "value": "new_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lui,our->olri",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_core.tensor, right_core.tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_477": {
                "variable": {
                    "value": "new_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "olu,uri->olri",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_core.tensor, right_core.tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "new_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_tensor, right_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_635": {
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unmerged_list",
                            "variable"
                        ],
                        [
                            "merged_list",
                            "variable"
                        ],
                        [
                            "unmerged_list",
                            "variable"
                        ],
                        [
                            "core * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_734": {
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unmerged_list",
                            "variable"
                        ],
                        [
                            "merged_list",
                            "variable"
                        ],
                        [
                            "unmerged_list",
                            "variable"
                        ],
                        [
                            "core * scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_789": {
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_828": {
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_922": {
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "input_dim + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "[input_dim + 2, bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_369": {
                "modules": {
                    "value": "merged_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "combined_list",
                            "variable"
                        ],
                        [
                            "getattr(self, list_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_448": {
                "input": {
                    "value": "log_scale - n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_532": {
                "n": {
                    "value": "bond_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(1)",
                            "Call"
                        ],
                        [
                            "tensor.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_532": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_613": {
                "variable": {
                    "value": "merged_cores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "slui,surj->slrij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[even_cores, odd_cores]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_675": {
                "data": {
                    "value": "tensor.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_766": {
                "data": {
                    "value": "tensor.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_816": {
                "data": {
                    "value": "tensor.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_867": {
                "data": {
                    "value": "tensor.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_443": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_546": {
                "data": {
                    "value": "tensor.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_966": {
                "data": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_vecs",
                            "variable"
                        ],
                        [
                            "torch.ones(bond_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_1010": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('lri,bi->blr', [tensor, input_data])",
                            "Call"
                        ],
                        [
                            "torch.eye(bond_dim, output_dim)",
                            "Call"
                        ],
                        [
                            "mat + torch.randn_like(mat) / bond_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_1013": {
                "data": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('lri,bi->blr', [tensor, input_data])",
                            "Call"
                        ],
                        [
                            "torch.eye(bond_dim, output_dim)",
                            "Call"
                        ],
                        [
                            "mat + torch.randn_like(mat) / bond_dim",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_551": {
                "data": {
                    "value": "bias_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(bond_dim).unsqueeze(0) if bias_mat is None else bias_mat",
                            "IfExp"
                        ],
                        [
                            "bias_mat.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.bias_mat.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_130": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "args.nChannel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/lidc_dataset.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "(self.data, self.targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + split + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "zeros_250": {
                "variable": {
                    "value": "label_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(labels), max_value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_75": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ein_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{init_str}->{left_part + right_part}'",
                            "JoinedStr"
                        ]
                    ]
                },
                "*operands": {
                    "value": "[tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "svd_84": {
                "variable": {
                    "value": "(left_mat, svs, right_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum(ein_str, [tensor]).contiguous()",
                            "Call"
                        ],
                        [
                            "tensor.view([left_dim, right_dim])",
                            "Call"
                        ],
                        [
                            "std * torch.randn(shape)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(shape)",
                            "Call"
                        ],
                        [
                            "tensor + std * torch.randn(shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_85": {
                "variable": {
                    "value": "(svs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "svs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svs[:max_D]",
                            "Subscript"
                        ],
                        [
                            "svs[:truncation]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_86": {
                "variable": {
                    "value": "right_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(right_mat)",
                            "Call"
                        ],
                        [
                            "right_mat[:max_D]",
                            "Subscript"
                        ],
                        [
                            "right_mat[:truncation]",
                            "Subscript"
                        ],
                        [
                            "torch.einsum('l,lr->lr', [svs, right_mat])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_228": {
                "variable": {
                    "value": "eye_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bond_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "bond_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_133": {
                "variable": {
                    "value": "right_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "l,lr->lr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[svs, right_mat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_135": {
                "variable": {
                    "value": "left_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lr,r->lr",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_mat, svs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_143": {
                "variable": {
                    "value": "left_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "f'{left_part + bond_char}->{left_str}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_146": {
                "variable": {
                    "value": "right_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "f'{bond_char + right_part}->{right_str}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[right_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty(num_images, dtype=np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "ndarray": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "ndarray": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "ndarray": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "copy_svs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "copy_left",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[left_mat.size(0), max_D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "copy_right",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_D, right_mat.size(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_235": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}