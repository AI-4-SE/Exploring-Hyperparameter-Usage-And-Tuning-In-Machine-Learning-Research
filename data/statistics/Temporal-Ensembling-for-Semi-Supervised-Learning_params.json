{
    "pi_model.py": {
        "tensorflow": {
            "concat_29": {
                "variable": {
                    "value": "current_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z_labeled, z_unlabeled]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2D_182": {
                "variable": {
                    "value": "self._pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_184": {
                "variable": {
                    "value": "self._dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2D_204": {
                "variable": {
                    "value": "self._pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "variable": {
                    "value": "self._dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_300": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__aditive_gaussian_noise(input, 0.15)",
                            "Call"
                        ],
                        [
                            "self.__apply_image_augmentation(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self._conv1a(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv1b(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv1c(h, training)",
                            "Call"
                        ],
                        [
                            "self._pool1(h)",
                            "Call"
                        ],
                        [
                            "self._dropout1(h, training=training)",
                            "Call"
                        ],
                        [
                            "self._conv2a(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv2b(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv2c(h, training)",
                            "Call"
                        ],
                        [
                            "self._pool2(h)",
                            "Call"
                        ],
                        [
                            "self._dropout2(h, training=training)",
                            "Call"
                        ],
                        [
                            "self._conv3a(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv3b(h, training)",
                            "Call"
                        ],
                        [
                            "self._conv3c(h, training)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, reduction_indices=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_81": {
                "onehot_labels": {
                    "value": "y_train_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "z_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_train_labeled)",
                            "Call"
                        ],
                        [
                            "pi_model(X_train_labeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_31": {
                "onehot_labels": {
                    "value": "y_train_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ],
                        [
                            "y_train_labeled",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "z_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_train_labeled)",
                            "Call"
                        ],
                        [
                            "pi_model(X_train_labeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_33": {
                "y_true": {
                    "value": "ensembling_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensembling_targets",
                            "Method Argument"
                        ],
                        [
                            "ensembling_targets",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "current_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([z_labeled, z_unlabeled], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_83": {
                "y_true": {
                    "value": "z_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_train_labeled)",
                            "Call"
                        ],
                        [
                            "pi_model(X_train_labeled)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "z_labeled_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_model(X_train_labeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_84": {
                "y_true": {
                    "value": "z_unlabeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_train_unlabeled)",
                            "Call"
                        ],
                        [
                            "pi_model(X_train_unlabeled)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "z_unlabeled_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi_model(X_train_unlabeled)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_165": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_167": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_173": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_177": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_179": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_189": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_193": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_201": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_211": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_217": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_221": {
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_223": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_229": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_244": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_263": {
                "value": {
                    "value": "image.numpy().shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "svnh_loader.py": {
        "tensorflow": {
            "TFRecordWriter_139": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Example_153": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[32])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[32])), 'depth': tf.train.Feature(int64_list=tf.train.Int64List(value=[3])), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[current_label])), 'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'image_index': tf.train.Feature(int64_list=tf.train.Int64List(value=[index]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_153": {
                "feature": {
                    "value": "{'height': tf.train.Feature(int64_list=tf.train.Int64List(value=[32])), 'width': tf.train.Feature(int64_list=tf.train.Int64List(value=[32])), 'depth': tf.train.Feature(int64_list=tf.train.Int64List(value=[3])), 'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[current_label])), 'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'image_index': tf.train.Feature(int64_list=tf.train.Int64List(value=[index]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_154": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[32])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_155": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[32])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_156": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_157": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[current_label])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_158": {
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_159": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_154": {
                "value": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_155": {
                "value": {
                    "value": "[32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_156": {
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_157": {
                "value": {
                    "value": "[current_label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_158": {
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_159": {
                "value": {
                    "value": "[index]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tfrecord_loader.py": {
        "tensorflow": {
            "TFRecordDataset_67": {
                "variable": {
                    "value": "labeled_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[self._labeled_tfrecord_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_82": {
                "variable": {
                    "value": "unlabeled_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[self._unlabeled_tfrecord_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_96": {
                "variable": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[self._validation_tfrecord_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_104": {
                "variable": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[self._test_tfrecord_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_62": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': tf.FixedLenFeature([self._image_size[0] * self._image_size[1] * self._image_size[2]], tf.float32), 'label': tf.FixedLenFeature([], tf.int64), 'image_index': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed_features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self._image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_64": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(parsed_features['label'], tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_57": {
                "shape": {
                    "value": "[self._image_size[0] * self._image_size[1] * self._image_size[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_59": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "parsed_features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "parsed_features['image_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_pi_model.py": {
        "tensorflow": {
            "enable_eager_execution_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "max_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(max_learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(initial_beta1)",
                            "Call"
                        ]
                    ]
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_55": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_56": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_logs_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./logs/PiModel'",
                            "str"
                        ]
                    ]
                }
            },
            "Checkpoint_138": {
                "variable": {
                    "value": "root",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate, beta1=beta_1, beta2=0.99)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PiModel()",
                            "Call"
                        ]
                    ]
                },
                "optimizer_step": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Accuracy_145": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_74": {
                "variable": {
                    "value": "epoch_loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_75": {
                "variable": {
                    "value": "epoch_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_76": {
                "variable": {
                    "value": "epoch_loss_avg_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_77": {
                "variable": {
                    "value": "epoch_accuracy_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Checkpoint_114": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate, beta1=beta_1, beta2=0.99)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PiModel()",
                            "Call"
                        ]
                    ]
                },
                "optimizer_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_141": {
                "checkpoint_dir": {
                    "value": "checkpoint_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/PiModel'",
                            "str"
                        ]
                    ]
                }
            },
            "scalar_121": {
                "name": {
                    "value": "Train Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_loss_avg.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_122": {
                "name": {
                    "value": "Train Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_124": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_loss_avg_val.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_126": {
                "name": {
                    "value": "Validation Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_accuracy_val.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_128": {
                "name": {
                    "value": "Unsupervised Weight",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "unsupervised_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "max_unsupervised_weight * rampup_value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_130": {
                "name": {
                    "value": "Learning Rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_131": {
                "name": {
                    "value": "Ramp Up Function",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rampup_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_up_function(epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_132": {
                "name": {
                    "value": "Ramp Down Function",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rampdown_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_down_function(epoch, epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_149": {
                "input": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "y_labeled_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labeled_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_95": {
                "onehot_labels": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validation_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_val_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_val, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_98": {
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validation_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_temporal_ensembling_model.py": {
        "tensorflow": {
            "enable_eager_execution_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "max_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(max_learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfe.Variable(initial_beta1)",
                            "Call"
                        ]
                    ]
                },
                "beta2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_68": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_69": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_logs_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./logs/TemporalEnsemblingModel'",
                            "str"
                        ]
                    ]
                }
            },
            "Checkpoint_182": {
                "variable": {
                    "value": "root",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate, beta1=beta_1, beta2=0.98)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PiModel()",
                            "Call"
                        ]
                    ]
                },
                "optimizer_step": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Accuracy_189": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_95": {
                "variable": {
                    "value": "epoch_loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_96": {
                "variable": {
                    "value": "epoch_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_97": {
                "variable": {
                    "value": "epoch_loss_avg_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_98": {
                "variable": {
                    "value": "epoch_accuracy_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Checkpoint_155": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate, beta1=beta_1, beta2=0.98)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PiModel()",
                            "Call"
                        ]
                    ]
                },
                "optimizer_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_185": {
                "checkpoint_dir": {
                    "value": "checkpoint_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/TemporalEnsemblingModel'",
                            "str"
                        ]
                    ]
                }
            },
            "scalar_162": {
                "name": {
                    "value": "Train Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_loss_avg.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_163": {
                "name": {
                    "value": "Train Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_accuracy.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_loss_avg_val.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_167": {
                "name": {
                    "value": "Z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.convert_to_tensor(Z)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_169": {
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.convert_to_tensor(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_171": {
                "name": {
                    "value": "Validation Accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epoch_accuracy_val.result()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_173": {
                "name": {
                    "value": "Unsupervised Weight",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "unsupervised_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "max_unsupervised_weight * rampup_value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_175": {
                "name": {
                    "value": "Learning Rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_176": {
                "name": {
                    "value": "Ramp Up Function",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rampup_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_up_function(epoch, 40)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_177": {
                "name": {
                    "value": "Ramp Down Function",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rampdown_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_down_function(epoch, epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_193": {
                "input": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "input": {
                    "value": "model(X_labeled_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "input": {
                    "value": "y_labeled_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labeled_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "input": {
                    "value": "y_labeled_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labeled_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_168": {
                "value": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((NUM_TRAIN_SAMPLES, 10))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_170": {
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((NUM_TRAIN_SAMPLES, 10))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_136": {
                "onehot_labels": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validation_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_val_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X_val, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_139": {
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validation_iterator.get_next()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "weight_norm_layers/Conv2D.py": {
        "tensorflow": {
            "InputSpec_133": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "self.rank + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_139": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InputSpec_183": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndim": {
                    "value": "self.rank + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: input_dim}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "TensorShape_248": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs_4d, outputs_shape)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bias_add_241": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs_4d, outputs_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_260": {
                "dims": {
                    "value": "[input_shape[0]] + new_space + [self.filters]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_273": {
                "dims": {
                    "value": "[input_shape[0], self.filters] + new_space",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "tensor": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_198": {
                "x": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.filters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bias_add_223": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs_4d, outputs_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "outputs_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convolution_op(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(outputs_4d, outputs_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[outputs_shape[0], outputs_shape[1], outputs_shape[2] * outputs_shape[3], outputs_shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_237": {
                "variable": {
                    "value": "outputs_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(outputs, [outputs_shape[0], outputs_shape[1], outputs_shape[2] * outputs_shape[3], outputs_shape[4]])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs_4d, self.bias, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(outputs, [outputs_shape[0], outputs_shape[1], outputs_shape[2] * outputs_shape[3], outputs_shape[4]])",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs_4d, self.bias, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "outputs_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_162": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "weight_norm_layers/Dense.py": {
        "tensorflow": {
            "InputSpec_131": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_137": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InputSpec_141": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: input_shape[-1].value}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "convert_to_tensor_182": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, self.V)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_223": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, self.V)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scaler, [1, self.units]) * inputs",
                            "BinOp"
                        ],
                        [
                            "standard_ops.tensordot(inputs, self.kernel, [[len(shape) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "gen_math_ops.mat_mul(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bias_add_217": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(scaler, [1, self.units]) * inputs",
                            "BinOp"
                        ],
                        [
                            "standard_ops.tensordot(inputs, self.kernel, [[len(shape) - 1], [0]])",
                            "Call"
                        ],
                        [
                            "gen_math_ops.mat_mul(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "outputs - self.batch_norm_running_average",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, self.bias)",
                            "Call"
                        ],
                        [
                            "outputs - mean",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_192": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(inputs, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, self.V)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[len(shape) - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(self.V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g / tf.sqrt(tf.reduce_sum(tf.square(self.V), [0]))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, self.units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_157": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "tf.square(self.V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "executing_eagerly_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_187": {
                "x": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}