{
    "habitat/core/simulator.py": {
        "torch": {}
    },
    "habitat/core/vector_env.py": {
        "torch": {}
    },
    "habitat/sims/habitat_simulator/habitat_simulator.py": {
        "torch": {}
    },
    "habitat_baselines/agents/ppo_agents.py": {
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "self.test_recurrent_hidden_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.actor_critic.net.num_recurrent_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "self.not_done_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "self.prev_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "config.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_69": {
                "type": {
                    "value": "'cuda:{}'.format(config.PTH_GPU_ID)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_71": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/agents/slam_agents.py": {
        "torch": {
            "zeros_235": {
                "variable": {
                    "value": "self.planned2Dpath",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_284": {
                "variable": {
                    "value": "self.map2DObstacles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.map2DObstacles",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "variable": {
                    "value": "self.offset_to_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "observation[GOAL_SENSOR_UUID]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.planned2Dpath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_464": {
                "variable": {
                    "value": "start_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.map2DObstacles",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_468": {
                "variable": {
                    "value": "goal_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.map2DObstacles",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_174": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_292": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.map_size_in_cells()",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.map_size_in_cells()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "data": {
                    "value": "[[self.pose6D[0, 0, 0], self.pose6D[0, 0, 2]], [self.pose6D[0, 2, 0], self.pose6D[0, 2, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_388": {
                "tensors": {
                    "value": "[dist.view(1, 1), torch.sin(angle).view(1, 1), torch.cos(angle).view(1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_452": {
                "input": {
                    "value": "map1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rawmap / float(self.obstacle_th)) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(map1, min=0, max=1.0) - start_map - F.max_pool2d(goal_map, 3, stride=1, padding=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_531": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_240": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_450": {
                "input": {
                    "value": "goal_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.map2DObstacles).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_391": {
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_direction(self.pose6D.squeeze(), self.waypointPose6D.squeeze(), 0, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_392": {
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_direction(self.pose6D.squeeze(), self.waypointPose6D.squeeze(), 0, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_448": {
                "input": {
                    "value": "map1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rawmap / float(self.obstacle_th)) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(map1, min=0, max=1.0) - start_map - F.max_pool2d(goal_map, 3, stride=1, padding=1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "self.position_history[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "ndarray": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.depth_denorm * habitat_observation['depth']",
                            "BinOp"
                        ],
                        [
                            "ResizePIL2(self.monodepth.compute_depth(PIL.Image.fromarray(rgb).resize((320, 320))), 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "trajectory_history[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/common/base_il_trainer.py": {
        "torch": {
            "save_94": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.config.CHECKPOINT_FOLDER, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/common/base_trainer.py": {
        "torch": {
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_109": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.TORCH_GPU_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_111": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/common/obs_transformers.py": {
        "torch": {
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_380": {
                "variable": {
                    "value": "proj_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mapx, mapy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_390": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(self.img_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(self.img_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_395": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u + 0.5 - self.img_w / 2",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "unproj_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_400": {
                "variable": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "unproj_pts.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_430": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u + 0.5 - self.img_w / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(x, self.f, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_431": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x + z * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_432": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v + 0.5 - self.img_h / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(x * x + z * z)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_437": {
                "variable": {
                    "value": "proj_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mapx, mapy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_440": {
                "variable": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "proj_pts.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_449": {
                "variable": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "unproj_pts.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_461": {
                "variable": {
                    "value": "(phi, theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(img_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(img_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_470": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(theta + 0.5) * 2 * np.pi / img_w - np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_471": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(theta + 0.5) * 2 * np.pi / img_w - np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_472": {
                "variable": {
                    "value": "sin_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(phi + 0.5) * np.pi / img_h - np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_473": {
                "variable": {
                    "value": "cos_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(phi + 0.5) * np.pi / img_h - np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_533": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 + y2 + z2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_535": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 + y2 + zxi * zxi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_545": {
                "variable": {
                    "value": "proj_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mapx, mapy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_565": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(self.img_h), torch.arange(self.img_w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_665": {
                "variable": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(grids, dim=0)",
                            "Call"
                        ],
                        [
                            "self._generate_grid_one_output(output_model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_673": {
                "variable": {
                    "value": "multi_output_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "multi_output_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(multi_output_grids, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_683": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_transform(batch)",
                            "Call"
                        ],
                        [
                            "batch * self.input_zfactor.repeat(input_b, 1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "self._grids_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_767": {
                "variable": {
                    "value": "z_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_factors)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_925": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "rotated_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts.view((-1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.R.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_336": {
                "variable": {
                    "value": "rotated_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts.view((-1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_398": {
                "input": {
                    "value": "unproj_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x, y, z], dim=-1)",
                            "Call"
                        ],
                        [
                            "unproj_pts / torch.norm(unproj_pts, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.camcoord2worldcoord(unproj_pts)",
                            "Call"
                        ],
                        [
                            "self.angle2sphere(theta_map, phi_map)",
                            "Call"
                        ],
                        [
                            "self.camcoord2worldcoord(unproj_pts)",
                            "Call"
                        ],
                        [
                            "k.unsqueeze(-1) * torch.stack([mx, my, mz], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "self.camcoord2worldcoord(unproj_pts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_474": {
                "tensors": {
                    "value": "[cos_phi * sin_theta, sin_phi, cos_phi * cos_theta]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_824": {
                "data": {
                    "value": "[[-1, 0, 0], [0, 1, 0], [0, 0, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_825": {
                "data": {
                    "value": "[[1, 0, 0], [0, 0, 1], [0, -1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "data": {
                    "value": "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "data": {
                    "value": "[[0, 0, -1], [0, 1, 0], [1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "data": {
                    "value": "[[0, 0, 1], [0, 1, 0], [-1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_829": {
                "data": {
                    "value": "[[1, 0, 0], [0, 0, -1], [0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_944": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sensor_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[observations[sensor] for sensor in in_sensor_uuids]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_945": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sensor_obs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(imgs, end_dim=1)",
                            "Call"
                        ],
                        [
                            "imgs.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "imgs.float()",
                            "Call"
                        ]
                    ]
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_294": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_371": {
                "input": {
                    "value": "world_pts[..., 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_391": {
                "start": {
                    "value": "self.img_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_461": {
                "start": {
                    "value": "img_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_576": {
                "input": {
                    "value": "mz2 + (1 - xi * xi) * r2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_581": {
                "tensors": {
                    "value": "[mx, my, mz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_763": {
                "variable": {
                    "value": "all_one",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, cam.img_h, cam.img_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_383": {
                "input": {
                    "value": "proj_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([mapx, mapy], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mapx, mapy], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.stack([mapx, mapy], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_383": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_566": {
                "start": {
                    "value": "self.img_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_572": {
                "input": {
                    "value": "1 - (2 * alpha - 1) * r2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/common/rollout_storage.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "self.buffers[recurrent_hidden_states]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_recurrent_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "recurrent_hidden_state_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "self.buffers[rewards]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "self.buffers[value_preds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "self.buffers[returns]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "self.buffers[action_log_probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "self.buffers[actions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*action_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "self.buffers[prev_actions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*action_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "self.buffers[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "numsteps + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_95": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_not_225": {
                "variable": {
                    "value": "dones_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.buffers['masks']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "self.buffers[observations][sensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((numsteps + 1, num_envs, *observation_space.spaces[sensor].shape), dtype=observation_space.spaces[sensor].dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_230": {
                "n": {
                    "value": "num_environments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.buffers['returns'].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_230": {
                "input": {
                    "value": "num_mini_batch",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/common/tensor_dict.py": {
        "torch": {
            "from_numpy_342": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls._to_instance(v)",
                            "Call"
                        ],
                        [
                            "value[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_344": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls._to_instance(v)",
                            "Call"
                        ],
                        [
                            "value[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/common/tensorboard_utils.py": {
        "torch": {
            "cat_82": {
                "variable": {
                    "value": "video_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(frame_tensors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_43": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "comment": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "np_arr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/il/data/data.py": {
        "torch": {}
    },
    "habitat_baselines/il/data/eqa_cnn_pretrain_data.py": {
        "torch": {}
    },
    "habitat_baselines/il/data/nav_data.py": {
        "torch": {
            "from_numpy_236": {
                "variable": {
                    "value": "controller_img_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "raw_img_feats[target_pos_idx].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "planner_img_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "raw_img_feats[pq_idx_pruned].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_244": {
                "variable": {
                    "value": "planner_actions_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pa_pruned[:-1]) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_440": {
                "variable": {
                    "value": "self.frame_queue",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_285": {
                "variable": {
                    "value": "ep.actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_292": {
                "variable": {
                    "value": "ep.planner_actions[:len(planner_actions)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_295": {
                "variable": {
                    "value": "ep.controller_actions[:len(controller_actions)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_305": {
                "variable": {
                    "value": "ep.planner_hidden_idx[:len(controller_actions)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/il/metrics.py": {
        "torch": {}
    },
    "habitat_baselines/il/models/models.py": {
        "torch": {
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv_block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 8, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv_block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(8, 16, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.conv_block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 32, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv_block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 512, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.encoder_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.encoder_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.encoder_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.score_pool2_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.score_pool3_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.score_pool2_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.score_pool3_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.score_pool2_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.score_pool3_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_156": {
                "variable": {
                    "value": "score_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_seg(encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool3_seg.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "score_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_seg, score_pool3_seg.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_seg + score_pool2_seg",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_seg, score_pool2_seg.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool2_seg.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_170": {
                "variable": {
                    "value": "out_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_seg, score_pool3_seg.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_seg + score_pool2_seg",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_seg, score_pool2_seg.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "score_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_depth(encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool3_depth.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "variable": {
                    "value": "score_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_depth, score_pool3_depth.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_depth + score_pool2_depth",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_depth, score_pool2_depth.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool2_depth.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "out_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(score_depth, x.size()[2:], mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "score_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output_ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_ae(encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool3_ae.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "score_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_ae, score_pool3_ae.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_ae + score_pool2_ae",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_ae, score_pool2_ae.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "score_pool2_ae.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_208": {
                "variable": {
                    "value": "out_ae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.interpolate(score_ae, x.size()[2:], mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_233": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(token_to_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_234": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wordvec_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.cnn_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32 * 12 * 12, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.img_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.ques_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "ques_img_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ques_feats_tr, img_feats_tr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "variable": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feats.view(N, T)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_349": {
                "variable": {
                    "value": "att_img_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_probs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_probs.view(N, T, 1).repeat(1, 1, 64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "img_feats.view(N, T, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "att_img_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_img_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(att_probs2, img_feats.view(N, T, 64))",
                            "Call"
                        ],
                        [
                            "torch.sum(att_img_feats, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_352": {
                "variable": {
                    "value": "mul_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_rnn(questions)",
                            "Call"
                        ],
                        [
                            "self.q_rnn(questions)",
                            "Call"
                        ],
                        [
                            "self.ques_tr(ques_feats)",
                            "Call"
                        ],
                        [
                            "self.q_rnn(questions)",
                            "Call"
                        ],
                        [
                            "self.ques_tr(ques_feats)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "att_img_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(att_probs2, img_feats.view(N, T, 64))",
                            "Call"
                        ],
                        [
                            "torch.sum(att_img_feats, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_364": {
                "variable": {
                    "value": "logprob_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_365": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprob_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(inp, 1, target.long())",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_389": {
                "variable": {
                    "value": "self.cnn_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32 * 12 * 12, planner_rnn_image_feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "variable": {
                    "value": "self.ques_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(question_hidden_dim, question_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "controller_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[controller_img_feats, controller_actions_embed, controller_hidden_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "controller_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feats, actions_embed, hidden_in]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_616": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_671": {
                "variable": {
                    "value": "packed_input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_feats",
                            "Name"
                        ],
                        [
                            "question_feats",
                            "Name"
                        ],
                        [
                            "torch.cat([input_feats, question_feats], 2)",
                            "Call"
                        ],
                        [
                            "self.action_embed(actions_in)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_feats, self.action_embed(actions_in.long())], 2)",
                            "Call"
                        ],
                        [
                            "img_feats",
                            "Name"
                        ],
                        [
                            "question_feats",
                            "Name"
                        ],
                        [
                            "torch.cat([input_feats, question_feats], 2)",
                            "Call"
                        ],
                        [
                            "self.action_embed(actions_in)",
                            "Call"
                        ],
                        [
                            "torch.cat([input_feats, self.action_embed(actions_in)], 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "action_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_675": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_595": {
                "variable": {
                    "value": "self.action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "action_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ],
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "input": {
                    "value": "score_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_depth, score_pool3_depth.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_depth + score_pool2_depth",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_depth, score_pool2_depth.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_209": {
                "input": {
                    "value": "score_ae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(encoder_output_ae, score_pool3_ae.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "score_ae + score_pool2_ae",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(score_ae, score_pool2_ae.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "32 * 12 * 12",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_291": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_303": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_305": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_318": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "in_features": {
                    "value": "32 * 12 * 12",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "planner_rnn_image_feat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_392": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "in_features": {
                    "value": "question_hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "question_hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_406": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_661": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_feats, question_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_feats, self.action_embed(actions_in.long())]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_feats, question_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_716": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_feats, self.action_embed(actions_in)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_34": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_366": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(logprob_select, mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/il/trainers/eqa_cnn_pretrain_trainer.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eqa_cnn_pretrain_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EQACNNPretrainDataset(config)",
                            "Call"
                        ],
                        [
                            "EQACNNPretrainDataset(config, mode='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.IL.EQACNNPretrain.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.IL.EQACNNPretrain.lr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_111": {
                "variable": {
                    "value": "depth_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_112": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eqa_cnn_pretrain_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EQACNNPretrainDataset(config)",
                            "Call"
                        ],
                        [
                            "EQACNNPretrainDataset(config, mode='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.IL.EQACNNPretrain.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_216": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_221": {
                "variable": {
                    "value": "depth_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_222": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_223": {
                "variable": {
                    "value": "seg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.TORCH_GPU_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/il/trainers/pacman_trainer.py": {
        "torch": {
            "DataLoader_150": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "nav_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NavDataset(config, env, self.device).shuffle(1000).decode('rgb')",
                            "Call"
                        ],
                        [
                            "nav_dataset.map(nav_dataset.map_dataset_sample)",
                            "Call"
                        ],
                        [
                            "NavDataset(config, env, self.device).decode('rgb')",
                            "Call"
                        ],
                        [
                            "nav_dataset.map(nav_dataset.map_dataset_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.IL.NAV.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.IL.NAV.lr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_367": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "nav_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NavDataset(config, env, self.device).shuffle(1000).decode('rgb')",
                            "Call"
                        ],
                        [
                            "nav_dataset.map(nav_dataset.map_dataset_sample)",
                            "Call"
                        ],
                        [
                            "NavDataset(config, env, self.device).decode('rgb')",
                            "Call"
                        ],
                        [
                            "nav_dataset.map(nav_dataset.map_dataset_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_378": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.TORCH_GPU_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_249": {
                "variable": {
                    "value": "planner_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "planner_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_250": {
                "variable": {
                    "value": "controller_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "controller_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.controller_step(img_feat, controller_action_in, planner_hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_517": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "controller_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.controller_step(img_feat, controller_action_in, planner_hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_556": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "planner_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/il/trainers/vqa_trainer.py": {
        "torch": {
            "DataLoader_131": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vqa_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EQADataset(config, input_type='vqa', num_frames=config.IL.VQA.num_frames).shuffle(1000).to_tuple('episode_id', 'question', 'answer', *['{0:0=3d}.jpg'.format(x) for x in range(0, 5)]).map(img_bytes_2_np_array)",
                            "Call"
                        ],
                        [
                            "EQADataset(config, input_type='vqa', num_frames=config.IL.VQA.num_frames).shuffle(1000).to_tuple('episode_id', 'question', 'answer', *['{0:0=3d}.jpg'.format(x) for x in range(0, 5)]).map(img_bytes_2_np_array)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.IL.VQA.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_148": {
                "variable": {
                    "value": "lossFn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.IL.VQA.lr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "vqa_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EQADataset(config, input_type='vqa', num_frames=config.IL.VQA.num_frames).shuffle(1000).to_tuple('episode_id', 'question', 'answer', *['{0:0=3d}.jpg'.format(x) for x in range(0, 5)]).map(img_bytes_2_np_array)",
                            "Call"
                        ],
                        [
                            "EQADataset(config, input_type='vqa', num_frames=config.IL.VQA.num_frames).shuffle(1000).to_tuple('episode_id', 'question', 'answer', *['{0:0=3d}.jpg'.format(x) for x in range(0, 5)]).map(img_bytes_2_np_array)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.IL.VQA.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_320": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_325": {
                "variable": {
                    "value": "lossFn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_37": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.TORCH_GPU_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ddppo/algo/ddppo.py": {
        "torch": {
            "is_initialized_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_106": {
                "variable": {
                    "value": "self.ddp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[device]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "find_unused_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_113": {
                "variable": {
                    "value": "self.ddp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "find_unused_params",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ddppo/ddp_utils.py": {
        "torch": {
            "TCPStore_277": {
                "variable": {
                    "value": "tcp_store",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "my_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_455": {
                "variable": {
                    "value": "encoded_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.frombuffer(buf.getbuffer(), dtype=np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume_state_filename(filename_or_config, filename_key)",
                            "Call"
                        ],
                        [
                            "filename_or_config",
                            "Name"
                        ],
                        [
                            "resume_state_filename(filename_or_config, filename_key)",
                            "Call"
                        ],
                        [
                            "filename_or_config",
                            "Name"
                        ]
                    ]
                }
            },
            "load_199": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume_state_filename(filename_or_config, filename_key)",
                            "Call"
                        ],
                        [
                            "filename_or_config",
                            "Name"
                        ],
                        [
                            "resume_state_filename(filename_or_config, filename_key)",
                            "Call"
                        ],
                        [
                            "filename_or_config",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_initialized_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_369": {
                "input": {
                    "value": "sizes == max_size",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_initialized_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_379": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t]",
                            "List"
                        ],
                        [
                            "list(torch.empty((world_size, max_size), dtype=t.dtype, device=t.device).unbind(0))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[output[_rank_to_relative_rank(i, output_rank, world_size)] for i in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "gatherv(encoded_obj, output_rank=output_rank)",
                            "Call"
                        ],
                        [
                            "[pickle.loads(bytes(t.cpu())) for t in output]",
                            "ListComp"
                        ]
                    ]
                },
                "index": {
                    "value": "output_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_450": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_initialized_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_372": {
                "*size": {
                    "value": "(world_size, max_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_372": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_395": {
                "*size": {
                    "value": "(sizes[(src_real + i) % world_size],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ddppo/policy/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(inplanes, planes, stride, groups=cardinality)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "conv1x1(inplanes, planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_95": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.excite",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(planes, int(planes / r))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, base_planes, kernel_size=7, stride=2, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_219": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_82": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_85": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_88": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes * expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GroupNorm_53": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_56": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(planes / r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "int(planes / r)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_planes * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_216": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "base_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_planes * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_217": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_252": {
                "num_groups": {
                    "value": "ngroups",
                    "type": "variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ddppo/policy/resnet_policy.py": {
        "torch": {
            "cat_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(cnn_input, dim=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.running_mean_and_var(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.compression(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_537": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(cnn_input, dim=1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.running_mean_and_var(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.compression(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.running_mean_and_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.compression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.backbone.final_channels, num_compression_channels, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_246": {
                "variable": {
                    "value": "self.prev_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "action_space.n + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self._n_prev_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.prev_action_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_num_actions(action_space)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._n_prev_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.tgt_embeding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_input_goal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.spaces[IntegratedPointGoalGPSAndCompassSensor.cls_uuid].shape[0] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_302": {
                "variable": {
                    "value": "self.obj_categories_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self._n_object_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.gps_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_gps_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.spaces[EpisodicGPSSensor.cls_uuid].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.pointgoal_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_pointgoal_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.spaces[PointGoalSensor.cls_uuid].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.heading_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_heading_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.spaces[HeadingSensor.cls_uuid].shape[0] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.proximity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_proximity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_space.spaces[ProximitySensor.cls_uuid].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "variable": {
                    "value": "self.compass_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_compass_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.goal_visual_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.visual_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_437": {
                "variable": {
                    "value": "fuse_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[observations[k] for k in self._fuse_keys_1d]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_488": {
                "variable": {
                    "value": "sensor_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(sensor_observations[0]), torch.sin(sensor_observations[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_502": {
                "variable": {
                    "value": "compass_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cos(observations[EpisodicCompassSensor.cls_uuid]), torch.sin(observations[EpisodicCompassSensor.cls_uuid])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_525": {
                "variable": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_actions.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.prev_action_embedding(torch.where(masks.view(-1), prev_actions + 1, start_token))",
                            "Call"
                        ],
                        [
                            "self.prev_action_embedding(masks * prev_actions.float())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_449": {
                "variable": {
                    "value": "goal_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[goal_observations[:, 0], torch.cos(-goal_observations[:, 1]), torch.sin(-goal_observations[:, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_461": {
                "variable": {
                    "value": "vertical_angle_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "goal_observations[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_464": {
                "variable": {
                    "value": "goal_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[goal_observations[:, 0], torch.cos(-goal_observations[:, 1]) * vertical_angle_sin, torch.sin(-goal_observations[:, 1]) * vertical_angle_sin, torch.cos(goal_observations[:, 2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "self.backbone.final_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_compression_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(after_compression_flat_size / (final_spatial_h * final_spatial_w)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_168": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_compression_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(after_compression_flat_size / (final_spatial_h * final_spatial_w)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_361": {
                "in_features": {
                    "value": "np.prod(self.goal_visual_encoder.output_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_393": {
                "in_features": {
                    "value": "np.prod(self.visual_encoder.output_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_396": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_528": {
                "condition": {
                    "value": "masks.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "prev_actions + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "start_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(prev_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_490": {
                "input": {
                    "value": "sensor_observations[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_491": {
                "input": {
                    "value": "sensor_observations[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_504": {
                "input": {
                    "value": "observations[EpisodicCompassSensor.cls_uuid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_505": {
                "input": {
                    "value": "observations[EpisodicCompassSensor.cls_uuid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_452": {
                "input": {
                    "value": "-goal_observations[:, 1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_453": {
                "input": {
                    "value": "-goal_observations[:, 1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_471": {
                "input": {
                    "value": "goal_observations[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_467": {
                "input": {
                    "value": "-goal_observations[:, 1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_469": {
                "input": {
                    "value": "-goal_observations[:, 1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ddppo/policy/running_mean_and_var.py": {
        "torch": {
            "rsqrt_72": {
                "variable": {
                    "value": "inv_stdev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(self._var, torch.full_like(self._var, 0.01))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_36": {
                "variable": {
                    "value": "new_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_78": {
                "input": {
                    "value": "-self._mean * inv_stdev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "inv_stdev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rsqrt(torch.max(self._var, torch.full_like(self._var, 0.01)))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_73": {
                "input": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/hierarchical_policy.py": {
        "torch": {
            "zeros_126": {
                "variable": {
                    "value": "batched_bad_should_terminate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "use_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_actions.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "hl_terminate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "use_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev_actions.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "get_num_actions(self._action_space)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_167": {
                "input": {
                    "value": "self._call_high_level",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_205": {
                "input": {
                    "value": "should_terminate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_bad_should_terminate | hl_terminate",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/high_level_policy.py": {
        "torch": {
            "zeros_35": {
                "variable": {
                    "value": "self._next_sol_idxs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "next_skill",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "immediate_end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/art_obj.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "self._did_leave_start_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_47": {
                "variable": {
                    "value": "self._did_leave_start_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._did_leave_start_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "did_leave_start_zone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(cur_resting_pos - self._episode_start_resting_pos, dim=-1) > self._config.START_ZONE_RADIUS",
                            "Compare"
                        ]
                    ]
                }
            },
            "norm_51": {
                "variable": {
                    "value": "cur_resting_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "observations[RelativeRestingPositionSensor.cls_uuid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_42": {
                "input": {
                    "value": "cur_resting_pos - self._episode_start_resting_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/nav.py": {
        "torch": {
            "abs_74": {
                "input": {
                    "value": "lin_vel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_75": {
                "input": {
                    "value": "ang_vel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/nn_skill.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "full_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prev_actions.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.LOAD_CKPT_FILE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/oracle_nav.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "self._is_at_targ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "full_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prev_actions.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_180": {
                "variable": {
                    "value": "dist_to_final_nav_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(final_nav_goal - robot_pos)[[0, 2]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "full_action[i, self._ac_start:self._ac_start + self._ac_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 0]",
                            "List"
                        ],
                        [
                            "compute_turn(rel_obj_angle, rel_pos)",
                            "Call"
                        ],
                        [
                            "[for_vel, 0]",
                            "List"
                        ],
                        [
                            "compute_turn(rel_angle, rel_targ)",
                            "Call"
                        ],
                        [
                            "[0, -turn_vel]",
                            "List"
                        ],
                        [
                            "[0, turn_vel]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/pick.py": {
        "torch": {
            "norm_20": {
                "variable": {
                    "value": "rel_resting_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "observations[RelativeRestingPositionSensor.cls_uuid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_34": {
                "input": {
                    "value": "is_holding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observations[IsHoldingSensor.cls_uuid].view(-1)",
                            "Call"
                        ],
                        [
                            "observations[IsHoldingSensor.cls_uuid].view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/place.py": {
        "torch": {
            "norm_38": {
                "variable": {
                    "value": "rel_resting_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "observations[RelativeRestingPositionSensor.cls_uuid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_24": {
                "input": {
                    "value": "is_not_holding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - observations[IsHoldingSensor.cls_uuid].view(-1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/reset.py": {
        "torch": {
            "zeros_like_82": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "action[..., self._ac_start:self._ac_start + 7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._target - current_joint_pos",
                            "BinOp"
                        ],
                        [
                            "delta / np.maximum(self._initial_delta.max(-1, keepdims=True), 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "as_tensor_55": {
                "data": {
                    "value": "np.abs(current_joint_pos - self._target).max(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "rnn_hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/skill.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "self._cur_skill_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "bad_terminate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._cur_skill_step.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._cur_skill_step.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "*size": {
                    "value": "observations.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/hrl/skills/wait.py": {
        "torch": {
            "zeros_42": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prev_actions.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prev_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/models/rnn_state_encoder.py": {
        "torch": {
            "empty_like_20": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "permutation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permutation.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "PackedSequence_220": {
                "variable": {
                    "value": "x_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.index_select(0, select_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_sizes": {
                    "value": "num_seqs_at_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((max_length,), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "rnn_build_seq_info['cpu_num_seqs_at_step']",
                            "Subscript"
                        ]
                    ]
                },
                "sorted_indices": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "unsorted_indices": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_304": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks.view(1, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(masks.view(1, -1, 1), hidden_states, hidden_states.new_zeros(()))",
                            "Call"
                        ],
                        [
                            "self.pack_hidden(hidden_states)",
                            "Call"
                        ],
                        [
                            "rnn_ret[1]",
                            "Subscript"
                        ],
                        [
                            "self.pack_hidden(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "hidden_states.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hidden_states.new_zeros(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_383": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "chunk_399": {
                "variable": {
                    "value": "lstm_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states.contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_414": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "permutation.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "permutation.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_232": {
                "input": {
                    "value": "not_dones.view(1, -1, 1).index_select(1, sequence_starts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(masks.view(1, -1, 1), hidden_states, hidden_states.new_zeros(()))",
                            "Call"
                        ],
                        [
                            "self.pack_hidden(hidden_states)",
                            "Call"
                        ],
                        [
                            "rnn_ret[1]",
                            "Subscript"
                        ],
                        [
                            "self.pack_hidden(hidden_states)",
                            "Call"
                        ],
                        [
                            "hidden_states.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "hidden_states.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/models/simple_cnn.py": {
        "torch": {
            "cat_152": {
                "variable": {
                    "value": "cnn_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self._n_input_rgb + self._n_input_depth, out_channels=32, kernel_size=self._cnn_layers_kernel_size[0], stride=self._cnn_layers_stride[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self._n_input_rgb + self._n_input_depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._cnn_layers_kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._cnn_layers_stride[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._cnn_layers_kernel_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._cnn_layers_stride[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._cnn_layers_kernel_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._cnn_layers_stride[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Flatten_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "32 * cnn_dims[0] * cnn_dims[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ppo/policy.py": {
        "torch": {
            "Linear_183": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[target_encoding]",
                            "List"
                        ],
                        [
                            "[perception_embed] + x",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ppo/ppo.py": {
        "torch": {
            "clip_grad_norm__332": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.actor_critic.policy_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "var_mean_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_initialized_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rsqrt_146": {
                "input": {
                    "value": "var + EPS_PPO",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_197": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_log_probs - batch['action_log_probs']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.value_loss_coef * value_loss, action_loss]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_252": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_141": {
                "input": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rollouts.buffers['returns'] - rollouts.buffers['value_preds']",
                            "BinOp"
                        ],
                        [
                            "advantages - mean",
                            "BinOp"
                        ],
                        [
                            "self.get_advantages(rollouts)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_218": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "delta.abs() < self.clip_param",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.float()",
                            "Call"
                        ],
                        [
                            "torch.where(delta.abs() < self.clip_param, values, value_pred_clipped)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "value_pred_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['value_preds'] + delta.clamp(-self.clip_param, self.clip_param)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_201": {
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(action_log_probs - batch['action_log_probs'])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_207": {
                "input": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['advantages'] * ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_224": {
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.float()",
                            "Call"
                        ],
                        [
                            "torch.where(delta.abs() < self.clip_param, values, value_pred_clipped)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch['returns']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_299": {
                "tensors": {
                    "value": "[torch.as_tensor(v, dtype=torch.float32) for v in vs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_231": {
                "input": {
                    "value": "ver_is_coeffs * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_300": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/rl/ppo/ppo_trainer.py": {
        "torch": {
            "zeros_315": {
                "variable": {
                    "value": "self.current_episode_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.envs.num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards_l",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.current_episode_reward.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_499": {
                "variable": {
                    "value": "not_done_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[not done] for done in dones]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.current_episode_reward.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_not_504": {
                "variable": {
                    "value": "done_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_done_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[not done] for done in dones], dtype=torch.bool, device=self.current_episode_reward.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.config.NUM_ENVIRONMENTS, 1, device=self.device, dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[not done] for done in dones], dtype=torch.bool, device='cpu')",
                            "Call"
                        ],
                        [
                            "not_done_masks.to(device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_578": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.running_episode_stats[k] for k in stats_ordering]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_701": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.agent.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda x: 1 - self.percent_done()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_924": {
                "variable": {
                    "value": "current_episode_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.envs.num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_928": {
                "variable": {
                    "value": "test_recurrent_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.NUM_ENVIRONMENTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.actor_critic.num_recurrent_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ppo_cfg.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_934": {
                "variable": {
                    "value": "prev_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.NUM_ENVIRONMENTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*action_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long if discrete_actions else torch.float",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_940": {
                "variable": {
                    "value": "not_done_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.NUM_ENVIRONMENTS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "pretrained_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.config.RL.DDPPO.pretrained_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PrefixStore_226": {
                "variable": {
                    "value": "self.num_rollouts_done_store",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_254": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.TORCH_GPU_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_257": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.agent.state_dict(), 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.CHECKPOINT_FOLDER, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_351": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.agent.state_dict(), 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.config.CHECKPOINT_FOLDER, 'latest.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_367": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_k",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.current_episode_reward.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_511": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[losses[k] for k in loss_name_ordering] + [count_steps_delta]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1024": {
                "variable": {
                    "value": "not_done_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[not done] for done in dones]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_1030": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards_l",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_1030": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_225": {
                "seed": {
                    "value": "self.config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_255": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_517": {
                "variable": {
                    "value": "self.running_episode_stats[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_episode_stats['count']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "*size": {
                    "value": "self.envs.num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "*size": {
                    "value": "self.envs.num_envs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/run.py": {
        "torch": {
            "manual_seed_63": {
                "seed": {
                    "value": "config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_65": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/slambased/mappers.py": {
        "torch": {
            "linspace_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_25": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_26": {
                "variable": {
                    "value": "(xv, yv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(map_size_in_cells, map_size_in_cells)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth.device",
                            "Attribute"
                        ],
                        [
                            "pts3d.device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_50": {
                "variable": {
                    "value": "pts2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pts3d[:, 2:3], pts3d[:, 0:1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_51": {
                "variable": {
                    "value": "data_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "project2d_pcl_into_worldmap(pts2d, map_size, cell_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[(dfl * (xv.flatten() - cx) / fx).unsqueeze(-1), (dfl * (yv.flatten() - cy) / fy).unsqueeze(-1), dfl.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "init_map[u[:, 0], u[:, 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_80": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_94": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(map_size_in_cells, map_size_in_cells)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_104": {
                "input": {
                    "value": "local_3d_pcl[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_105": {
                "input": {
                    "value": "local_3d_pcl[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/slambased/monodepth.py": {
        "torch": {
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_149": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_288": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_296": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_306": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_308": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_316": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "upsample_319": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(torch.cat((x_m1, x_m2, x_m3, x_m4), 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_367": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_394": {
                "variable": {
                    "value": "x_d0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x_block4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_432": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_441": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, size=size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.conv(torch.cat((x_m1, x_m2, x_m3, x_m4), 1)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_452": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_460": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_462": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_470": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_472": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "64 + block_channel[3] // 32",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_479": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x0)",
                            "Call"
                        ],
                        [
                            "F.relu(x0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_483": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x0)",
                            "Call"
                        ],
                        [
                            "self.bn1(x1)",
                            "Call"
                        ],
                        [
                            "F.relu(x1)",
                            "Call"
                        ],
                        [
                            "int(round((w1 - tw) / 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_638": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_639": {
                "variable": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./pretrained_model/model_resnet'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_556": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_568": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_279": {
                "tensors": {
                    "value": "(x_decoder, x_mff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_564": {
                "ndarray": {
                    "value": "nppic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_570": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "tensors": {
                    "value": "(x_m1, x_m2, x_m3, x_m4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/slambased/path_planners.py": {
        "torch": {
            "round_23": {
                "input": {
                    "value": "ten[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "bx_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta * (-x).view(1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.neights2channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "self.neights2channels.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_neights_to_channels(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.preprocessNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "self.preprocessNet.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[[1e-05, 0.0001, 1e-05], [0.0001, 1, 0.0001], [1e-05, 0.0001, 1e-05]]]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_193": {
                "variable": {
                    "value": "self.been_there",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.start_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_198": {
                "variable": {
                    "value": "self.been_there",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.goal_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_201": {
                "variable": {
                    "value": "(m, goal_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.goal_map.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_332": {
                "variable": {
                    "value": "obstacles_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obstacles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sqrt(left_diff_sq + up_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 0:h, 0:w], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(left_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 0:h, 1:w + 1], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(left_diff_sq + down_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 2:h + 2, 0:w], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(up_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 0:h, 1:w + 1], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), 0 * right_diff_sq + self.ob_cost * obstacles_pd[:, :, 1:h + 1, 1:w + 1], torch.sqrt(down_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 2:h + 2, 1:w + 1], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(right_diff_sq + up_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 0:h, 2:w + 2], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(right_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 1:h + 1, 2:w + 2], obstacles_pd[:, :, 1:h + 1, 1:w + 1]), torch.sqrt(right_diff_sq + down_diff_sq + self.eps) + self.ob_cost * torch.max(obstacles_pd[:, :, 2:h + 2, 2:w + 2], obstacles_pd[:, :, 1:h + 1, 1:w + 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_470": {
                "variable": {
                    "value": "sampling_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_map",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "obstacle_cost_corrected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_74": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.gx_to_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "self.gx_to_right.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[[0, 1, -1]]]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.gx_to_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.gx_to_left.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[[-1, 1, 0]]]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.gy_to_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "self.gy_to_up.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[[0], [1], [-1]]]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.gy_to_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "self.gy_to_down.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[[-1], [1], [0]]]], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "self.start_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "input": {
                    "value": "self.inf * (torch.ones_like(self.start_map) - self.start_map.clone())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_334": {
                "variable": {
                    "value": "learned_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obstacles",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_441": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - self.been_there[:, :, ymin:ymax, xmin:xmax]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_194": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_255": {
                "variable": {
                    "value": "self.g_map[:, :, ymin:ymax, xmin:xmax]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g_map[:, :, ymin:ymax, xmin:xmax].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_261": {
                "variable": {
                    "value": "self.close_list_map[:, :, ymin:ymax, xmin:xmax]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.close_list_map[:, :, ymin:ymax, xmin:xmax]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_265": {
                "variable": {
                    "value": "self.open_list_map[:, :, ymin:ymax, xmin:xmax]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.open_list_map[:, :, ymin - 1:ymax + 1, xmin - 1:xmax + 1], 3, stride=1, padding=0) - self.close_list_map[:, :, ymin:ymax, xmin:xmax] - self.obstacles[:, :, ymin:ymax, xmin:xmax]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_278": {
                "variable": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "self.close_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.close_list_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_290": {
                "variable": {
                    "value": "self.open_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.open_list_map, 3, stride=1, padding=1) - self.close_list_map - self.obstacles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_306": {
                "variable": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_315": {
                "variable": {
                    "value": "self.close_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.close_list_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_318": {
                "variable": {
                    "value": "self.open_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.open_list_map, 3, stride=1, padding=1) - self.close_list_map - self.obstacles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_421": {
                "input": {
                    "value": "learned_bias.expand_as(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.ob_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_467": {
                "input": {
                    "value": "self.obstacles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_235": {
                "input": {
                    "value": "((self.start_coords - self.goal_coords) ** 2).sum() + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_341": {
                "input": {
                    "value": "coords[:, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_347": {
                "input": {
                    "value": "coords[:, 1:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_353": {
                "input": {
                    "value": "coords[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_359": {
                "input": {
                    "value": "coords[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_453": {
                "input": {
                    "value": "current_g_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g[:, :, ymin:ymax, xmin:xmax][mask].clone()",
                            "Call"
                        ],
                        [
                            "g[:, :, ymin:ymax, xmin:xmax][mask].clone()",
                            "Call"
                        ],
                        [
                            "current_g_cost - torch.min(current_g_cost).item()",
                            "BinOp"
                        ],
                        [
                            "current_g_cost + 0.41 * torch.randperm(len(current_g_cost), dtype=torch.float32, device=torch.device('cpu')) / len(current_g_cost)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_498": {
                "input": {
                    "value": "node_coords - out_path[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_505": {
                "input": {
                    "value": "node_coords - start_coords.cpu()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_160": {
                "input": {
                    "value": "self.start_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_167": {
                "input": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_168": {
                "input": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_169": {
                "input": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "round_170": {
                "input": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_367": {
                "input": {
                    "value": "left_diff_sq + up_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_373": {
                "input": {
                    "value": "left_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_379": {
                "input": {
                    "value": "left_diff_sq + down_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_385": {
                "input": {
                    "value": "up_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_394": {
                "input": {
                    "value": "down_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_400": {
                "input": {
                    "value": "right_diff_sq + up_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_406": {
                "input": {
                    "value": "right_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_412": {
                "input": {
                    "value": "right_diff_sq + down_diff_sq + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_369": {
                "input": {
                    "value": "obstacles_pd[:, :, 0:h, 0:w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_375": {
                "input": {
                    "value": "obstacles_pd[:, :, 0:h, 1:w + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_381": {
                "input": {
                    "value": "obstacles_pd[:, :, 2:h + 2, 0:w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_387": {
                "input": {
                    "value": "obstacles_pd[:, :, 0:h, 1:w + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_396": {
                "input": {
                    "value": "obstacles_pd[:, :, 2:h + 2, 1:w + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_402": {
                "input": {
                    "value": "obstacles_pd[:, :, 0:h, 2:w + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_408": {
                "input": {
                    "value": "obstacles_pd[:, :, 1:h + 1, 2:w + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_414": {
                "input": {
                    "value": "obstacles_pd[:, :, 2:h + 2, 2:w + 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_454": {
                "n": {
                    "value": "len(current_g_cost)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_266": {
                "input": {
                    "value": "self.open_list_map[:, :, ymin - 1:ymax + 1, xmin - 1:xmax + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_291": {
                "input": {
                    "value": "self.open_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_319": {
                "input": {
                    "value": "self.open_list_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_457": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_282": {
                "input": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_310": {
                "input": {
                    "value": "self.g_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/slambased/reprojection.py": {
        "torch": {
            "mm_74": {
                "variable": {
                    "value": "xyz_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "xyz.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "topdown2index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0 / cell_size, 0, shift], [0, 1.0 / cell_size, shift], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_local.device",
                            "Attribute"
                        ],
                        [
                            "zx.device",
                            "Attribute"
                        ],
                        [
                            "ro_phi.device",
                            "Attribute"
                        ],
                        [
                            "offset.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "world_coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zx.view(-1, 2), torch.ones((len(zx), 1), device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_88": {
                "variable": {
                    "value": "world_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topdown2index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0 / cell_size, 0, shift], [0, 1.0 / cell_size, shift], [0, 0, 1]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0 / cell_size, 0, shift], [0, 1.0 / cell_size, shift], [0, 0, 1]]).to(device)",
                            "Call"
                        ],
                        [
                            "np.array([[1.0 / cell_size, 0, shift], [0, 1.0 / cell_size, shift], [0, 0, 1]])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "world_coords_h.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_101": {
                "variable": {
                    "value": "sin_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_in_radians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_in_radians.view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_102": {
                "variable": {
                    "value": "cos_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_in_radians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_in_radians.view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_103": {
                "variable": {
                    "value": "a1x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cos_a, sin_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "a2x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin_a, cos_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a1x, a2x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_111": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2d[:, 0, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([p[:, :3, :3] / norms.expand(p.size(0), 3, 3), p[:, 3:, :3]], dim=1), p[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_129": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_diffs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_diffs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(planned_points2.unsqueeze(0), planned_tps_norm.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(path).view(-1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_157": {
                "variable": {
                    "value": "planned_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "variable": {
                    "value": "planned_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0 / cell_size, 0, 0, 0], [0, 1.0 / cell_size, 0, 0], [0, 0, 1.0 / cell_size, 0], [0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_172": {
                "variable": {
                    "value": "planned_tps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.inverse().unsqueeze(0).expand(num_pts, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "planned_tps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(4).unsqueeze(0).repeat((num_pts, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(p.inverse().unsqueeze(0).expand(num_pts, 4, 4), planned_tps)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-ro_phi[0] * torch.sin(ro_phi[1]), 0, ro_phi[0] * torch.cos(ro_phi[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_195": {
                "variable": {
                    "value": "goal_tp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_curr.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.cat([offset * torch.tensor([1.0, 1.0, 1.0], dtype=torch.float32, device=device), torch.tensor([1.0], device=device)]).reshape(4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_216": {
                "variable": {
                    "value": "goal_tp1",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "topdown_p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0, 0, 0], [0, 0, 1.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_249": {
                "variable": {
                    "value": "world_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topdown_p.view(1, 2, 4).expand(tps.size(0), 2, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tps[:, :, 3:].view(-1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "topdown2index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0 / cell_size, 0, shift], [0, 1.0 / cell_size, shift], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "world_coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[world_coords, torch.ones((len(world_coords), 1, 1)).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_26": {
                "input": {
                    "value": "get_pos_diff(p_init, p_fin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_46": {
                "variable": {
                    "value": "needed_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_diff[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_diff[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_47": {
                "variable": {
                    "value": "current_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_init[2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "p_init[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz_local, torch.ones((num, 1), dtype=torch.float32, device=device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "[tps.float(), torch.tensor([0, 0, 0, 1.0]).view(1, 1, 4).expand(tps.size(0), 1, 4).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_43": {
                "input": {
                    "value": "pos_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pos_diff(p_init, p_fin)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_51": {
                "input": {
                    "value": "to_rotate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_to_pi_2_minus_pi_2(-np.pi / 2.0 + needed_angle - current_angle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "[offset * torch.tensor([1.0, 1.0, 1.0], dtype=torch.float32, device=device), torch.tensor([1.0], device=device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_260": {
                "input": {
                    "value": "topdown2index.unsqueeze(0).expand(world_coords_h.size(0), 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "world_coords_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([zx.view(-1, 2), torch.ones((len(zx), 1), device=device)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([world_coords, torch.ones((len(world_coords), 1, 1)).to(device)], dim=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([world_coords, np.ones((len(world_coords), 1, 1))], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "(len(zx), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_local.device",
                            "Attribute"
                        ],
                        [
                            "zx.device",
                            "Attribute"
                        ],
                        [
                            "ro_phi.device",
                            "Attribute"
                        ],
                        [
                            "offset.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[p[:, :3, :3] / norms.expand(p.size(0), 3, 3), p[:, 3:, :3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "[0, 0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "(len(world_coords), 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_266": {
                "input": {
                    "value": "world_coords.flip(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "(num, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_local.device",
                            "Attribute"
                        ],
                        [
                            "zx.device",
                            "Attribute"
                        ],
                        [
                            "ro_phi.device",
                            "Attribute"
                        ],
                        [
                            "offset.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sin_188": {
                "input": {
                    "value": "ro_phi[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_190": {
                "input": {
                    "value": "ro_phi[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_local.device",
                            "Attribute"
                        ],
                        [
                            "zx.device",
                            "Attribute"
                        ],
                        [
                            "ro_phi.device",
                            "Attribute"
                        ],
                        [
                            "offset.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_local.device",
                            "Attribute"
                        ],
                        [
                            "zx.device",
                            "Attribute"
                        ],
                        [
                            "ro_phi.device",
                            "Attribute"
                        ],
                        [
                            "offset.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ],
                        [
                            "tps.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "habitat_baselines/slambased/utils.py": {
        "torch": {
            "stack_21": {
                "variable": {
                    "value": "grid2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y.repeat(w, 1).t().contiguous().view(-1), x.repeat(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-w / 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "w / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-h / 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "h / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_20": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/utils/common.py": {
        "torch": {
            "as_tensor_470": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.permute(1, 2, 0).cpu().numpy() * 255",
                            "BinOp"
                        ],
                        [
                            "img.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_RGB2BGR)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(img.float(), size=(h, w), mode=interpolation_mode).to(dtype=img.dtype)",
                            "Call"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "img.permute(0, 1, 4, 2, 3)",
                            "Call"
                        ],
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img.permute(0, 1, 3, 4, 2)",
                            "Call"
                        ],
                        [
                            "img.squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_489": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "interpolation_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'area'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_636": {
                "variable": {
                    "value": "(lin_vel, ang_vel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_200": {
                "variable": {
                    "value": "cache",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*sensor.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_721": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((), math.log(init_alpha))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_outputs) * 0.01 + std_init",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_143": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "self.std(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(std, min=self.min_std, max=self.max_std)",
                            "Call"
                        ],
                        [
                            "torch.exp(std)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_145": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "self.std(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(std, min=self.min_std, max=self.max_std)",
                            "Call"
                        ],
                        [
                            "torch.exp(std)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_147": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "self.std(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(std, min=self.min_std, max=self.max_std)",
                            "Call"
                        ],
                        [
                            "torch.exp(std)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softplus(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_735": {
                "input": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "batched_tensors[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batched_tensors[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_721": {
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "math.log(init_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_729": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_249": {
                "data": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_obs[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_125": {
                "*size": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "habitat_baselines/utils/visualizations/utils.py": {
        "torch": {
            "argmax_56": {
                "input": {
                    "value": "pred_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pred_seg, 0).cpu().numpy() % 40",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_baseline_resnet.py": {
        "torch": {
            "as_tensor_25": {
                "variable": {
                    "value": "result[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "result[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_baseline_trainers.py": {
        "torch": {
            "arange_268": {
                "variable": {
                    "value": "test_recurrent_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 13)",
                            "Call"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_270": {
                "variable": {
                    "value": "not_done_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 13)",
                            "Call"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_271": {
                "variable": {
                    "value": "current_episode_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 13)",
                            "Call"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_272": {
                "variable": {
                    "value": "prev_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 13)",
                            "Call"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_352": {
                "variable": {
                    "value": "sensor_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "sensor_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(sensor_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_353": {
                "variable": {
                    "value": "batched_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "batched_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(batched_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_209": {
                "variable": {
                    "value": "input_cube",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_cube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[orig_batch[key] for key in sensor_uuids]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(input_cube, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_cube, end_dim=1)",
                            "Call"
                        ],
                        [
                            "input_cube.float() / 255",
                            "BinOp"
                        ],
                        [
                            "input_cube.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "apply_blur(input_cube)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_210": {
                "variable": {
                    "value": "input_cube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[orig_batch[key] for key in sensor_uuids]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(input_cube, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_cube, end_dim=1)",
                            "Call"
                        ],
                        [
                            "input_cube.float() / 255",
                            "BinOp"
                        ],
                        [
                            "input_cube.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "apply_blur(input_cube)",
                            "Call"
                        ]
                    ]
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_218": {
                "variable": {
                    "value": "apply_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_223": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cube - input_cube",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_274": {
                "start": {
                    "value": "num_envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(1, 13)",
                            "Call"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_359": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "sensor_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(sensor_device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_baseline_training.py": {
        "torch": {
            "manual_seed_70": {
                "seed": {
                    "value": "config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "config.TASK_CONFIG.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_74": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_125": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_ddppo_reduce.py": {
        "torch": {
            "TCPStore_36": {
                "variable": {
                    "value": "tcp_store",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "actor_critic.unused",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_gather_objects.py": {
        "torch": {}
    },
    "test/test_tensor_dict.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "tensor_dict[b][c][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_28": {
                "obj": {
                    "value": "tensor_dict['a']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "tensor_dict['b']['c']['d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_64": {
                "input": {
                    "value": "tensor_dict['b']['c']['d'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp['c']['d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_72": {
                "input": {
                    "value": "tensor_dict['b']['c']['d'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp['c']['d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_77": {
                "input": {
                    "value": "tensor_dict['b']['c']['d'][2:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp['c']['d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_65": {
                "input": {
                    "value": "tensor_dict['b']['c']['d'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp['c']['d']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_60": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_74": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}