{
    "GMMOT/assignment.py": {
        "sklearn": {},
        "torch": {
            "Tensor_68": {
                "variable": {
                    "value": "tra",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_71": {
                "variable": {
                    "value": "det_geo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "tra_geo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "start_src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "start_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data1.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(start_src)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "end_src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "end_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data1.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(end_src)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "start_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "start_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data2.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(start_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "end_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "end_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data2.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(end_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "params_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckp_dir, f'params.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GMMOT/dataloader.py": {
        "torch": {
            "Tensor_88": {
                "variable": {
                    "value": "geo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[], []]",
                            "List"
                        ]
                    ]
                }
            },
            "max_218": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_219": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_228": {
                "variable": {
                    "value": "lti",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_229": {
                "variable": {
                    "value": "rbi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_395": {
                "variable": {
                    "value": "anno",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tras",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tracklet_id_all)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(det_id_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_400": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "fnm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_91": {
                "n": {
                    "value": "n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_85": {},
            "is_available_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GMMOT/gmatching.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.cross_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_16": {
                "variable": {
                    "value": "AB",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ab,cd->acbd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_30": {
                "variable": {
                    "value": "m_emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(U_src.transpose(1, 2), U_tgt) + iou.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(U_src.transpose(1, 2), U_tgt)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_tgt.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_31": {
                "variable": {
                    "value": "m_emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp0.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_src.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_34": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cross_graph(emb1 + lambda_1 * m_emb1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cross_graph(emb2 + lambda_2 * m_emb2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_37": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1_new.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_38": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2_new.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "Mp_before",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.cross_graph(emb1 + lambda_1 * m_emb1))",
                            "Call"
                        ],
                        [
                            "F.normalize(emb1_new.squeeze(0), p=2, dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "emb2_new.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "variable": {
                    "value": "Mp_before",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_43": {
                "variable": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "kro_one_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "emb1_new.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "emb1_new.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "kro_one_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "emb2_new.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "emb2_new.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb1_new.squeeze(0).unsqueeze(1).repeat(1, emb1_new.shape[1], 1), emb1_new.repeat(emb1_new.shape[1], 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb2_new.squeeze(0).unsqueeze(1).repeat(1, emb2_new.shape[1], 1), emb2_new.repeat(emb2_new.shape[1], 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "thr_flag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_48": {
                "variable": {
                    "value": "thr_flag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "M[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "M[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cholesky_75": {
                "variable": {
                    "value": "M[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "M[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "match_tra",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_tra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(Z, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(match_tra)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "Mp0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U_src.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "U_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_tgt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_32": {
                "input": {
                    "value": "m_emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Mp0, emb2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_33": {
                "input": {
                    "value": "m_emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Mp0.transpose(1, 2), emb1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "input": {
                    "value": "U_src.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "U_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_tgt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_70": {
                "n": {
                    "value": "M.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "M.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_94": {
                "input": {
                    "value": "s - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_110": {
                "input": {
                    "value": "s - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "[match_tra.unsqueeze(0), torch.arange(len(match_tra)).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[torch.arange(len(match_tra)).unsqueeze(0), match_tra.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_135": {
                "start": {
                    "value": "len(match_tra)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_138": {
                "start": {
                    "value": "len(match_tra)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GMMOT/graph.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMMOT/graph_encoder.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "GMMOT/model.py": {
        "torch": {
            "einsum_36": {
                "variable": {
                    "value": "AB",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ab,cd->acbd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((n, n)) - np.eye(n)",
                            "BinOp"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.cross_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "feat_tra",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_tra_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "G_src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "G1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "G_src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "G_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "G2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "G_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "H_src",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "H_src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "H_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gh(data2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "H_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "Mp0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U_src.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "U_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data2.t().unsqueeze(0).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "m_emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(U_src.transpose(1, 2), U_tgt).cuda()",
                            "Call"
                        ],
                        [
                            "Mp0 + iou",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_tgt.transpose(1, 2).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_128": {
                "variable": {
                    "value": "m_emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Mp0.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U_src.transpose(1, 2).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_135": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cross_graph(emb1 + lambda_1 * m_emb1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cross_graph(emb2 + lambda_2 * m_emb2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_140": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1_new.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_140": {
                "variable": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_141": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2_new.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "emb2_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.cross_graph(emb1 + lambda_1 * m_emb1))",
                            "Call"
                        ],
                        [
                            "F.normalize(emb1_new.squeeze(0), p=2, dim=1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "emb2_new.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "Mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_162": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K1Me",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a2 * K_G",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_H.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_190": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_191": {
                "variable": {
                    "value": "bbb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_192": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, bbb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "GG",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(G, a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "input": {
                    "value": "X2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_edge_feature(emb2_new.transpose(1, 2).cpu(), G_tgt, H_tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_145": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m + p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_213": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m + p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_234": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_235": {
                "variable": {
                    "value": "bbb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ],
                        [
                            "Mp.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_236": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, bbb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "GG",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(G, a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_171": {
                "n": {
                    "value": "M.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "M.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_188": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_197": {
                "input": {
                    "value": "s - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_131": {
                "input": {
                    "value": "m_emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Mp0, emb2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_132": {
                "input": {
                    "value": "m_emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Mp0.transpose(1, 2), emb1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_211": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_217": {
                "input": {
                    "value": "s - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "[Mp.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_232": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ],
                        [
                            "M.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_240": {
                "input": {
                    "value": "s - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "data": {
                    "value": "[Mp.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "[Mp.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gmtracker_app.py": {
        "torch": {
            "Tensor_96": {
                "variable": {
                    "value": "reid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.cross_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "params_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'params.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qpth/prof-gurobi.py": {
        "torch": {
            "Tensor_96": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_91": {},
            "Tensor_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qpth/prof-linear.py": {
        "torch": {
            "Linear_77": {
                "variable": {
                    "value": "lm",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 500]",
                            "List"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 500]",
                            "List"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_79": {},
            "ones_103": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "nBatch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 500]",
                            "List"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "nBatch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10, 50, 100, 500]",
                            "List"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qpth/qpth/qp.py": {
        "torch": {
            "eig_84": {
                "variable": {
                    "value": "(e, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "zhats",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_101": {
                "variable": {
                    "value": "lams",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_104": {
                "variable": {
                    "value": "slacks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_150": {
                "input": {
                    "value": "ctx.slacks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G.size()",
                            "Call"
                        ],
                        [
                            "ctx.nineq",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G.size()",
                            "Call"
                        ],
                        [
                            "ctx.nineq",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "zhats[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_113": {
                "variable": {
                    "value": "lams[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "slacks[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.size(1) if A.nelement() > 0 else 0",
                            "IfExp"
                        ],
                        [
                            "ctx.neq",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_85": {
                "input": {
                    "value": "e[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_102": {},
            "Tensor_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "nus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "qpth/qpth/solvers/pdipm/batch.py": {
        "torch": {
            "zeros_275": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_296": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "H_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_333": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_395": {
                "variable": {
                    "value": "G_invQ_GT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "G.transpose(1, 2).lu_solve(*Q_LU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_397": {
                "variable": {
                    "value": "S_LU_pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_55": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_101": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_102": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), G.transpose(1, 2)).squeeze(1) + s - h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nineq).type_as(Q)",
                            "Call"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.bmm(y.unsqueeze(1), A).squeeze(1) if neq > 0 else 0.0) + torch.bmm(z.unsqueeze(1), G).squeeze(1) + torch.bmm(x.unsqueeze(1), Q.transpose(1, 2)).squeeze(1) + p",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nz).type_as(Q)",
                            "Call"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_192": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(invQ_rx.unsqueeze(1).bmm(A.transpose(1, 2)).squeeze(1) - ry, invQ_rx.unsqueeze(1).bmm(G.transpose(1, 2)).squeeze(1) + rs / d - rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_401": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).lu_solve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_402": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).lu_solve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "lu_unpack_405": {
                "variable": {
                    "value": "(P_A_invQ_AT, L_A_invQ_AT, U_A_invQ_AT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "*LU_A_invQ_AT",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_414": {
                "variable": {
                    "value": "S_LU_22",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(S_LU_11, S_LU_12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "variable": {
                    "value": "S_LU_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_439": {
                "variable": {
                    "value": "factor_kkt_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lu_unpack_450": {
                "variable": {
                    "value": "(oldPivots, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "T_LU[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "LU_pivots": {
                    "value": "oldPivotsPacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S_LU[1][:, -nineq:] - neq",
                            "BinOp"
                        ]
                    ]
                },
                "unpack_data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lu_unpack_453": {
                "variable": {
                    "value": "(newPivots, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "T_LU[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "LU_pivots": {
                    "value": "newPivotsPacked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T_LU[1]",
                            "Subscript"
                        ]
                    ]
                },
                "unpack_data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_77": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor_solve_kkt(Q, D, G, A, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir(Q, D, G, A, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_83": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor_solve_kkt(Q, D, G, A, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt(Q_LU, d, G, A, S_LU, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if neq > 0 else None)",
                            "Call"
                        ],
                        [
                            "solve_kkt_ir(Q, D, G, A, p, torch.zeros(nBatch, nineq).type_as(Q), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_297": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_299": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_335": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_335": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_14": {
                "variable": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_68": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_103": {
                "input": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), A.transpose(1, 2)).squeeze(1) - b if neq > 0 else 0.0",
                            "IfExp"
                        ],
                        [
                            "torch.zeros(nBatch, neq).type_as(Q) if neq > 0 else torch.Tensor()",
                            "IfExp"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_161": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_248": {
                "n": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "nz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_249": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_95": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_99": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_287": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_324": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_416": {
                "tensors": {
                    "value": "(S_LU_21, S_LU_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_94": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_94": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "input": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_93": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_281": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_319": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_320": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ],
                        [
                            "neq",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nineq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "qpth/qpth/solvers/pdipm/single.py": {
        "torch": {
            "ones_19": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "U_S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_148": {
                "variable": {
                    "value": "G_invQ_GT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.potrs(G.t(), U_Q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_202": {
                "variable": {
                    "value": "S_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q)], 1), torch.cat([A, torch.zeros(neq, nineq).type_as(Q)], 1)], 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(A_.t(), U_H_)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_43": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mv(A.t(), y) if neq > 0 else 0.0) + torch.mv(G.t(), z) + torch.mv(Q, x) + inputs_i",
                            "BinOp"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_80": {
                "variable": {
                    "value": "dx_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx_aff + dx_cor",
                            "BinOp"
                        ],
                        [
                            "torch.potrs(g1.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_81": {
                "variable": {
                    "value": "dz_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dz_aff + dz_cor",
                            "BinOp"
                        ],
                        [
                            "w[neq:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mv(A, invQ_rx) - ry, torch.mv(G, invQ_rx) + rs / d - rz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_152": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(A.t(), U_Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_153": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(A.t(), U_Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "[Q, torch.zeros(nz, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "h_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "[Q, torch.zeros(nz, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_28": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_30": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_96": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dv < 1e-12",
                            "Compare"
                        ]
                    ]
                }
            },
            "min_98": {
                "input": {
                    "value": "a[I]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_116": {
                "input": {
                    "value": "G.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w[neq:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_118": {
                "input": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w[:neq]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_169": {
                "input": {
                    "value": "U12.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "U12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gesv(G_invQ_AT.t(), U11.t())[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mv_204": {
                "input": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q)], 1), torch.cat([A, torch.zeros(neq, nineq).type_as(Q)], 1)], 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "invH_g_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(g_.view(-1, 1), U_H_).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_29": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_31": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_41": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_42": {
                "input": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mv(G, x) + s - h",
                            "BinOp"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "U11",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_177": {
                "input": {
                    "value": "1 / d.cpu()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "G.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_39": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "x + alpha * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_40": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "x + alpha * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_64": {
                "input": {
                    "value": "s + alpha * ds_aff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "z + alpha * dz_aff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_65": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_112": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "[torch.zeros(nineq, nz).type_as(Q), D]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[A, torch.zeros(neq, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "[torch.zeros(nineq, nz).type_as(Q), D]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_193": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_109": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_206": {
                "input": {
                    "value": "A_.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.potrs(t_, U_S_).view(-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mv_36": {
                "input": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(U_Q, d, G, A, U_S, inputs_i, torch.zeros(nineq).type_as(Q), -h, nb)",
                            "Call"
                        ],
                        [
                            "y + alpha * dy if neq > 0 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_68": {
                "*size": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_110": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_186": {
                "n": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_191": {
                "*size": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "R.size(0)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ],
                        [
                            "get_sizes(G, A)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qpth/qpth/solvers/pdipm/spbatch.py": {
        "torch": {
            "stack_196": {
                "variable": {
                    "value": "Gi_U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Gi[1, :], Gi[0, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "Ai_U",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Ai[1, :], Ai[0, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "Ki",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Qi, Di, Gi_L, Gi_U, Ai_L, Ai_U, Ii_L, Ii_U, Ii_11, Ii_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "Kv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Qv, Dv, Gv_L, Gv_U, Av_L, Av_U, Iv_L, Iv_U, Iv_11, Iv_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_238": {
                "variable": {
                    "value": "Kv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Ks[i]._values() for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "nonzero_240": {
                "variable": {
                    "value": "Didx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Ki[0] == Ki[1]).__and__(nz <= Ki[0]).__and__(Ki[0] < nz + nineq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "Didx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[i] - torch.mm(Ks[i], l[i].unsqueeze(1)) for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_47": {
                "variable": {
                    "value": "Dv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(torch.mm(As[j].t(), y[j].unsqueeze(1)) if neq > 0 else 0.0) + torch.mm(Gs[j].t(), z[j].unsqueeze(1)) + torch.mm(Qs[j], x[j].unsqueeze(1)) + p[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_73": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mm(Gs[j], x[j].unsqueeze(1)) + s[j] - h[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_78": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mm(As[j], x[j].unsqueeze(1)) - b[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_80": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_82": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.mm(Gs[j], x[j].unsqueeze(1)) + s[j] - h[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, nineq).type_as(Qv)",
                            "Call"
                        ],
                        [
                            "rz",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "z_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_86": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([(torch.mm(As[j].t(), y[j].unsqueeze(1)) if neq > 0 else 0.0) + torch.mm(Gs[j].t(), z[j].unsqueeze(1)) + torch.mm(Qs[j], x[j].unsqueeze(1)) + p[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, nz).type_as(Qv)",
                            "Call"
                        ],
                        [
                            "rx",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "dual_resid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_134": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "t4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rx.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ry.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_159": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_261": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[i] - torch.mm(Ks[i], l[i].unsqueeze(1)) for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(rx, rs, rz, ry)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_53": {
                "input": {
                    "value": "(Didx - Didxtilde).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_84": {
                "input": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.mm(As[j], x[j].unsqueeze(1)) - b[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, neq).type_as(Qv)",
                            "Call"
                        ],
                        [
                            "ry",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_161": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_60": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Ks, K, Ktildes, Ktilde, p, torch.zeros(nBatch, nineq).type_as(p), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_64": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_kkt(Ks, K, Ktildes, Ktilde, p, torch.zeros(nBatch, nineq).type_as(p), -h, -b if b is not None else None)",
                            "Call"
                        ],
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_256": {
                "input": {
                    "value": "Ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "l[i].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_261": {
                "input": {
                    "value": "Ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "l[i].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_80": {
                "input": {
                    "value": "As[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_75": {
                "input": {
                    "value": "Qs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_78": {
                "input": {
                    "value": "Gs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "Gs[j].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_73": {
                "input": {
                    "value": "As[j].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "qpth/qpth/util.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "G.size()",
                            "Call"
                        ],
                        [
                            "d.size()",
                            "Call"
                        ],
                        [
                            "nBatch",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_39": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qpth/test.py": {
        "torch": {
            "rand_212": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_214": {
                "variable": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "rand_215": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_216": {
                "variable": {
                    "value": "rz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_217": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_342": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xhats - truex",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_358": {
                "variable": {
                    "value": "loss_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xhats_dense - truex",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_253": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_306": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_196": {
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "randn_198": {
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "randn_199": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_201": {
                "*size": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "randn_202": {
                "*size": {
                    "value": "neq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_264": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "randn_269": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_272": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_280": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "ones_317": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "randn_322": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_325": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_333": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_334": {
                "*size": {
                    "value": "nBatch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainGMMOT.py": {
        "torch": {
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_171": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(params, lr=cfg.TRAIN.LR, weight_decay=cfg.TRAIN.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_154": {
                "seed": {
                    "value": "cfg.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "params_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.warmstart_path, f'params.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(base_path / 'params.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_143": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(base_path / 'optim.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_88": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_103": {
                "input": {
                    "value": "model.reid_enc.fc1.weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/build_graphs.py": {
        "torch": {
            "zeros_159": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * feat_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "X[:, 0:feat_dim, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_pad, edge_pad), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_pad, edge_pad), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "X[:, feat_dim:2 * feat_dim, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_pad, edge_pad), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((n_pad, edge_pad), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/detection.py": {
        "torch": {}
    },
    "utils/track.py": {
        "torch": {
            "Tensor_142": {
                "variable": {
                    "value": "self.mov_ave",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "self.mov_ave",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/voting_layer.py": {
        "torch": {
            "Softmax_22": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "variable": {
                    "value": "ret_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}