{
    "train_clf.py": {
        "sklearn": {
            "f1_score_181": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "res['target_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "res['output_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "GPUOptions_132": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_133": {
                "variable": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_134": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params['max_seq_len']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "target_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(input_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in tf.trainable_variables() if 'transformer' in var.name.lower()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_save",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in tf.trainable_variables() if 'classification' in var.name.lower()]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_88": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_89": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_95": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_97": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(input)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_105": {
                "msg": {
                    "value": "'Estimating total_num_steps (reading %s)' % filePath",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_147": {
                "variable": {
                    "value": "output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifer(latent)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "Transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "input_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_seq_length(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(loss) / num_samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_189": {
                "msg": {
                    "value": "'Model saved in path: %s' % os.path.join(save_path, 'model')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_184": {
                "msg": {
                    "value": "'Epoch:{:0>2d}/{:0>2d}, Batch:{:0>5d}/{:0>5d}, loss:{:.7f}, lr:{:.7f}, batch_F1:{:.3f}'.format(e + 1, params['total_num_epochs'], b, params['total_num_steps_per_epoch'], res['loss'], res['lr'], f1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "predict_FGIM.py": {
        "tensorflow": {
            "GPUOptions_32": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_33": {
                "variable": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params['max_seq_len']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "target_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_53": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifer(latent_to_feed)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "target_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None], name='target_ids', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_55": {
                "variable": {
                    "value": "gradients_for_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=target_ids)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformerAE.get_latent(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_63": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore_seq2seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in tf.trainable_variables() if 'transformer' in var.name.lower()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_69": {
                "variable": {
                    "value": "restorer_clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore_clf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[var for var in tf.trainable_variables() if 'classification' in var.name.lower()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "identity_43": {
                "variable": {
                    "value": "latent_to_feed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transformerAE.get_latent(input_ids)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "latent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifer(latent_to_feed)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_51": {
                "variable": {
                    "value": "output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifer(latent_to_feed)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_84": {
                "msg": {
                    "value": "'Original input text        : {}'.format(inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_85": {
                "msg": {
                    "value": "'Original reconstructed text: {}'.format(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_86": {
                "msg": {
                    "value": "'Original --> Target        : {}-->{}'.format(out_class, tgt_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "'Original logits: {}'.format(res['logits'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "input": {
                    "value": "latent_to_feed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(latent, name='latent')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_91": {
                "msg": {
                    "value": "'epsilon:{} ========================='.format(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_112": {
                "msg": {
                    "value": "'\\titer:{}/{}, loss:{:.6f}, logits:{}, output:{}'.format(it + 1, max_iters, loss_val[0], logits_val, out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "predict_autoencoder.py": {
        "tensorflow": {
            "GPUOptions_29": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_30": {
                "variable": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_31": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params['max_seq_len']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_47": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_65": {
                "msg": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train_autoencoder.py": {
        "tensorflow": {
            "GPUOptions_95": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_96": {
                "variable": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_97": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "gpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params['max_seq_len']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "target_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params['max_seq_len'] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(input_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_122": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_70": {
                "msg": {
                    "value": "'Estimating total_num_steps (reading %s)' % filePath",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "input_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_seq_length(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(loss) / num_samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_150": {
                "msg": {
                    "value": "'Model saved in path: %s' % os.path.join(save_path, 'model')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_136": {
                "msg": {
                    "value": "'Epoch:{:0>2d}/{:0>2d}, Batch:{:0>5d}/{:0>5d}, loss:{:.7f}, lr:{:.7f}'.format(e + 1, params['total_num_epochs'], b, params['total_num_steps_per_epoch'], res['loss'], res['lr'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_144": {
                "msg": {
                    "value": "'\\tInput : %s' % inp[rand_id]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_145": {
                "msg": {
                    "value": "'\\tOutput: %s' % out[rand_id]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_146": {
                "msg": {
                    "value": "'\\tGreedy: %s' % pred[rand_id]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Common_utils.py": {
        "tensorflow": {
            "set_verbosity_11": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_81": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(seq_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "pad_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(padding, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "'Estimated total_num_steps = %d for %d epochs' % (total_num_steps_per_epoch * hparams.total_num_epochs, hparams.total_num_epochs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_81": {
                "x": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(seq_ids, 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Hparam_utils.py": {
        "tensorflow": {
            "info_127": {
                "msg": {
                    "value": "Training schedule:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_128": {
                "msg": {
                    "value": "'\\t1. Train for {} epochs (Train-Eval-inferenceTest) in total.'.format(hparams.total_num_epochs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_129": {
                "msg": {
                    "value": "'\\t2. Train for {} total num steps.'.format(hparams.total_num_steps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_130": {
                "msg": {
                    "value": "'\\t3. Evaluate every %d steps.' % hparams.eval_frequency",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_131": {
                "msg": {
                    "value": "'\\t4. Batch_size=%d.' % hparams.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_110": {
                "msg": {
                    "value": "'Vocab_dir not defined, using same dir as data_dir: %s' % hparams.data_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_116": {
                "msg": {
                    "value": "Using char-level vocab setting, vocab_file name must end with \"_char\" ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "'Found %d vocab_size from %s' % (len(vocab), hparams.vocab_file)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Model_RNN_utils.py": {
        "tensorflow": {
            "to_float_314": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(seq_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_315": {
                "variable": {
                    "value": "pad_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(padding, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.embed_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_138": {
                "variable": {
                    "value": "(bi_outputs, bi_encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.forward_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.backward_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "input_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "bi_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_252": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.projection_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Projection/Hidden_to_Embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_256": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_281": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputSpec_285": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: input_shape[-1].value}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "MultiRNNCell_308": {
                "cells": {
                    "value": "[wrap_first(make_cell(hidden_size)) if i == 0 else wrap_others(make_cell(hidden_size)) for i in range(num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "state_is_tuple",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_90": {
                "variable": {
                    "value": "pretrained_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_91": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.cast(tf.reduce_sum(pretrained_embedding, axis=-1), dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "pretrained_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self.pretrained, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_99": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_314": {
                "x": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_315": {
                "input_tensor": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.equal(seq_ids, 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "self.scope_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(self.params['initializer_gain'], mode='fan_avg', distribution='uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "DropoutWrapper_300": {
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DropoutWrapper_303": {
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_keep_prob": {
                    "value": "1 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_316": {
                "input": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_324": {
                "values": {
                    "value": "[fw, bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "a": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_203": {
                "input": {
                    "value": "source_encoding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "variable": {
                    "value": "predicted_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs.predicted_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "variable": {
                    "value": "outputs_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(outputs_length, [1, 0])",
                            "Call"
                        ],
                        [
                            "outputs_length[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "x": {
                    "value": "tf.reduce_sum(pretrained_embedding, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "shift_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "pretrained_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(self.pretrained, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_185": {
                "tensor": {
                    "value": "target_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_209": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_219": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Model_TransformeAutoEncoder_utils.py": {
        "tensorflow": {
            "zeros_168": {
                "variable": {
                    "value": "encoder_decoder_attention_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_193": {
                "variable": {
                    "value": "initial_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_200": {
                "variable": {
                    "value": "(ids, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "symbols_to_logits_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_symbols_to_logits_fn(max_decode_length)",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[initial_ids, initial_step, initial_cache]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([None, None]), initial_step.get_shape(), nest.map_structure(_get_shape_keep_last_dim, initial_cache)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "cache[encoder_decoder_attention_bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_294": {
                "variable": {
                    "value": "(bi_outputs, bi_encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self.forward_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self.backward_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "input_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_latent(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(latent, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, latent)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_187": {
                "variable": {
                    "value": "new_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, latent)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "variable": {
                    "value": "new_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(new_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "new_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ids, new_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_249": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: Model_graph_utils.get_seq_length(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_271": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(embedded_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(decoder_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: Model_graph_utils.get_seq_length(x), predicts, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "Model_graph_utils.get_seq_length(predicts)",
                            "Call"
                        ],
                        [
                            "tf.transpose(length, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "Transformer",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(self.params['initializer_gain'], mode='fan_avg', distribution='uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedded_inputs + pos_encoding",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(encoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "decode_ae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_latent(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(latent, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_211": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_latent(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(latent, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_212": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "map_fn_263": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "[predicts, length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_sequence_267": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "shift_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_143": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_151": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_latent(inputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(latent, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_196": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_116": {
                "input": {
                    "value": "embedded_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_142": {
                "tensor": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_204": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_206": {
                "func": {
                    "value": "_get_shape_keep_last_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'layer_%d' % layer: {'k': tf.zeros([batch_size, 0, self.params['hidden_size']]), 'v': tf.zeros([batch_size, 0, self.params['hidden_size']])} for layer in range(self.params['num_hidden_layers'])}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "where_261": {
                "condition": {
                    "value": "x[1] - 1 > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_261": {
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reverse_sequence_263": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "get_len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Model_Transformer_utils.py": {
        "tensorflow": {
            "expand_dims_1212": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1225": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1298": {
                "variable": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * new_beam_size) // new_beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, new_beam_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, new_beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1303": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, beam_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_1311": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_or_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(dummy, 1), tf.expand_dims(cond_targets_length, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_178": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "conditional_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(dummy, 1), tf.expand_dims(cond_targets_length, 1)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_302": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_304": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_309": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_555": {
                "variable": {
                    "value": "self.q_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_556": {
                "variable": {
                    "value": "self.k_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_557": {
                "variable": {
                    "value": "self.v_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_559": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_642": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q)",
                            "Call"
                        ],
                        [
                            "q * depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.k_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['k'], k], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_644": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.shared_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_647": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.v_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['v'], v], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_677": {
                "variable": {
                    "value": "self.filter_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_679": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_783": {
                "variable": {
                    "value": "finished_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "self._continue_search",
                    "type": "Attribute",
                    "possible_values": []
                },
                "body": {
                    "value": "self._search_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[state]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[state_shapes]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_797": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SEQ]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SEQ]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([self.batch_size, self.beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, new_seq], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_799": {
                "variable": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.batch_size, self.beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "finished_scores * tf.to_float(finished_flags)",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_scores, new_scores], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(initial_log_probs, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_817": {
                "variable": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_820": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (self.beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_822": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (self.beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_826": {
                "variable": {
                    "value": "alive_cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _expand_to_beam_size(t, self.beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'layer_%d' % layer: {'k': tf.zeros([batch_size, 0, self.params['hidden_size']]), 'v': tf.zeros([batch_size, 0, self.params['hidden_size']])} for layer in range(self.params['num_hidden_layers'])}",
                            "DictComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_830": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_836": {
                "variable": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_886": {
                "variable": {
                    "value": "not_at_max_decode_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(len(shape))",
                            "Call"
                        ],
                        [
                            "range(len(shape_list) - 1)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.max_decode_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_895": {
                "variable": {
                    "value": "lowest_finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.batch_size, self.beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "finished_scores * tf.to_float(finished_flags)",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_scores, new_scores], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_899": {
                "variable": {
                    "value": "finished_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_902": {
                "variable": {
                    "value": "worst_finished_score_better_than_best_alive_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_finished_scores, best_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_966": {
                "variable": {
                    "value": "flat_cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_flatten_beam_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "alive_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda t: _expand_to_beam_size(t, self.beam_size), initial_cache)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_structure_972": {
                "variable": {
                    "value": "new_cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unflatten_beam_dim(t, self.batch_size, self.beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_flatten_beam_dim, alive_cache)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_flatten_beam_dim, alive_cache)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_991": {
                "variable": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_log_probs + tf.expand_dims(alive_log_probs, axis=2)",
                            "BinOp"
                        ],
                        [
                            "candidate_log_probs + tf.expand_dims(alive_log_probs, axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.beam_size * self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_993": {
                "variable": {
                    "value": "(topk_log_probs, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beams_to_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_1004": {
                "variable": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_indices % self.vocab_size",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(topk_ids, axis=2)",
                            "Call"
                        ],
                        [
                            "topk_indices % self.vocab_size",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(topk_ids, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1005": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, topk_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_1032": {
                "variable": {
                    "value": "flat_cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_flatten_beam_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "alive_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda t: _expand_to_beam_size(t, self.beam_size), initial_cache)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_structure_1038": {
                "variable": {
                    "value": "new_cache",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unflatten_beam_dim(t, self.batch_size, self.beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_flatten_beam_dim, alive_cache)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_flatten_beam_dim, alive_cache)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1045": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[mask_hot]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1056": {
                "variable": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate_log_probs + tf.expand_dims(alive_log_probs, axis=2)",
                            "BinOp"
                        ],
                        [
                            "candidate_log_probs + tf.expand_dims(alive_log_probs, axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.beam_size * self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1076": {
                "variable": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "topk_indices % self.vocab_size",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(topk_ids, axis=2)",
                            "Call"
                        ],
                        [
                            "topk_indices % self.vocab_size",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(topk_ids, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1077": {
                "variable": {
                    "value": "topk_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, topk_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1096": {
                "variable": {
                    "value": "new_finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_seq[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1131": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([self.batch_size, self.beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1140": {
                "variable": {
                    "value": "new_finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_seq[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1144": {
                "variable": {
                    "value": "finished_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, new_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1145": {
                "variable": {
                    "value": "finished_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, new_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1146": {
                "variable": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, new_finished_flags]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1200": {
                "x": {
                    "value": "(5.0 + tf.to_float(length)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "length_penalty_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_1216": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_1241": {
                "dims": {
                    "value": "shape_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1255": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1270": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[batch_size, beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_structure_1305": {
                "func": {
                    "value": "lambda state: tf.gather_nd(state, coordinates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "nested",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.shared_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_267": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_268": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: Model_graph_utils.get_seq_length(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_289": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_290": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(embedded_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(decoder_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: Model_graph_utils.get_seq_length(x), predicts, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "Model_graph_utils.get_seq_length(predicts)",
                            "Call"
                        ],
                        [
                            "tf.transpose(length, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_335": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.layer(y, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.postprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.postprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_493": {
                "variable": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, self.hidden_size ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_510": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(x, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_512": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_532": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_533": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_581": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.num_heads, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_597": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_625": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['k'], k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_626": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['v'], v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_646": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_717": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_894": {
                "x": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_906": {
                "x": {
                    "value": "not_at_max_decode_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.less(i, self.max_decode_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_not(worst_finished_score_better_than_best_alive_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1060": {
                "variable": {
                    "value": "topk_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multinomial(flat_log_probs, beams_to_keep)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_1061": {
                "variable": {
                    "value": "topk_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.gather(x[0], x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "[flat_log_probs, topk_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_1065": {
                "variable": {
                    "value": "(topk_log_probs, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beams_to_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_1187": {
                "input": {
                    "value": "initial_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=conditional_targets, indices=indices)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "initial_ids",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_1195": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.shared_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "range_1297": {},
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "Transformer",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(self.params['initializer_gain'], mode='fan_avg', distribution='uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_119": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedded_inputs + pos_encoding",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(encoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(encoder_inputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(encoder_inputs, inputs_padding)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(inputs, attention_bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_224": {
                "input": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(inputs, attention_bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_281": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "[predicts, length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_sequence_285": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoded_ids[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: tf.reverse_sequence(x[0], get_len(x), seq_axis=1), [predicts, length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reverse_sequence(predicts, length - 1, seq_axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(predicts, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_310": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_311": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_490": {
                "name_or_scope": {
                    "value": "embedding_and_softmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_508": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_513": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(x, 0))",
                            "Call"
                        ],
                        [
                            "tf.constant([[mask_hot]], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_528": {
                "name": {
                    "value": "presoftmax_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_535": {
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(targets, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.shared_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + mask",
                            "BinOp"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ],
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_573": {
                "name": {
                    "value": "split_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_584": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_594": {
                "name": {
                    "value": "combine_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_598": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_699": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_700": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_705": {
                "variable": {
                    "value": "pad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if not self.allow_pad else padding",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_706": {
                "variable": {
                    "value": "nonpad_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(pad_mask < 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_708": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_709": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_713": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_722": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_723": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_728": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_798": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_800": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_830": {
                "input": {
                    "value": "alive_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_833": {
                "shape": {
                    "value": "[self.batch_size, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_855": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_856": {
                "dims": {
                    "value": "[None, self.beam_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_857": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_858": {
                "func": {
                    "value": "_get_shape_keep_last_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "alive_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda t: _expand_to_beam_size(t, self.beam_size), initial_cache)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorShape_860": {
                "dims": {
                    "value": "[None, self.beam_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_861": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_862": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_903": {
                "x": {
                    "value": "lowest_finished_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_finished_scores + (1.0 - tf.to_float(finished_batches)) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "best_alive_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_not_908": {
                "x": {
                    "value": "worst_finished_score_better_than_best_alive_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_finished_scores, best_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_987": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(initial_log_probs, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1052": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(initial_log_probs, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_1097": {
                "x": {
                    "value": "new_finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ],
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_1306": {
                "params": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{_StateKeys.CUR_INDEX: cur_index, _StateKeys.ALIVE_SEQ: alive_seq, _StateKeys.ALIVE_LOG_PROBS: alive_log_probs, _StateKeys.ALIVE_CACHE: alive_cache, _StateKeys.FINISHED_SEQ: finished_seq, _StateKeys.FINISHED_SCORES: finished_scores, _StateKeys.FINISHED_FLAGS: finished_flags}",
                            "Dict"
                        ]
                    ]
                },
                "indices": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, beam_indices], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "shift_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_164": {
                "input": {
                    "value": "conditional_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_167": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "cond_targets_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model_graph_utils.get_seq_length(conditional_targets) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_initializer_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "'layer_%d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_452": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'layer_%d' % n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "not_equal_510": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_529": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_530": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_574": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_575": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_595": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_596": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_703": {
                "name": {
                    "value": "remove_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_721": {
                "name": {
                    "value": "re_add_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_900": {
                "x": {
                    "value": "finished_batches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(finished_flags, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_1060": {
                "logits": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "beams_to_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ],
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_1133": {
                "shape": {
                    "value": "[self.batch_size, self.beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1141": {
                "x": {
                    "value": "new_finished_flags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ],
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1200": {
                "x": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(embedded_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(decoder_inputs)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.map_fn(lambda x: Model_graph_utils.get_seq_length(x), predicts, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "Model_graph_utils.get_seq_length(predicts)",
                            "Call"
                        ],
                        [
                            "tf.transpose(length, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_113": {
                "input": {
                    "value": "embedded_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_142": {
                "tensor": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + Model_graph_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "shape": {
                    "value": "[batch_size, 0, self.params['hidden_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_280": {
                "condition": {
                    "value": "x[1] - 1 > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_453": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_456": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_459": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_495": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_706": {
                "condition": {
                    "value": "pad_mask < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "gather_1061": {
                "params": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_280": {
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reverse_sequence_281": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "seq_lengths": {
                    "value": "get_len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Model_graph_utils.py": {
        "tensorflow": {
            "to_float_71": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_159": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(seq_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "pad_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(padding, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradients_167": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_168": {
                "variable": {
                    "value": "(clipped_grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(total_loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "params['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_226": {
                "variable": {
                    "value": "warmup_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(0.01) / warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "valid_locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_locs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matrix_band_part(tf.ones([length, length]), -1, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_locs, [1, 1, length, length])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_bias, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_146": {
                "variable": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(y)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, max_length - x_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_length - x_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_149": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(y, [[0, 0], [0, max_length - y_length]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, max_length - y_length]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_229": {
                "pred": {
                    "value": "global_step < hparams.warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : inv_decay * learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_warmup_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_261": {
                "pred": {
                    "value": "self.global_step < start_decay_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.train.exponential_decay(self.learning_rate, self.global_step - start_decay_step, decay_steps, decay_factor, staircase=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_decay_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "soft_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "on_value": {
                    "value": "confidence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - smoothing",
                            "BinOp"
                        ]
                    ]
                },
                "off_value": {
                    "value": "low_confidence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_37": {
                "variable": {
                    "value": "xentropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "soft_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_76": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "decoder_self_attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_116": {
                "x": {
                    "value": "tf.equal(x, padding_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "pad_to_same_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_155": {
                "name": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_159": {
                "x": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_padding(x)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.equal(seq_ids, 0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterServerStrategy_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_227": {
                "x": {
                    "value": "warmup_steps - global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_29": {
                "name": {
                    "value": "smoothing_cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_49": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "labels_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_seq_length(labels)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(labels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xentropy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=soft_targets)",
                            "Call"
                        ],
                        [
                            "xentropy - normalizing_constant",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_75": {
                "x": {
                    "value": "num_timescales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_79": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_79": {
                "x": {
                    "value": "scaled_time",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_97": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_116": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, max_length - x_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_136": {
                "input": {
                    "value": "attention_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "padding * _NEG_INF",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attention_bias, axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [0, max_length - x_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_144": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(y, [[0, 0], [0, max_length - y_length]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_161": {
                "input": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_global_step_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MirroredStrategy_191": {
                "devices": {
                    "value": "devices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['device:CPU:0']",
                            "List"
                        ],
                        [
                            "['device:GPU:%d' % i for i in range(num_gpus)]",
                            "ListComp"
                        ]
                    ]
                },
                "cross_device_ops": {
                    "value": "tf.contrib.distribute.AllReduceCrossDeviceOps(all_reduce_alg, num_packs=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MirroredStrategy_196": {
                "devices": {
                    "value": "devices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "['device:CPU:0']",
                            "List"
                        ],
                        [
                            "['device:GPU:%d' % i for i in range(num_gpus)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_226": {
                "x": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exponential_decay_264": {
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step - start_decay_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "int(remain_steps / decay_times)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_31": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_33": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_77": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_43": {
                "x": {
                    "value": "confidence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - smoothing",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_44": {
                "x": {
                    "value": "low_confidence + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_43": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/Optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_7": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_8": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_10": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_26": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_29": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "params['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "group_38": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ],
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_44": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_47": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_87": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_88": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_91": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ],
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "params['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "group_100": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ],
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_58": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "is_warmup",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_174": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_149": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_151": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "x": {
                    "value": "next_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}