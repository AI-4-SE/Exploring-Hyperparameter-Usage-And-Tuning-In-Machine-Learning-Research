{
    "nlgeval/__init__.py": {
        "sklearn": {
            "cosine_similarity_62": {
                "X": {
                    "value": "refv",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "vector_hyps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_127": {
                "X": {
                    "value": "refv",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "vector_hyps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nlgeval/word2vec/evaluate.py": {
        "sklearn": {
            "cosine_similarity_118": {
                "variable": {
                    "value": "simi_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb_hyp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_102": {
                "X": {
                    "value": "refv",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "avg_emb_hyps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cosine_similarity_109": {
                "X": {
                    "value": "refv",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "extreme_emb_hyps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}