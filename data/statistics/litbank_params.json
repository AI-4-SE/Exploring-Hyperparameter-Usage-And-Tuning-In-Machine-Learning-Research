{
    "tagger/crf.py": {
        "torch": {
            "max_14": {
                "variable": {
                    "value": "(max, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n_labels, n_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pointers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pointers)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_112": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "paths[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_139": {
                "variable": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions.unsqueeze(0).expand_as(vit_exp)",
                            "Call"
                        ],
                        [
                            "trn.unsqueeze(0).expand(batch_size, *trn.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lbl_rexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lbl_r.unsqueeze(-1).expand(*lbl_r.size(), trn.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_143": {
                "variable": {
                    "value": "trn_scr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trn_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(trn_exp, 1, lbl_rexp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lbl_lexp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, :-1].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_156": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_181": {
                "variable": {
                    "value": "ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens.max().data",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_16": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_exp), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_31": {
                "mean": {
                    "value": "self.transitions.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_107": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reversed(pointers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.exp(vec - max_exp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_28": {
                "*size": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_16": {
                "input": {
                    "value": "vec - max_exp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tagger/flat_reader.py": {
        "torch": {}
    },
    "tagger/layered_reader.py": {
        "torch": {}
    },
    "tagger/run_tagger.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_200": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_179": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_225": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_260": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_277": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_286": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['modelFile']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tagger/tagger.py": {
        "torch": {
            "Dropout_46": {
                "variable": {
                    "value": "self.layered_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.lstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "modelSize",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.hidden2tag1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.lstm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.hidden2tag2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_54": {
                "variable": {
                    "value": "self.lstm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.hidden2tag3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.flat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_60": {
                "variable": {
                    "value": "self.flat_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "modelSize",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.flat_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.flat_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels_flat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_127": {
                "variable": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix1[:, 1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "lstm_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm1(reduced)",
                            "Call"
                        ],
                        [
                            "self.lstm1(reduced)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "input3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix2[:, 1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "lstm_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm2(input2)",
                            "Call"
                        ],
                        [
                            "self.lstm2(input2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_258": {
                "variable": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_index1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_layer_transformation(tag_space1, t1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lstm_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm1(reduced)",
                            "Call"
                        ],
                        [
                            "self.lstm1(reduced)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_283": {
                "variable": {
                    "value": "input3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_index2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_layer_transformation(tag_space2, t2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lstm_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm2(input2)",
                            "Call"
                        ],
                        [
                            "self.lstm2(input2)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "input": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_154": {
                "condition": {
                    "value": "labels[0][:, 1:] == -100",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(labels[0][:, 1:]) * to_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "labels[0][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_158": {
                "condition": {
                    "value": "labels[1][:, 1:] == -100",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(labels[1][:, 1:]) * to_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "labels[1][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_162": {
                "condition": {
                    "value": "labels[2][:, 1:] == -100",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(labels[2][:, 1:]) * to_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "labels[2][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "input": {
                    "value": "transforms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "transforms.to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "all_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((sequence_outputs[-1], sequence_outputs[-2], sequence_outputs[-3], sequence_outputs[-4]), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_154": {
                "input": {
                    "value": "labels[0][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_158": {
                "input": {
                    "value": "labels[1][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "labels[2][:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}