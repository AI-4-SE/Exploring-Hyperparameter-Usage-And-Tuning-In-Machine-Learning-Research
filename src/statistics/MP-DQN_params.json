{
    "agents/paddpg.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.output_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_layer_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, actions, action_parameters)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.action_output_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_layer_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_size",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.action_parameters_output_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_layer_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.action_parameters_passthrough_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "self.action_max",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones((self.num_actions,))",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "self.action_parameter_max",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_max_numpy",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "self.action_parameter_min",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_min_numpy",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "self.action_parameter_range",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_range_numpy",
                    "possible_values": []
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                },
                "betas": {
                    "value": "adam_betas",
                    "possible_values": [
                        [
                            "(0.95",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_239": {
                "variable": {
                    "value": "self.critic_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_critic",
                    "possible_values": []
                },
                "betas": {
                    "value": "adam_betas",
                    "possible_values": [
                        [
                            "(0.95",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_267": {
                "variable": {
                    "value": "passthrough_layer.weight.data",
                    "possible_values": []
                }
            },
            "from_numpy_388": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.from_numpy(states).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "actions_combined",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "self.action_output_layer(x)",
                            "Call"
                        ],
                        [
                            "actions_combined[:, :self.num_actions]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_392": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rewards",
                    "possible_values": [
                        [
                            "torch.from_numpy(rewards).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_393": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_states",
                    "possible_values": [
                        [
                            "torch.from_numpy(next_states).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_394": {
                "variable": {
                    "value": "terminals",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "terminals",
                    "possible_values": [
                        [
                            "torch.from_numpy(terminals).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_432": {
                "variable": {
                    "value": "action_params",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions, action_params)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_272": {
                "variable": {
                    "value": "passthrough_layer.bias.data",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "n_step_returns",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "n_step_returns",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.from_numpy(n_step_returns).to(device)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_423": {
                "variable": {
                    "value": "action_params",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(actions, action_params)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_316": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_317": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__416": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mul_435": {
                "input": {
                    "value": "delta_a",
                    "possible_values": [
                        [
                            "deepcopy(action_params.grad.data)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "action_params",
                    "possible_values": [
                        [
                            "self.action_parameters_output_layer(x)",
                            "Call"
                        ],
                        [
                            "action_params + self.action_parameters_passthrough_layer(state)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((actions, action_params), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((actions, action_params), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_437": {
                "*size": {
                    "value": "out.shape",
                    "possible_values": []
                }
            },
            "clip_grad_norm__440": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "self.state_size + action_size + action_parameter_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "self.state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_127": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action_parameters)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.action_parameters_output_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ],
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.action_parameters_passthrough_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "self.action_max",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones((self.num_actions,))",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "self.action_parameter_max",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_max_numpy",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "self.action_parameter_min",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_min_numpy",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "self.action_parameter_range",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.action_parameter_range_numpy",
                    "possible_values": []
                }
            },
            "Adam_242": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                }
            },
            "Adam_243": {
                "variable": {
                    "value": "self.actor_param_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_param.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor_param",
                    "possible_values": []
                }
            },
            "Tensor_272": {
                "variable": {
                    "value": "passthrough_layer.weight.data",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.from_numpy(states).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_411": {
                "variable": {
                    "value": "actions_combined",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "actions_combined[:, 0].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_414": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rewards",
                    "possible_values": [
                        [
                            "torch.from_numpy(rewards).to(self.device).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_414": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_415": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_states",
                    "possible_values": [
                        [
                            "torch.from_numpy(next_states).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_416": {
                "variable": {
                    "value": "terminals",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "terminals",
                    "possible_values": [
                        [
                            "torch.from_numpy(terminals).to(self.device).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_416": {
                "variable": {
                    "value": "terminals",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_277": {
                "variable": {
                    "value": "passthrough_layer.bias.data",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "ind",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "Qprime",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_450": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([counts[a] / actions.shape[0] for a in range(self.num_actions)])",
                    "possible_values": []
                }
            },
            "mean_462": {
                "variable": {
                    "value": "Q_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_indexed",
                    "possible_values": [
                        [
                            "Q_val.gather(1, actions.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_464": {
                "variable": {
                    "value": "Q_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Q_val, 1)",
                    "possible_values": []
                }
            },
            "save_492": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "prefix + '_actor.pt'",
                    "possible_values": []
                }
            },
            "save_493": {
                "obj": {
                    "value": "self.actor_param.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "prefix + '_actor_param.pt'",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ],
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_size",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_295": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_419": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__436": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mul_475": {
                "input": {
                    "value": "delta_a",
                    "possible_values": [
                        [
                            "deepcopy(action_params.grad.data)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "action_params",
                    "possible_values": [
                        [
                            "self.action_parameters_output_layer(x)",
                            "Call"
                        ],
                        [
                            "action_params + self.action_parameters_passthrough_layer(state)",
                            "BinOp"
                        ],
                        [
                            "action_params.tanh()",
                            "Call"
                        ],
                        [
                            "action_params * self.action_param_lim",
                            "BinOp"
                        ],
                        [
                            "self.actor_param(states)",
                            "Call"
                        ],
                        [
                            "self.actor_param(Variable(states))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_477": {
                "*size": {
                    "value": "out.shape",
                    "possible_values": []
                }
            },
            "clip_grad_norm__479": {
                "parameters": {
                    "value": "self.actor_param.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "load_504": {
                "f": {
                    "value": "prefix + '_actor.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "load_505": {
                "f": {
                    "value": "prefix + '_actor_param.pt'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "inputSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_58": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "inputSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_296": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "manual_seed_297": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_326": {
                "variable": {
                    "value": "all_action_parameters",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(self.action_parameter_min_numpy, self.action_parameter_max_numpy)",
                    "possible_values": []
                }
            },
            "from_numpy_458": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([counts[a] / actions.shape[0] for a in range(self.num_actions)])).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1.0, self.num_actions)",
                            "Call"
                        ],
                        [
                            "weights / np.linalg.norm(weights)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(weights).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_464": {
                "input": {
                    "value": "Q_val",
                    "possible_values": [
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "weights * Q",
                            "BinOp"
                        ],
                        [
                            "Q / self.num_actions",
                            "BinOp"
                        ],
                        [
                            "weights * Q",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "max_422": {
                "input": {
                    "value": "pred_Q_a",
                    "possible_values": [
                        [
                            "self.actor_target(next_states, pred_next_action_parameters)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn_multipass.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, torch.zeros_like(action_parameters))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Q",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_size",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "inputSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "action_parameters",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn_multipass_nstep.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn_nstep.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action_parameters)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.action_parameters_passthrough_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.from_numpy(states).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "actions_combined",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "actions_combined[:, 0].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rewards",
                    "possible_values": [
                        [
                            "torch.from_numpy(rewards).to(device).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_states",
                    "possible_values": [
                        [
                            "torch.from_numpy(next_states).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "terminals",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "terminals",
                    "possible_values": [
                        [
                            "torch.from_numpy(terminals).to(device).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "terminals",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "n_step_returns",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "n_step_returns",
                    "possible_values": [
                        [
                            "torch.from_numpy(n_step_returns).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "squeeze_186": {
                "variable": {
                    "value": "Qprime",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([counts[a] / actions.shape[0] for a in range(self.num_actions)])",
                    "possible_values": []
                }
            },
            "mean_228": {
                "variable": {
                    "value": "Q_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_indexed",
                    "possible_values": [
                        [
                            "Q_val.gather(1, actions.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_230": {
                "variable": {
                    "value": "Q_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(Q_val, 1)",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_size",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_parameter_size",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mul_241": {
                "input": {
                    "value": "delta_a",
                    "possible_values": [
                        [
                            "deepcopy(action_params.grad.data)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "action_params",
                    "possible_values": [
                        [
                            "self.layers[num_hidden_layers - 1](x)",
                            "Call"
                        ],
                        [
                            "action_params + self.action_parameters_passthrough_layer(state)",
                            "BinOp"
                        ],
                        [
                            "action_params.tanh()",
                            "Call"
                        ],
                        [
                            "action_params * self.action_param_lim",
                            "BinOp"
                        ],
                        [
                            "self.actor_param(states)",
                            "Call"
                        ],
                        [
                            "self.actor_param(Variable(states))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_243": {
                "*size": {
                    "value": "out.shape",
                    "possible_values": []
                }
            },
            "clip_grad_norm__245": {
                "parameters": {
                    "value": "self.actor_param.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.state_size + self.action_parameter_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_57": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "self.state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_123": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([counts[a] / actions.shape[0] for a in range(self.num_actions)])).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(0, 1.0, self.num_actions)",
                            "Call"
                        ],
                        [
                            "weights / np.linalg.norm(weights)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(weights).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_230": {
                "input": {
                    "value": "Q_val",
                    "possible_values": [
                        [
                            "Q",
                            "Name"
                        ],
                        [
                            "weights * Q",
                            "BinOp"
                        ],
                        [
                            "Q / self.num_actions",
                            "BinOp"
                        ],
                        [
                            "weights * Q",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "max_186": {
                "input": {
                    "value": "pred_Q_a",
                    "possible_values": [
                        [
                            "self.actor_target(next_states, pred_next_action_parameters)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn_split.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action_parameters)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.shared_layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.split_networks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "lastHiddenLayerSize",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_layers[nh - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.action_size",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shared_layers[i](x)",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "inputSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_58": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "inputSize",
                    "possible_values": [
                        [
                            "self.state_size + self.action_parameter_size",
                            "BinOp"
                        ],
                        [
                            "self.state_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "shared_layer_sizes[0]",
                    "possible_values": []
                }
            },
            "leaky_relu_126": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.shared_layers[i](x)",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "hidden_layers[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i]",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "shared_layer_sizes[i - 1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shared_layer_sizes[i]",
                    "possible_values": []
                }
            }
        }
    },
    "agents/pdqn_split_nstep.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.actor_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate_actor",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}