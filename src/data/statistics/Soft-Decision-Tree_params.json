{
    "SDT.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.inner_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim + 1, self.internal_node_num_, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.leaf_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.leaf_node_num_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "path_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inner_nodes(X)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(path_prob, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((path_prob, 1 - path_prob), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "path_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(path_prob, 1 - path_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_154": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.size()[0]",
                            "Subscript"
                        ],
                        [
                            "_mu.size()[0]",
                            "Subscript"
                        ],
                        [
                            "X.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bias, X)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "self.input_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.internal_node_num_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "_path_prob[:, node] * _mu[:, node // 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "_mu[:, node // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_146": {
                "input": {
                    "value": "1 - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tree.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decaly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=True, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "data.size()[0]",
                            "Subscript"
                        ],
                        [
                            "data.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=False, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "data.size()[0]",
                            "Subscript"
                        ],
                        [
                            "data.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_68": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tree.forward(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}