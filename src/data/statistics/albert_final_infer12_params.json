{
    "src/model/ALBERT/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "src/model/ALBERT/modeling_albert.py": {
        "tensorflow": {
            "list_variables_62": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_67": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.replace('module/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn_1', 'ffn')",
                            "Call"
                        ],
                        [
                            "name.replace('bert/', 'albert/')",
                            "Call"
                        ],
                        [
                            "name.replace('attention_1', 'attention')",
                            "Call"
                        ],
                        [
                            "name.replace('transform/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm_1', 'full_layer_layer_norm')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm', 'attention/LayerNorm')",
                            "Call"
                        ],
                        [
                            "name.replace('transformer/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('intermediate/dense/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn/intermediate/output/dense/', 'ffn_output/')",
                            "Call"
                        ],
                        [
                            "name.replace('/output/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('/self/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('pooler/dense', 'pooler')",
                            "Call"
                        ],
                        [
                            "name.replace('cls/predictions', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('predictions/attention', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('embeddings/attention', 'embeddings')",
                            "Call"
                        ],
                        [
                            "name.replace('inner_group_', 'albert_layers/')",
                            "Call"
                        ],
                        [
                            "name.replace('group_', 'albert_layer_groups/')",
                            "Call"
                        ],
                        [
                            "'classifier/' + name",
                            "BinOp"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_159": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_173": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_174": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_175": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_188": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_194": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_264": {
                "variable": {
                    "value": "self.full_layer_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.ffn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_286": {
                "variable": {
                    "value": "self.albert_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayer(config) for _ in range(config.inner_group_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.embedding_hidden_mapping_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.albert_layer_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.pooler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_447": {
                "variable": {
                    "value": "self.pooler_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_593": {
                "variable": {
                    "value": "v1v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a for a in buffer]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_618": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_619": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_620": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_621": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_737": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.classifier_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_738": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_832": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_455": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_557": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_559": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_590": {
                "variable": {
                    "value": "v1v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1v2[0], v1v2[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_719": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_922": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_231": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_253": {
                "equation": {
                    "value": "bfnd,ndh->bfh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "context_layer.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_619": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_811": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_814": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_201": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/ALBERT/modeling_bert.py": {
        "tensorflow": {
            "list_variables_76": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_81": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_125": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_165": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_166": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_167": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_172": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_301": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_357": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_406": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_446": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_483": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_507": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1130": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1225": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1226": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1326": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1327": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1422": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_150": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_183": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_716": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_718": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_912": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1018": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1026": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1111": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1308": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1397": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1516": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_135": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_142": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_257": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_759": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1205": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1208": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_730": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_308": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/ALBERT/tokenization_utils.py": {
        "tensorflow": {
            "constant_1193": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1514": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_1023": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1196": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1199": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1516": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1519": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1010": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "padded_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "abs_1025": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1202": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1522": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1205": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1208": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1524": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1527": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1012": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padded_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/BERT/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "src/model/BERT/modeling_bert.py": {
        "tensorflow": {
            "list_variables_68": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_73": {
                "variable": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_117": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "zip(names, arrays)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_280": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_327": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_367": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_398": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_412": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_746": {
                "variable": {
                    "value": "v1v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a for a in buffer]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1033": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1034": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1108": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1109": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1184": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1269": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_170": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tanh_620": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_673": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_675": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_677": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_743": {
                "variable": {
                    "value": "v1v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1v2[0], v1v2[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_830": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_914": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_922": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_986": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1138": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1205": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1302": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_127": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_236": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_627": {
                "variable": {
                    "value": "self.classification_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_690": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_1058": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1061": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_287": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/BERT/tokenization_utils.py": {
        "tensorflow": {
            "constant_861": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[sequence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_862": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[token_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_864": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sequence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_865": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_type_ids]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/ALBERT/modeling_utils.py": {
        "torch": {
            "Linear_1464": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_237": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "new_num_tokens",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_881": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1055": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_1056": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1125": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1128": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1142": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1167": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1168": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1169": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1170": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1213": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1214": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1215": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_1398": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1406": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1410": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1414": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_173": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_726": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_837": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_989": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_words.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1321": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1340": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1342": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1346": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1354": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1356": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1362": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1404": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_1408": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1412": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1416": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_467": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_830": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(next_token_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_830": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_833": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_919": {
                "variable": {
                    "value": "next_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_921": {
                "variable": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_922": {
                "variable": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(F.softmax(scores, dim=-1), num_samples=2)",
                            "Call"
                        ],
                        [
                            "next_words.view(batch_size, 2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.topk(_scores, 2 * num_beams, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_929": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_935": {
                "variable": {
                    "value": "(next_scores, next_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1056": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(logits, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1128": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1194": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1248": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1329": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_998": {
                "variable": {
                    "value": "reordered_layer_past",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reordered_layer_past",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[layer_past[:, i].unsqueeze(1).clone().detach() for i in beam_idx]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(reordered_layer_past, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_919": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1051": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ],
                        [
                            "top_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_like_1433": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_830": {
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/BERT/modeling_utils.py": {
        "torch": {
            "Linear_808": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_196": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "new_num_tokens",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_embeddings.weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_485": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_487": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_488": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_492": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_526": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_527": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_528": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_569": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_570": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_742": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_750": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_754": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_758": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_395": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_672": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_691": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_693": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_695": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_701": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_703": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_707": {
                "variable": {
                    "value": "start_states",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_748": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_752": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_756": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_760": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_488": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_550": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_601": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_680": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_777": {
                "variable": {
                    "value": "cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/preprocessing_funcs.py": {
        "torch": {
            "pad_sequence_367": {
                "variable": {
                    "value": "seqs_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[0] for x in sorted_batch]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.seq_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_371": {
                "variable": {
                    "value": "labels_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x[1], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_375": {
                "variable": {
                    "value": "labels2_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x[2], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label2_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_379": {
                "variable": {
                    "value": "labels3_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x[3], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label3_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_383": {
                "variable": {
                    "value": "labels4_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x[4], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label4_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[token.text for token in sents_doc[left_r:right_r]]",
                            "ListComp"
                        ],
                        [
                            "[w.lower() for w in x if x != '[BLANK]']",
                            "ListComp"
                        ],
                        [
                            "[token if idx not in masked_idxs else self.tokenizer.mask_token for (idx, token) in enumerate(x)]",
                            "ListComp"
                        ],
                        [
                            "[self.cls_token] + x[:s1[0]] + ['[E1]', '[BLANK]', '[/E1]'] + x[s1[1]:s2[0]] + ['[E2]'] + x[s2[0]:s2[1]] + ['[/E2]'] + x[s2[1]:] + [self.sep_token]",
                            "BinOp"
                        ],
                        [
                            "self.tokenizer.convert_tokens_to_ids(x)",
                            "Call"
                        ],
                        [
                            "[self.cls_token] + x[:s1[0]] + ['[E1]', '[BLANK]', '[/E1]'] + x[s1[1]:s2[0]] + ['[E2]', '[BLANK]', '[/E2]'] + x[s2[1]:] + [self.sep_token]",
                            "BinOp"
                        ],
                        [
                            "[self.cls_token] + x[:s1[0]] + ['[E1]'] + x[s1[0]:s1[1]] + ['[/E1]'] + x[s1[1]:s2[0]] + ['[E2]', '[BLANK]', '[/E2]'] + x[s2[1]:] + [self.sep_token]",
                            "BinOp"
                        ],
                        [
                            "[self.cls_token] + x[:s1[0]] + ['[E1]'] + x[s1[0]:s1[1]] + ['[/E1]'] + x[s1[1]:s2[0]] + ['[E2]'] + x[s2[0]:s2[1]] + ['[/E2]'] + x[s2[1]:] + [self.sep_token]",
                            "BinOp"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(x)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "masked_for_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_for_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[token.lower() for (idx, token) in enumerate(x) if idx in masked_idxs]",
                            "ListComp"
                        ],
                        [
                            "self.tokenizer.convert_tokens_to_ids(masked_for_pred)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(masked_for_pred)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(masked_for_pred)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(masked_for_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "([i for (i, e) in enumerate(x) if e == '[E1]'][0], [i for (i, e) in enumerate(x) if e == '[E2]'][0])",
                            "Tuple"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "([i for (i, e) in enumerate(x) if e == '[E1]'][0], [i for (i, e) in enumerate(x) if e == '[E2]'][0])",
                            "Tuple"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "([i for (i, e) in enumerate(x) if e == '[E1]'][0], [i for (i, e) in enumerate(x) if e == '[E2]'][0])",
                            "Tuple"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ],
                        [
                            "self.tokenize(self.put_blanks((r, e1, e2)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(e1_e2_start)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/tasks/infer.py": {
        "torch": {
            "is_available_37": {
                "variable": {
                    "value": "self.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "tokenized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "variable": {
                    "value": "e1_e2_start",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tokenized.shape[0], tokenized.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "input": {
                    "value": "classification_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(tokenized, token_type_ids=token_type_ids, attention_mask=attention_mask, Q=None, e1_e2_start=e1_e2_start)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/tasks/preprocessing_funcs.py": {
        "torch": {
            "pad_sequence_108": {
                "variable": {
                    "value": "seqs_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[0] for x in sorted_batch]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.seq_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_112": {
                "variable": {
                    "value": "labels_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(map(lambda x: x[1], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_116": {
                "variable": {
                    "value": "labels2_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "labels2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x[2], sorted_batch))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.label2_pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "semeval_dataset(df_train, tokenizer=tokenizer, e1_id=e1_id, e2_id=e2_id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pad_Sequence(seq_pad_value=tokenizer.pad_token_id, label_pad_value=tokenizer.pad_token_id, label2_pad_value=-1)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "semeval_dataset(df_test, tokenizer=tokenizer, e1_id=e1_id, e2_id=e2_id)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Pad_Sequence(seq_pad_value=tokenizer.pad_token_id, label_pad_value=tokenizer.pad_token_id, label2_pad_value=-1)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/tasks/train_funcs.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_path, 'task_test_model_best_%d.pth.tar' % args.model_no)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_32": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_path, 'task_test_checkpoint_%d.pth.tar' % args.model_no)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_64": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/tasks/trainer.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': net.parameters(), 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiStepLR_85": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': net.parameters(), 'lr': args.lr}])",
                            "Call"
                        ],
                        [
                            "amp.initialize(net, optimizer, opt_level='O2')",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[2, 4, 6, 8, 12, 15, 18, 20, 22, 24, 26, 30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/test_checkpoint_%d.pth.tar' % args.model_no",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultiStepLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': net.parameters(), 'lr': args.lr}])",
                            "Call"
                        ],
                        [
                            "amp.initialize(net, optimizer, opt_level='O2')",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[2, 4, 6, 8, 12, 15, 18, 20, 22, 24, 26, 30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__133": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'best_acc': accuracy_per_epoch[-1], 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'amp': amp.state_dict() if amp is not None else amp}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('./data/', 'task_test_model_best_%d.pth.tar' % args.model_no)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'best_acc': accuracy_per_epoch[-1], 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'amp': amp.state_dict() if amp is not None else amp}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('./data/', 'task_test_checkpoint_%d.pth.tar' % args.model_no)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_funcs.py": {
        "torch": {
            "CrossEntropyLoss_28": {
                "variable": {
                    "value": "self.LM_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.lm_ignore_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(neg_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_path, 'test_model_best_%d.pth.tar' % args.model_no)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_33": {
                "variable": {
                    "value": "self.BCE_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_35": {
                "variable": {
                    "value": "self.BCE_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor([])",
                            "Call"
                        ],
                        [
                            "pos_logits.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(pos_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(base_path, 'test_checkpoint_%d.pth.tar' % args.model_no)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_140": {
                "input": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lm_logits",
                            "Method Argument"
                        ],
                        [
                            "lm_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_140": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_50": {
                "input": {
                    "value": "f1_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1_vec",
                            "Method Argument"
                        ],
                        [
                            "f1_vec",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "f2_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2_vec",
                            "Method Argument"
                        ],
                        [
                            "f2_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[pos_logits, neg_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_46": {
                "input": {
                    "value": "f1_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1_vec",
                            "Method Argument"
                        ],
                        [
                            "f1_vec",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "f2_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2_vec",
                            "Method Argument"
                        ],
                        [
                            "f2_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_39": {
                "input": {
                    "value": "f2_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2_vec",
                            "Method Argument"
                        ],
                        [
                            "f2_vec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_44": {
                "input": {
                    "value": "-factor * torch.dot(f1_vec, f2_vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_44": {
                "input": {
                    "value": "f1_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1_vec",
                            "Method Argument"
                        ],
                        [
                            "f1_vec",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "f2_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2_vec",
                            "Method Argument"
                        ],
                        [
                            "f2_vec",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainer.py": {
        "torch": {
            "is_available_32": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': net.parameters(), 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiStepLR_77": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': net.parameters(), 'lr': args.lr}])",
                            "Call"
                        ],
                        [
                            "amp.initialize(net, optimizer, opt_level='O2')",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[2, 4, 6, 8, 12, 15, 18, 20, 22, 24, 26, 30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_88": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([{'params': net.parameters(), 'lr': args.lr}])",
                            "Call"
                        ],
                        [
                            "amp.initialize(net, optimizer, opt_level='O2')",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[2, 4, 6, 8, 12, 15, 18, 20, 22, 24, 26, 30]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__141": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__144": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'best_acc': accuracy_per_epoch[-1], 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'amp': amp.state_dict() if amp is not None else amp}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('./data/', 'test_model_best_%d.pth.tar' % args.model_no)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'best_acc': accuracy_per_epoch[-1], 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'amp': amp.state_dict() if amp is not None else amp}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('./data/', 'test_checkpoint_%d.pth.tar' % args.model_no)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}