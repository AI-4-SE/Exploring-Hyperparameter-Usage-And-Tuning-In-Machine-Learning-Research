{
    "lsm_hawp_inference.py": {
        "torch": {
            "load_92": {
                "f": {
                    "value": "args.ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/dataloader.py": {
        "torch": {
            "DataLoader_243": {
                "variable": {
                    "value": "sample_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_421": {
                "variable": {
                    "value": "sample_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/discriminators.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dis_conv(in_channels=in_channels, out_channels=64, kernel_size=4, stride=2, padding=1, use_spectral_norm=config.dis_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dis_conv(in_channels=64, out_channels=128, kernel_size=4, stride=2, padding=1, use_spectral_norm=config.dis_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dis_conv(in_channels=128, out_channels=256, kernel_size=4, stride=2, padding=1, use_spectral_norm=config.dis_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "dis_conv(in_channels=256, out_channels=512, kernel_size=4, stride=2, padding=1, use_spectral_norm=config.dis_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=512, out_channels=1, kernel_size=4, stride=1, padding=1, bias=not config.dis_spectral_norm), config.dis_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not config.dis_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "torch": {
            "split_54": {
                "variable": {
                    "value": "(x, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_conv(x)",
                            "Call"
                        ],
                        [
                            "self.gate_conv(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_conv(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "(x, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gate_conv(x)",
                            "Call"
                        ],
                        [
                            "self.gate_conv(x)",
                            "Call"
                        ],
                        [
                            "self.decoder_conv(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.decoder_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SNGateConv(in_channels=input_channels, out_channels=self.deconv_ch, kernel_size=3 if stride == 1 else 4, stride=stride, padding=1, transpose=True if stride > 1 else False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.emb_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.deconv_ch, emb_channels * 2, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.att_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(emb_channels * 2, emb_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.to_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(emb_channels, 1, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.to_line",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(emb_channels, 1, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(emb_channels, 3, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_145": {
                "variable": {
                    "value": "(e, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb_head(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.emb_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.queries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "aggregated_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attended_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_44": {
                "variable": {
                    "value": "self.gate_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.gate_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.deconv_ch + emb_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_combine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.reprojection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(mask, size=[h, w], mode='nearest')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys[:, i * head_channels:(i + 1) * head_channels, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries[:, i * head_channels:(i + 1) * head_channels, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(max_value, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.reshape([n, h * w])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "spectral_norm_252": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_109": {
                "num_features": {
                    "value": "self.deconv_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "self.deconv_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "emb_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_114": {
                "num_features": {
                    "value": "emb_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "emb_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_119": {
                "num_features": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(keys[:, i * head_channels:(i + 1) * head_channels, :], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_203": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query.transpose(1, 2), key)",
                            "Call"
                        ],
                        [
                            "torch.mean(score, dim=1).reshape([n, h, w])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[n, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_229": {
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_232": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_235": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_238": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "torch": {
            "L1Loss_64": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_101": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.relu3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.relu3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.relu3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.relu3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.relu4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.relu4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.relu4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.relu4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.relu5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.relu5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.relu5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.relu5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_30": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_213": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_214": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_33": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, ch, w * h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/lsm_hawp/detector.py": {
        "torch": {
            "max_pool2d_42": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_52": {
                "variable": {
                    "value": "(scores, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "jloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jloc.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "junctions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_56": {
                "variable": {
                    "value": "junctions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_85": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_loi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_88": {
                "variable": {
                    "value": "self.pool1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.n_pts0 // self.n_pts1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.n_pts0 // self.n_pts1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.dim_loi * self.n_pts1, self.dim_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "sign_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md_maps.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "sign_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_215": {
                "variable": {
                    "value": "_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md_maps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_216": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md_maps.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_218": {
                "variable": {
                    "value": "(y0, x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, height, device=device).float()",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, width, device=device).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_223": {
                "variable": {
                    "value": "cs_md",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "md_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(md_maps[0] - 0.5) * np.pi * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_224": {
                "variable": {
                    "value": "ss_md",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "md_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(md_maps[0] - 0.5) * np.pi * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_226": {
                "variable": {
                    "value": "cs_st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "st_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md_maps[1] * np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_226": {
                "variable": {
                    "value": "cs_st",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sin_227": {
                "variable": {
                    "value": "ss_st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "st_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "md_maps[1] * np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_227": {
                "variable": {
                    "value": "ss_st",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cos_229": {
                "variable": {
                    "value": "cs_ed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ed_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-md_maps[2] * np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "cs_ed",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sin_230": {
                "variable": {
                    "value": "ss_ed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ed_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-md_maps[2] * np.pi / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_230": {
                "variable": {
                    "value": "ss_ed",
                    "type": "variable",
                    "possible_values": []
                },
                "max": {
                    "value": "-0.001",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_st_final, y_st_final, x_ed_final, y_ed_final)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "permute_247": {
                "variable": {
                    "value": "lines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 2, 3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_258": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(masks, size=(images.shape[2], images.shape[3]), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(images.shape[2], images.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "lines_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lines_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lines_tensor, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "(dis_junc_to_end1, idx_junc_to_end1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(lines_pred[:, :2] - juncs_pred[:, None]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_149": {
                "variable": {
                    "value": "(dis_junc_to_end1, idx_junc_to_end1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "(dis_junc_to_end2, idx_junc_to_end2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(lines_pred[:, 2:] - juncs_pred[:, None]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "(dis_junc_to_end2, idx_junc_to_end2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_152": {
                "variable": {
                    "value": "idx_junc_to_end_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_junc_to_end1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_153": {
                "variable": {
                    "value": "idx_junc_to_end_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_junc_to_end1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_157": {
                "variable": {
                    "value": "idx_lines_for_junctions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((idx_junc_to_end_min[iskeep, None], idx_junc_to_end_max[iskeep, None]), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "lines_adjusted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(juncs_pred[idx_lines_for_junctions[:, 0]], juncs_pred[idx_lines_for_junctions[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_53": {
                "input": {
                    "value": "joff[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_54": {
                "input": {
                    "value": "joff[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "self.dim_loi * self.n_pts1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "self.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "self.dim_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "(idx_junc_to_end_min[iskeep, None], idx_junc_to_end_max[iskeep, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_84": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.n_pts0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_260": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images * 255.0",
                            "BinOp"
                        ],
                        [
                            "(images - hawp_mean) / hawp_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_82": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.n_pts0",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/lsm_hawp/multi_task_head.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[head(x) for head in self.heads]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "*args": {
                    "value": "nn.Conv2d(input_channels, m, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(head_size, [])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lsm_hawp/stacked_hg.py": {
        "torch": {
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_77": {
                "variable": {
                    "value": "low1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hg[n - 1][2](low2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics.py": {
        "torch": {
            "sum_272": {
                "variable": {
                    "value": "relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_69": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "true_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((outputs == labels) * labels).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_280": {
                "input": {
                    "value": "true_positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((outputs == labels) * labels).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_276": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.g_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.d_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.d_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.g_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.d_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.d_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_503": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.g_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_505": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.d_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.d_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_602": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.g_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.g_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_604": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.d_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.d_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.beta1, config.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/training.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "{'iteration': model.iteration if iteration is None else iteration, 'g_model': save_g.state_dict(), 'g_opt': g_opt.state_dict(), 'amp': amp.state_dict() if amp is not None else None}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_g_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.g_path + '_{}.pth'.format(prefix)",
                            "BinOp"
                        ],
                        [
                            "model.g_path + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_72": {
                "obj": {
                    "value": "{'d_model': save_d.state_dict(), 'd_opt': d_opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_d_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.d_path + '_{}.pth'.format(prefix)",
                            "BinOp"
                        ],
                        [
                            "model.d_path + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_24": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "g_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.g_path + '_last.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "d_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.d_path + '_last.pth'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test_single.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "config.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_40": {
                "variable": {
                    "value": "config.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "config.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_46": {
                "seed": {
                    "value": "config.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_MST_stage1.py": {
        "torch": {
            "device_count_51": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size // config.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=config.world_size, rank=local_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['val'], fix_mask_path=config.data_flist[config.dataset]['test_mask'], training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "val_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "hawp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[109.73, 103.832, 98.681]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "hawp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "hawp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[22.275, 22.124, 23.229]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "hawp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedSampler_100": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "config.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributed.get_rank()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_103": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_65": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributed.get_rank()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_91": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_130": {
                "f": {
                    "value": "config.lsm_hawp_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_216": {
                "input": {
                    "value": "items['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_MST_stage2.py": {
        "torch": {
            "device_count_51": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size // config.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=config.world_size, rank=local_rank, shuffle=True)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['val'], fix_mask_path=config.data_flist[config.dataset]['test_mask'], training=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "val_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "hawp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[109.73, 103.832, 98.681]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "hawp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "hawp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[22.275, 22.124, 23.229]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "hawp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DistributedSampler_101": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "config.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributed.get_rank()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_104": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LSMDataset(config, config.data_flist[config.dataset]['train'], wireframe_path=config.data_flist[config.dataset]['wireframe_path'], irr_mask_path=config.irregular_path, seg_mask_path=config.train_seg_path, wireframe_mask_rate=config.wireframe_mask_rate, hawp_th=config.hawp_th, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_65": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributed.get_rank()",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_131": {
                "f": {
                    "value": "model_stage1.g_path + '_last.pth'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "config.lsm_hawp_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_214": {
                "variable": {
                    "value": "edge_line_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges + lines",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "infos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges, lines, edge_line_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "variable": {
                    "value": "temp_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "items['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_242": {
                "variable": {
                    "value": "edge_line_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges + lines",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "infos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges, lines, edge_line_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_99": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "LambdaLR_92": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_281": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.new('RGB', (width * img_per_row * columns + gap * (img_per_row - 1), height * int(len(inputs) / img_per_row)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, (256, 256))",
                            "Call"
                        ],
                        [
                            "(img - img.min()) / (img.max() - img.min() + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "img * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "img * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "(img + 1) / 2 * 255.0",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}