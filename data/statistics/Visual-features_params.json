{
    "src/appearances.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "vgg19_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg19_model.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "resnet18_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet18_model.fc.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "densenet121_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(densenet121_model.classifier.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "efficientnetb0_model._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(efficientnetb0_model._fc.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../weights/model_880_base.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "vgg19_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vgg19_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.vgg19(pretrained=True)",
                            "Call"
                        ],
                        [
                            "vgg19_model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(vgg19_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "resnet18_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "resnet18_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.resnet18(pretrained=True)",
                            "Call"
                        ],
                        [
                            "resnet18_model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(resnet18_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "densenet121_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "densenet121_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.densenet121(pretrained=True)",
                            "Call"
                        ],
                        [
                            "densenet121_model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(densenet121_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "efficientnetb0_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "efficientnetb0_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EfficientNet.from_pretrained('efficientnet-b0')",
                            "Call"
                        ],
                        [
                            "efficientnetb0_model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(efficientnetb0_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_96": {
                "variable": {
                    "value": "vehreid_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vehreid_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FeatureResNet(n_layers=50)",
                            "Call"
                        ],
                        [
                            "vehreid_model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(vehreid_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image_resize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image_resize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image_resize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image_resize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "image_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(image_resize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_195": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_214": {
                "input": {
                    "value": "tensor_normalise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_230": {
                "input": {
                    "value": "tensor_normalise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_246": {
                "input": {
                    "value": "tensor_normalise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "input": {
                    "value": "tensor_normalise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "tensor_normalise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ],
                        [
                            "normalizer(image_torch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}