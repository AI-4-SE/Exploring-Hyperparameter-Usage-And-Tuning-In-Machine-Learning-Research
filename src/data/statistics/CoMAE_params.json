{
    "codes/infer.py": {
        "sklearn": {
            "f1_score_341": {
                "variable": {
                    "value": "metric_res[ff1_micro_{k}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][k], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][v], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_342": {
                "variable": {
                    "value": "metric_res[ff1_macro_{k}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][k], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][v], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "classification_report_335": {
                "y_true": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][k], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][v], dtype=int)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_337": {
                "y_true": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][k], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][v], dtype=int)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_338": {
                "y_true": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][k], dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(other_res['acc'][v], dtype=int)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_79": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/metric/__init__.py": {
        "sklearn": {
            "cosine_similarity_62": {
                "X": {
                    "value": "refv",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "vector_hyps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_127": {
                "X": {
                    "value": "refv",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "vector_hyps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ],
                        [
                            "self.skipthought_encoder.encode([h.strip() for h in hyp_list], verbose=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/metric/word2vec/evaluate.py": {
        "sklearn": {
            "cosine_similarity_119": {
                "variable": {
                    "value": "simi_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "emb_hyp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_101": {
                "X": {
                    "value": "refv",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "avg_emb_hyps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cosine_similarity_109": {
                "X": {
                    "value": "refv",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "extreme_emb_hyps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "codes/tokenization/tokenization_utils_base.py": {
        "tensorflow": {},
        "torch": {}
    },
    "codes/utils/file_utils.py": {
        "tensorflow": {},
        "torch": {
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/training_utils.py": {
        "tensorflow": {
            "set_seed_56": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "codes/framework/base_framework.py": {
        "torch": {
            "ones_227": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(banned_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/framework/comae/comae.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.er_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.er_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hs, hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.in_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.in_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hs, hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.ex_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.ex_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hs, hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.dialact_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.dialact_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.dialact_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hs, hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.emotion_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.emotion_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.emotion_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3 * hs, hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden_states.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_79": {
                "variable": {
                    "value": "er_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.er_head(last_hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.er_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "in_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in_head(last_hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.in_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_81": {
                "variable": {
                    "value": "ex_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ex_head(last_hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ex_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_120": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden_states.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_122": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dialact_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden_states.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_154": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.emotion_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "tgt_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), tgt_input_ids.size(1)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_232": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits.view(-1, lm_logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_label_ids.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "label_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_label_ids.ne(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_237": {
                "variable": {
                    "value": "ppl_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.sum(loss, dim=1).float() / label_size.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "tgt_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_127": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_dialact_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_info.get('tgt_dialact_id', None)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_159": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_emotion_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_info.get('tgt_emotion_id', None)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "2 * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "3 * hs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.config.n_embd",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_93": {
                "variable": {
                    "value": "pred_er",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(er_logits / TEMPERATURE, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "pred_er",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_94": {
                "variable": {
                    "value": "pred_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(in_logits / TEMPERATURE, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "pred_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_95": {
                "variable": {
                    "value": "pred_ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(ex_logits / TEMPERATURE, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "pred_ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_97": {
                "variable": {
                    "value": "pred_er",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "er_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.er_head(last_hidden_states), self.er_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "pred_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.in_head(last_hidden_states), self.in_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "pred_ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ex_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.ex_head(last_hidden_states), self.ex_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_102": {
                "input": {
                    "value": "er_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.er_head(last_hidden_states), self.er_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_103": {
                "input": {
                    "value": "in_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.in_head(last_hidden_states), self.in_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_104": {
                "input": {
                    "value": "ex_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.ex_head(last_hidden_states), self.ex_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_133": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_133": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_135": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_138": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_139": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_165": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_170": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_171": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.dialact_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']], dim=-1)), self.dialact_embeddings.weight)",
                            "Call"
                        ],
                        [
                            "F.linear(self.emotion_head(torch.cat([last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']], dim=-1)), self.emotion_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_198": {
                "input": {
                    "value": "src_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "label_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(tgt_label_ids.ne(-1), dim=1).type_as(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_237": {
                "input": {
                    "value": "torch.sum(loss, dim=1).float() / label_size.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_268": {
                "input": {
                    "value": "src_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_86": {
                "input": {
                    "value": "ex_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.ex_head(last_hidden_states), self.ex_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_ex",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_info.get('tgt_ex', None)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[last_hidden_states, encoded_info['tgt_mechanism_additive_embeds']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "[last_hidden_states, encoded_info['tgt_mechanism_additive_embeds'], encoded_info['tgt_dialact_additive_embeds']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "input": {
                    "value": "er_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.er_head(last_hidden_states), self.er_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_er",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_info.get('tgt_er', None)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_85": {
                "input": {
                    "value": "in_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(self.in_head(last_hidden_states), self.in_embeddings.weight)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_info.get('tgt_in', None)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(er_logits, tgt_er, reduction='mean') + F.cross_entropy(in_logits, tgt_in, reduction='mean') + F.cross_entropy(ex_logits, tgt_ex, reduction='mean')",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(logits, tgt_dialact_id, reduction='mean')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(logits, tgt_emotion_id, reduction='mean')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(lm_logits.view(-1, lm_logits.size(-1)), tgt_label_ids.view(-1), ignore_index=-1, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss.view(tgt_label_ids.size(0), tgt_label_ids.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_216": {
                "input": {
                    "value": "tgt_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), tgt_input_ids.size(1)))], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), 1))], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_286": {
                "input": {
                    "value": "tgt_attention_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), tgt_input_ids.size(1)))], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([past_attention_mask, past_attention_mask.new_ones((past_attention_mask.size(0), 1))], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "input": {
                    "value": "er_logits / TEMPERATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "input": {
                    "value": "in_logits / TEMPERATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "input": {
                    "value": "ex_logits / TEMPERATURE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_133": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(logits / TEMPERATURE, top_p=0.9)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(logits / TEMPERATURE, top_p=0.9)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(logits / TEMPERATURE, top_p=0.9)",
                            "Call"
                        ],
                        [
                            "top_k_top_p_filtering(logits / TEMPERATURE, top_p=0.9)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "codes/framework/generation_utils.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_433": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_133": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_147": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_ids, input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_470": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['lm_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits[:, :-expand_vocab_size]",
                            "Subscript"
                        ],
                        [
                            "outputs['lm_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits[:, :-expand_vocab_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_601": {
                "variable": {
                    "value": "output_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_ids, input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_700": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_701": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logscores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_360": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logscores, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_360": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_363": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs['lm_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits[:, :-expand_vocab_size]",
                            "Subscript"
                        ],
                        [
                            "outputs['lm_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits[:, :-expand_vocab_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, add_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_509": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_510": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logscores, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_512": {
                "variable": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_514": {
                "variable": {
                    "value": "(next_scores, next_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_515": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_scores_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "topk_525": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, add_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_629": {
                "input": {
                    "value": "next_scores[batch_idx, :num_beams] == beam_scores.view(batch_size, num_beams)[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_701": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "[reshape(past_key_value[0]).unsqueeze(0), reshape(past_key_value[1]).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[original_input_ids, output_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_332": {
                "tensors": {
                    "value": "[model_kwargs['src_input_ids'], original_input_ids, output_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_474": {
                "tensors": {
                    "value": "[original_input_ids, output_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "[model_kwargs['src_input_ids'], original_input_ids, output_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_696": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "codes/inputter/comae/comae.py": {
        "torch": {
            "pad_sequence_193": {
                "variable": {
                    "value": "src_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.src_input_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "toker.pad_token_id",
                            "Attribute"
                        ],
                        [
                            "toker.eos_token_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequence_195": {
                "variable": {
                    "value": "src_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor([1.0] * f.src_len, dtype=torch.float) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_197": {
                "variable": {
                    "value": "src_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.src_token_type_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_199": {
                "variable": {
                    "value": "src_dialact_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.src_dialact_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_201": {
                "variable": {
                    "value": "src_emotion_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.src_emotion_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "src_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.src_len for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_205": {
                "variable": {
                    "value": "tgt_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.tgt_input_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "toker.pad_token_id",
                            "Attribute"
                        ],
                        [
                            "toker.eos_token_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequence_207": {
                "variable": {
                    "value": "tgt_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(f.tgt_label_ids, dtype=torch.long) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "tgt_token_type_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_token_type_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "tgt_dialact_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_dialact_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "tgt_emotion_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_emotion_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "tgt_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_len for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "tgt_er",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_er for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "tgt_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_in for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "tgt_ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tgt_ex for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "f.src_input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "[1.0] * f.src_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "f.src_token_type_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "f.src_dialact_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "f.src_emotion_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "f.tgt_input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "f.tgt_label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/inputter/inputter_utils.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feature_dataset(trunc_chunk)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BucketSampler(lens, self.bucket_size, self.batch_size, droplast=True, shuffle=self.shuffle)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "partial(self.feature_dataset.collate, toker=self.toker)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "codes/modeling/base_decoder.py": {
        "torch": {}
    },
    "codes/modeling/gpt2.py": {
        "torch": {
            "empty_50": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(w, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "addmm_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(w, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_199": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_201": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_306": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_320": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_322": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_114": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.bool()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(w, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.masked_bias.to(w.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_210": {
                "variable": {
                    "value": "self.ln_cross_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_213": {
                "variable": {
                    "value": "self.ln_knl_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_311": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_318": {
                "variable": {
                    "value": "self.tte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_380": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past_key_values[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_85": {
                "input": {
                    "value": "torch.ones((n_ctx, n_ctx), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "-10000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / float(v.size(-1)) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.where(mask.bool(), w, self.masked_bias.to(w.dtype))",
                            "Call"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(w, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "(n_ctx, n_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/modeling/modeling_utils.py": {
        "torch": {
            "ones_77": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "head_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1659": {
                "variable": {
                    "value": "new_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_679": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_733": {
                "variable": {
                    "value": "new_lm_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*new_lm_head_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_new_lm_head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_lm_head.bias is not None",
                            "Compare"
                        ]
                    ]
                }
            },
            "empty_1206": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_1208": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1209": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1229": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1268": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1269": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1270": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1271": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1334": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1335": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1336": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_1572": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1583": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1587": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_590": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1478": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1497": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1499": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1503": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1511": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1513": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1519": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1578": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_1585": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1589": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1792": {
                "tensors": {
                    "value": "output_chunks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple((forward_fn(*input_tensors_chunk) for input_tensors_chunk in zip(*input_tensors_chunks)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "chunk_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_822": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "{k: v for (k, v) in state_dict.items() if k not in self._keys_to_ignore_on_save}",
                            "DictComp"
                        ],
                        [
                            "kwargs.pop('state_dict', None)",
                            "Call"
                        ],
                        [
                            "torch.load(resolved_archive_file, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "state_dict.copy()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_1045": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only, use_auth_token=use_auth_token)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_1209": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_1309": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1379": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1486": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_84": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_245": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "causal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones((batch_size, seq_length, prefix_seq_len), device=device, dtype=causal_mask.dtype), causal_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_95": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_110": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_like_1615": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_255": {
                "*size": {
                    "value": "(batch_size, seq_length, prefix_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "causal_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/modeling/sinusoidal_positional_embeddings.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_embd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_24": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_positions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_25": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, n_embd, 2, dtype=torch.float) * -(math.log(10000.0) / n_embd)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_26": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_27": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.c_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_mid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.c_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_mid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_embd",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codes/prepare.py": {
        "torch": {
            "save_90": {
                "obj": {
                    "value": "toker",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_model(only_toker=True, **names)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f'{save_dir}/tokenizer.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "codes/train.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_117": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_122": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_121": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_401": {
                "obj": {
                    "value": "{k: v.cpu() if v is not None else None for (k, v) in model.state_dict().items() if all((PARAM not in k for PARAM in SKIP_SAVED_PARAMS))}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "f": {
                    "value": "join(output_dir, f'epoch-{epoch}.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__328": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_375": {
                "obj": {
                    "value": "{k: v.cpu() if v is not None else None for (k, v) in model.state_dict().items() if all((PARAM not in k for PARAM in SKIP_SAVED_PARAMS))}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "f": {
                    "value": "join(output_dir, f'{global_step}.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/building_utils.py": {
        "torch": {
            "load_190": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_242": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model(encoder=encoder, decoder=decoder, toker=toker, **config)",
                            "Call"
                        ],
                        [
                            "Model(config)",
                            "Call"
                        ],
                        [
                            "Model(config)",
                            "Call"
                        ],
                        [
                            "model.transformer",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codes/utils/distributed.py": {
        "torch": {}
    },
    "codes/utils/eval_utils.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_47": {
                "input": {
                    "value": "loss_sample",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/utils/optimization.py": {
        "torch": {
            "LambdaLR_44": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_69": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_98": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_132": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_167": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_216": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_492": {
                "input": {
                    "value": "r_factor.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c_factor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_334": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_336": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_526": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_528": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_531": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}