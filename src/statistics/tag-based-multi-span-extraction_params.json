{
    "analysis/analysis_num_tokens_and_occurrences.py": {
        "torch": {}
    },
    "src/data/dataset_readers/answer_field_generators/answer_field_generator.py": {
        "torch": {}
    },
    "src/data/fields/labels_field.py": {
        "torch": {}
    },
    "src/models/multi_head_model.py": {
        "torch": {
            "ModuleDict_38": {
                "variable": {
                    "value": "self._heads",
                    "possible_values": []
                },
                "modules": {
                    "value": "heads",
                    "possible_values": []
                }
            },
            "log_softmax_160": {
                "variable": {
                    "value": "answer_ability_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_ability_logits",
                    "possible_values": [
                        [
                            "self._head_predictor(torch.cat([passage_summary_vector, question_summary_vector], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argsort_161": {
                "variable": {
                    "value": "top_answer_abilities",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_ability_log_probs",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(answer_ability_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "top_answer_abilities",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "question_passage_tokens.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoding.shape[:-1]",
                    "possible_values": []
                },
                "device": {
                    "value": "encoding.device",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "all_log_marginal_likelihoods",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_marginal_likelihood_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "[passage_summary_vector, question_summary_vector]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "input": {
                    "value": "answer_ability_logits",
                    "possible_values": [
                        [
                            "self._head_predictor(torch.cat([passage_summary_vector, question_summary_vector], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/heads/arithmetic_head.py": {
        "torch": {
            "Embedding_25": {
                "variable": {
                    "value": "self._special_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self._num_special_numbers",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "special_embedding_dim",
                    "possible_values": []
                }
            },
            "gather_36": {
                "variable": {
                    "value": "encoded_numbers",
                    "possible_values": []
                },
                "input": {
                    "value": "token_representations",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_number_indices.unsqueeze(-1).expand(-1, -1, token_representations.size(-1))",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "encoded_numbers",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_numbers, passage_summary_vector.unsqueeze(1).repeat(1, encoded_numbers.size(1), 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_softmax_52": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self._output_layer(encoded_numbers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_56": {
                "variable": {
                    "value": "best_signs_for_numbers",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_85": {
                "variable": {
                    "value": "log_likelihood_for_number_signs",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "gold_add_sub_signs",
                    "possible_values": [
                        [
                            "answer_as_expressions.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "encoded_numbers",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[special_numbers, encoded_numbers]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "answer_as_expressions",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[answer_as_expressions_extra, answer_as_expressions]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(number_indices.shape[0], self._num_special_numbers)",
                    "possible_values": []
                },
                "device": {
                    "value": "number_indices.device",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "number_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, number_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "arange_42": {
                "start": {
                    "value": "self._num_special_numbers",
                    "possible_values": []
                },
                "device": {
                    "value": "number_indices.device",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/heads/count_head.py": {
        "torch": {
            "log_softmax_24": {
                "variable": {
                    "value": "log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self._output_layer(passage_summary_vector)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_28": {
                "variable": {
                    "value": "best_count_number",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_50": {
                "variable": {
                    "value": "log_likelihood_for_counts",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_counts",
                    "possible_values": [
                        [
                            "replace_masked_values(answer_as_counts, gold_count_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/heads/head.py": {
        "torch": {}
    },
    "src/modules/heads/multi_span_head.py": {
        "torch": {
            "zeros_102": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_wordpieces, seq_len)",
                    "possible_values": []
                },
                "device": {
                    "value": "wordpiece_indices.device",
                    "possible_values": []
                }
            },
            "scatter_102": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "wordpiece_indices",
                    "possible_values": [
                        [
                            "replace_masked_values(wordpiece_indices, wordpiece_mask, 0).long()",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "torch.ones(wordpiece_indices.shape, device=wordpiece_indices.device).long()",
                    "possible_values": []
                }
            },
            "gather_238": {
                "variable": {
                    "value": "log_likelihoods",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_log_probs",
                    "possible_values": [
                        [
                            "log_probs.unsqueeze(1).expand(-1, bio_seqs.size()[1], -1, -1)",
                            "Call"
                        ],
                        [
                            "log_probs.unsqueeze(1).expand(-1, bio_seqs.size()[1], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "index": {
                    "value": "bio_seqs.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "squeeze_238": {
                "variable": {
                    "value": "log_likelihoods",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_266": {
                "variable": {
                    "value": "log_likelihoods",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_log_probs",
                    "possible_values": [
                        [
                            "log_probs.unsqueeze(1).expand(-1, bio_seqs.size()[1], -1, -1)",
                            "Call"
                        ],
                        [
                            "log_probs.unsqueeze(1).expand(-1, bio_seqs.size()[1], -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "index": {
                    "value": "bio_seqs.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "squeeze_266": {
                "variable": {
                    "value": "log_likelihoods",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "self._transitions",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_tags",
                    "possible_values": [
                        [
                            "len(labels)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_tags",
                    "possible_values": [
                        [
                            "len(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_51": {
                "variable": {
                    "value": "self._constraint_mask",
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "top_two_masked_predicted_tags",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "(correct_most_likely_predictions, (full_bio * not_added.unsqueeze(-1)).unsqueeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_88": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self._output_layer(token_representations)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "wordpiece_indices.shape",
                    "possible_values": []
                },
                "device": {
                    "value": "wordpiece_indices.device",
                    "possible_values": []
                }
            },
            "argmax_159": {
                "variable": {
                    "value": "masked_predicted_tags",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_log_probs",
                    "possible_values": [
                        [
                            "log_probs[masked_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_172": {
                "variable": {
                    "value": "max_start_index",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_log_probs[:, self._span_start_label]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "bio_seqs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(answer_as_list_of_bios, generated_list_of_bios * (1 - is_pregenerated_answer_format_mask))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "bio_seqs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(answer_as_list_of_bios, (full_bio * (1 - is_pregenerated_answer_format_mask).unsqueeze(-1)).unsqueeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/heads/passage_span_head.py": {
        "torch": {}
    },
    "src/modules/heads/question_span_head.py": {
        "torch": {
            "cat_24": {
                "tensors": {
                    "value": "[question_tokens, passage_vector.unsqueeze(1).repeat(1, question_tokens.size(1), 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/heads/single_span_head.py": {
        "torch": {
            "triu_135": {
                "variable": {
                    "value": "span_log_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((passage_length, passage_length), device=device)",
                    "possible_values": []
                }
            },
            "log_135": {
                "variable": {
                    "value": "span_log_mask",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_68": {
                "variable": {
                    "value": "log_likelihood_for_span_starts",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "possible_values": [
                        [
                            "masked_log_softmax(start_logits, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_span_starts",
                    "possible_values": [
                        [
                            "replace_masked_values(gold_span_starts, gold_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_70": {
                "variable": {
                    "value": "log_likelihood_for_span_ends",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "possible_values": [
                        [
                            "masked_log_softmax(end_logits, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "clamped_gold_span_ends",
                    "possible_values": [
                        [
                            "replace_masked_values(gold_span_ends, gold_span_mask, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "[span_start_indices, span_end_indices]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_135": {
                "*size": {
                    "value": "(passage_length, passage_length)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "span_start_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/utils/viterbi_decoding.py": {
        "torch": {
            "Tensor_195": {
                "variable": {
                    "value": "transitions",
                    "possible_values": []
                }
            },
            "Tensor_212": {
                "variable": {
                    "value": "tag_sequence",
                    "possible_values": []
                }
            },
            "ones_179": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "*logits.shape[:2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "sequence_length",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_mask",
                    "possible_values": []
                }
            },
            "index_select_217": {
                "variable": {
                    "value": "prediction",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "possible_values": [
                        [
                            "torch.index_select(prediction, 0, mask_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "mask_indices",
                    "possible_values": [
                        [
                            "prediction_mask.nonzero().squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/generate_submission_predictions.py": {
        "torch": {}
    }
}