{
    "src/layers.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out, dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.b_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.W_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out, dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.b_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_67": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.W_mean.detach().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.W_logvar.detach().exp().sqrt().view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_74": {
                "variable": {
                    "value": "mu_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(x.shape[0], 1), x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_75": {
                "variable": {
                    "value": "var_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samp, self.W_mean.view(-1).shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_97": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.W_mean_prior.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.W_var_prior.sqrt().view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_108": {
                "variable": {
                    "value": "(wp_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wp) ** 2, 2) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_110": {
                "variable": {
                    "value": "ww_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_111": {
                "variable": {
                    "value": "(ww_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((Wq.view(-1, 1) - Wq.view(1, -1)) ** 2 + 1e-08) + 10000000000.0 * torch.eye(n, n)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dim_out, self.dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.W_in_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.W_out_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(x.shape[0], 1), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_158": {
                "variable": {
                    "value": "mu_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(x.shape[0], 1), x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_196": {
                "variable": {
                    "value": "self.bernoulli",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out, dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_200": {
                "variable": {
                    "value": "self.W_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out, dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.b_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_203": {
                "variable": {
                    "value": "self.b_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.q_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.q_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.f_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim_in, flow_dim_h) for flow in range(n_flows_q)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.g_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(flow_dim_h, dim_in) for flow in range(n_flows_q)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.k_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(flow_dim_h, dim_in) for flow in range(n_flows_q)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(dim_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "self.f_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim_in, flow_dim_h) for flow in range(n_flows_r)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_220": {
                "variable": {
                    "value": "self.g_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(flow_dim_h, dim_in) for flow in range(n_flows_r)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_221": {
                "variable": {
                    "value": "self.k_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(flow_dim_h, dim_in) for flow in range(n_flows_r)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "logdets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_306": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(self.c.view(1, -1), Wz_mean.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_308": {
                "variable": {
                    "value": "mu_tilde",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(self.b1.view(-1, 1), a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_309": {
                "variable": {
                    "value": "logsig2_tilde",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(self.b2.view(-1, 1), a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_346": {
                "variable": {
                    "value": "Mh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X * Z_Tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_377": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1 / self.dim_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_388": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samp",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_404": {
                "variable": {
                    "value": "(wp_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wp) ** 2, 2) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_406": {
                "variable": {
                    "value": "ww_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_407": {
                "variable": {
                    "value": "(ww_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((Wq.view(-1, 1) - Wq.view(1, -1)) ** 2 + 1e-08) + 10000000000.0 * torch.eye(n, n)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_412": {
                "variable": {
                    "value": "Wpb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samp, Wqb.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_418": {
                "variable": {
                    "value": "(wp_distb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum((Wqb.unsqueeze(1) - Wpb) ** 2, 2) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_420": {
                "variable": {
                    "value": "ww_distb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((Wqb.unsqueeze(1) - Wqb) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_421": {
                "variable": {
                    "value": "(ww_distb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_distb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((Wqb.unsqueeze(1) - Wqb) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((Wqb.view(-1, 1) - Wqb.view(1, -1)) ** 2 + 1e-08) + 10000000000.0 * torch.eye(nb, nb)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_439": {
                "variable": {
                    "value": "(wp_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt((Wq.view(-1, 1) - Wp.view(1, -1)) ** 2 + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_442": {
                "variable": {
                    "value": "(ww_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.sum((Wq.unsqueeze(1) - Wq) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((Wq.view(-1, 1) - Wq.view(1, -1)) ** 2 + 1e-08) + 10000000000.0 * torch.eye(n, n)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_450": {
                "variable": {
                    "value": "Wpb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Wqb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_455": {
                "variable": {
                    "value": "(wp_distb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt((Wqb.view(-1, 1) - Wpb.view(1, -1)) ** 2 + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_458": {
                "variable": {
                    "value": "(ww_distb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_distb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((Wqb.unsqueeze(1) - Wqb) ** 2, 2) + 1e-08)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((Wqb.view(-1, 1) - Wqb.view(1, -1)) ** 2 + 1e-08) + 10000000000.0 * torch.eye(nb, nb)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "[sample_MVG(self.W_mean.transpose(0, 1), torch.diag(self.W_in_logvar.exp()), self.W_out_logvar.exp()).view(-1) for _ in range(n_samp)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mm_165": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(x.shape[0], 1), x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.diag(u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_258": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f[flow](m * z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_261": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k[flow](h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_272": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samp, self.dim_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_332": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "Wz_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "z_Tf * self.W_mean",
                            "BinOp"
                        ],
                        [
                            "z_Tf * self.W_mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "Wz_logvar.exp().sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_335": {
                "tensors": {
                    "value": "W_samps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_351": {
                "variable": {
                    "value": "W_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_352": {
                "variable": {
                    "value": "b_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_356": {
                "variable": {
                    "value": "Vh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "W_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.W_logvar.exp(), 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(self.b_logvar.exp(), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_357": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Vh.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_384": {
                "modules": {
                    "value": "[nn.Linear(arch[i], arch[i + 1]) for i in range(len(arch) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_473": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(x.shape[0], 1), x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sample_from_G(1, self.G_W).view(self.dim_out, self.dim_in)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sample_from_G(1, self.G_b).view(self.dim_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_108": {
                "input": {
                    "value": "torch.sum((Wq.unsqueeze(1) - Wp) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "torch.log(wp_dist / (ww_dist + 1e-08) + 1e-08) + torch.log(torch.tensor(m / (n - 1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_203": {},
            "Tensor_206": {},
            "Tensor_207": {},
            "Tensor_215": {},
            "Tensor_216": {},
            "Tensor_217": {},
            "sum_264": {
                "input": {
                    "value": "(1 - m) * torch.log(sigma)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_299": {
                "input": {
                    "value": "Wz_logvar",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.W_logvar",
                            "Attribute"
                        ],
                        [
                            "self.W_logvar",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_300": {
                "input": {
                    "value": "self.b_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_306": {
                "input": {
                    "value": "self.c.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Wz_mean.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_308": {
                "input": {
                    "value": "self.b1.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(torch.mm(self.c.view(1, -1), Wz_mean.transpose(0, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_309": {
                "input": {
                    "value": "self.b2.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(torch.mm(self.c.view(1, -1), Wz_mean.transpose(0, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_310": {
                "input": {
                    "value": "torch.log(torch.tensor(2 * pi)) + logsig2_tilde + (z_Tb - mu_tilde) ** 2 / torch.exp(logsig2_tilde)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_315": {
                "input": {
                    "value": "torch.log(torch.tensor(2 * pi)) + self.q_logvar + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "input": {
                    "value": "torch.sum((Wq.unsqueeze(1) - Wp) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_409": {
                "input": {
                    "value": "torch.log(wp_dist / (ww_dist + 1e-08) + 1e-08) + torch.log(torch.tensor(m / (n - 1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_418": {
                "input": {
                    "value": "torch.sum((Wqb.unsqueeze(1) - Wpb) ** 2, 2) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_423": {
                "input": {
                    "value": "torch.log(wp_distb / (ww_distb + 1e-08) + 1e-08) + torch.log(torch.tensor(mb / (nb - 1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_439": {
                "input": {
                    "value": "(Wq.view(-1, 1) - Wp.view(1, -1)) ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_441": {
                "input": {
                    "value": "(Wq.view(-1, 1) - Wq.view(1, -1)) ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_445": {
                "input": {
                    "value": "torch.log(wp_dist / (ww_dist + 1e-08) + 1e-08) + torch.log(torch.tensor(m / (n - 1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_455": {
                "input": {
                    "value": "(Wqb.view(-1, 1) - Wpb.view(1, -1)) ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_457": {
                "input": {
                    "value": "(Wqb.view(-1, 1) - Wqb.view(1, -1)) ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_460": {
                "input": {
                    "value": "torch.log(wp_distb / (ww_distb + 1e-08) + 1e-08) + torch.log(torch.tensor(mb / (nb - 1)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "(Wq.unsqueeze(1) - Wq) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "in_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "flow_dim_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "in_features": {
                    "value": "arch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "arch[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_406": {
                "input": {
                    "value": "(Wq.unsqueeze(1) - Wq) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_420": {
                "input": {
                    "value": "(Wqb.unsqueeze(1) - Wqb) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_441": {
                "n": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wq.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_457": {
                "n": {
                    "value": "nb",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Wqb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wqb.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "nb",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Wqb.shape[0]",
                            "Subscript"
                        ],
                        [
                            "Wqb.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "(Wq.unsqueeze(1) - Wp) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "torch.tensor(m / (n - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_165": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.W_in_logvar.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_184": {
                "input": {
                    "value": "self.W_out_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_264": {
                "input": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(k[flow](h))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_273": {
                "input": {
                    "value": "torch.exp(self.q_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_358": {
                "input": {
                    "value": "Vh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(X.pow(2), W_var, b_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_404": {
                "input": {
                    "value": "(Wq.unsqueeze(1) - Wp) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_409": {
                "input": {
                    "value": "torch.tensor(m / (n - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_418": {
                "input": {
                    "value": "(Wqb.unsqueeze(1) - Wpb) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_423": {
                "input": {
                    "value": "torch.tensor(mb / (nb - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_445": {
                "input": {
                    "value": "torch.tensor(m / (n - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_460": {
                "input": {
                    "value": "torch.tensor(mb / (nb - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "m / (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "self.W_in_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_273": {
                "input": {
                    "value": "self.q_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_310": {
                "input": {
                    "value": "torch.tensor(2 * pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_310": {
                "input": {
                    "value": "logsig2_tilde",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.mm(self.b2.view(-1, 1), a))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_315": {
                "input": {
                    "value": "torch.tensor(2 * pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "data": {
                    "value": "m / (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "data": {
                    "value": "mb / (nb - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "data": {
                    "value": "m / (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_460": {
                "data": {
                    "value": "mb / (nb - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_150": {
                "input": {
                    "value": "self.W_in_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "self.W_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "data": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "data": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_180": {
                "input": {
                    "value": "self.W_out_logvar.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "symeig_24": {
                "variable": {
                    "value": "(L, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cholesky(U + 0.001 * torch.diag(torch.ones(U.shape[0])))",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(Lu.shape[0], Lv.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cholesky_48": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U + 0.001 * torch.diag(torch.ones(U.shape[0]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_50": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_51": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sort(np.random.uniform(-5, 5, num_train)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sort(np.random.uniform(-5, 5, num_val)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_val).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_neg, y_pos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_val_neg, y_val_pos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "std_84": {
                "variable": {
                    "value": "y_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((y_neg, y_pos))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_13": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_true_neg, y_true_pos)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_8": {
                "input": {
                    "value": "(var1 + (mean1 - mean2) ** 2) / var2 + torch.log(var2) - torch.log(var1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_53": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cholesky(U + 0.001 * torch.diag(torch.ones(U.shape[0])))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "E",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn((Lu.shape[0], Lv.shape[0]))",
                            "Call"
                        ],
                        [
                            "torch.randn(M.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_74": {
                "*size": {
                    "value": "x[x < 0].view(-1, 1).size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_76": {
                "*size": {
                    "value": "x[x >= 0].view(-1, 1).size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_79": {
                "input": {
                    "value": "period * x_val[x_val < 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "x_val[x_val < 0].view(-1, 1).size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_81": {
                "input": {
                    "value": "4 * period * x_val[x_val >= 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_82": {
                "*size": {
                    "value": "x_val[x_val >= 0].view(-1, 1).size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_87": {
                "input": {
                    "value": "period * x_true[x_true < 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_88": {
                "input": {
                    "value": "4 * period * x_true[x_true >= 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_40": {
                "input": {
                    "value": "torch.sqrt(Lu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_48": {
                "input": {
                    "value": "torch.ones(U.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_8": {
                "input": {
                    "value": "var2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "Lu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "U.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_73": {
                "input": {
                    "value": "period * x[x < 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_75": {
                "input": {
                    "value": "4 * period * x[x >= 0] + phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/variational_bnns.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[sigma_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.fc_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer(self.dim_hidden, self.dim_hidden) for _ in range(self.n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.bnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "elbo",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_epochs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_78": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sigma_y ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "(y_observed - y_pred).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "(y_observed - y_pred).pow(2) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}