{
    "travelgan.py": {
        "tensorflow": {
            "conv2d_7": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, nfilt, name, use_bias=use_bias, d=d, s=s, k=k)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "conv_t(x, nfilt, name, s=s, k=k, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(x, use_dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, encoderx], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfilt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.nfilt * 1",
                            "BinOp"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ],
                        [
                            "basefilt",
                            "variable"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ],
                        [
                            "basefilt",
                            "variable"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "[d, d]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TwoGANs'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, nfilt, name, use_bias=use_bias, d=d, s=s, k=k)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "conv_t(x, nfilt, name, s=s, k=k, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(x, use_dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, encoderx], 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfilt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.nfilt * 1",
                            "BinOp"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ],
                        [
                            "basefilt",
                            "variable"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ],
                        [
                            "basefilt",
                            "variable"
                        ],
                        [
                            "min(2 * nfilt, maxfilt)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'TwoGANs'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, nfilt, name, use_bias=use_bias, d=d, s=s, k=k)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "conv_t(x, nfilt, name, s=s, k=k, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(x, use_dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, name='batch_norm_{}'.format(name), training=is_training)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, encoderx], 3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "use_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, encoderx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_47": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_with_default_97": {
                "variable": {
                    "value": "self.xb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx1.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x1ph')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, args.imdim, args.imdim, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "xb1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_98": {
                "variable": {
                    "value": "self.xb2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx2.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x2ph')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, args.imdim, args.imdim, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "xb2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_147": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "restore_folder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "import_meta_graph_148": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'{}.meta'.format(ckpt.model_checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "self.loss_G1_discr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adversarial_loss(self.D1_probs_G, tf.ones_like(self.D1_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "variable": {
                    "value": "self.loss_G2_discr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "adversarial_loss(self.D2_probs_G, tf.ones_like(self.D2_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "self.loss_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_254": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_257": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_51": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "diffmargin - tf.reduce_sum(logits, axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.datasetx1ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "datasetx1ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.datasetx2ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "x2.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "datasetx2ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_76": {
                "variable": {
                    "value": "datasetx1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_76": {
                "variable": {
                    "value": "datasetx1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_77": {
                "variable": {
                    "value": "datasetx2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_77": {
                "variable": {
                    "value": "datasetx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_85": {
                "variable": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.random_flip_left_right(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx1.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x1ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_88": {
                "variable": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.image.random_flip_left_right(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx2.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x2ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_91": {
                "variable": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.random_crop(img, [cropdim, cropdim, 3])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx1.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x1ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x1ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_92": {
                "variable": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda img: tf.random_crop(img, [cropdim, cropdim, 3])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iteratorx2.get_next()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.image.random_flip_left_right(img), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda img: tf.random_crop(img, [cropdim, cropdim, 3]), x2ph)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, args.imdim, args.imdim, 3], name='x2ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "x1ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.imdim, args.imdim, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "x2ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.imdim, args.imdim, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_112": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_113": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_169": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_Dreal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_172": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_Dfake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_209": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nameop(self.loss_G1_discr, 'loss_G1_discr')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_210": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nameop(self.loss_G2_discr, 'loss_G2_discr')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_238": {
                "variable": {
                    "value": "self.loss_S1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_239": {
                "variable": {
                    "value": "self.loss_S2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "self.loss_S3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses_S3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "flatten_341": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer_name), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'e{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv_t(iinput, encoderinput, nfilt, 'd{}'.format(layer), is_training, activation=tf.nn.relu, batch_norm=batch_normalization)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_343": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer_name), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'e{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv_t(iinput, encoderinput, nfilt, 'd{}'.format(layer), is_training, activation=tf.nn.relu, batch_norm=batch_normalization)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.args.siamese_latentdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_436": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer_name), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'e{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv_t(iinput, encoderinput, nfilt, 'd{}'.format(layer), is_training, activation=tf.nn.relu, batch_norm=batch_normalization)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_437": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer_name), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'e{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "unet_conv_t(iinput, encoderinput, nfilt, 'd{}'.format(layer), is_training, activation=tf.nn.relu, batch_norm=batch_normalization)",
                            "Call"
                        ],
                        [
                            "unet_conv(iinput, nfilt, 'h{}'.format(layer), is_training, activation=lrelu, batch_norm=batch_normalization if layer != 1 else False)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_8": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_13": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GPUOptions_115": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "limit_gpu_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConfigProto_116": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=limit_gpu_fraction)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_117": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_119": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "input_tensor": {
                    "value": "adversarial_loss(self.D1_probs_z, tf.ones_like(self.D1_probs_z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "input_tensor": {
                    "value": "adversarial_loss(self.D2_probs_z, tf.ones_like(self.D2_probs_z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "input_tensor": {
                    "value": "adversarial_loss(self.D1_probs_G, tf.zeros_like(self.D1_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "adversarial_loss(self.D2_probs_G, tf.zeros_like(self.D2_probs_G))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_241": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nameop(self.loss_S1, 'loss_S1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_242": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nameop(self.loss_S2, 'loss_S2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_243": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "nameop(self.loss_S3, 'loss_S3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_284": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_207": {
                "input": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_208": {
                "input": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_276": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_flip_left_right_85": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_88": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_crop_91": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[cropdim, cropdim, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_92": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[cropdim, cropdim, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "self.D1_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "input": {
                    "value": "self.D2_probs_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "self.D1_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "input": {
                    "value": "self.D2_probs_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_223": {
                "params": {
                    "value": "self.S1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(order)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_224": {
                "params": {
                    "value": "self.S2_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(order)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_225": {
                "params": {
                    "value": "self.S1_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(order)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_226": {
                "params": {
                    "value": "self.S2_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(order)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_228": {
                "input_tensor": {
                    "value": "siamese_lossfn(dists_withinx1 ** 2, diff=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "input_tensor": {
                    "value": "siamese_lossfn(dists_withinx2 ** 2, diff=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "(dists_withinx1 - dists_withinG1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "(dists_withinx2 - dists_withinG2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "input_tensor": {
                    "value": "tf.reduce_sum(-(tf.nn.l2_normalize(dists_withinx1, axis=[-1]) * tf.nn.l2_normalize(dists_withinG1, axis=[-1])), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "input_tensor": {
                    "value": "tf.reduce_sum(-(tf.nn.l2_normalize(dists_withinx2, axis=[-1]) * tf.nn.l2_normalize(dists_withinG2, axis=[-1])), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_437": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_234": {
                "input_tensor": {
                    "value": "-(tf.nn.l2_normalize(dists_withinx1, axis=[-1]) * tf.nn.l2_normalize(dists_withinG1, axis=[-1]))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_235": {
                "input_tensor": {
                    "value": "-(tf.nn.l2_normalize(dists_withinx2, axis=[-1]) * tf.nn.l2_normalize(dists_withinG2, axis=[-1]))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_normalize_234": {
                "x": {
                    "value": "dists_withinG1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.S1_G - tf.gather(self.S1_G, other)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_235": {
                "x": {
                    "value": "dists_withinG2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.S2_G - tf.gather(self.S2_G, other)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "identity_24": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(op, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_21": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}