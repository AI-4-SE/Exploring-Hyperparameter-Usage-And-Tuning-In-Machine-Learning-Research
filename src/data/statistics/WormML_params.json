{
    "dsnt/dsnt.py": {
        "tensorflow": {
            "tile_27": {
                "variable": {
                    "value": "dsnt_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "[[(2 * tf.range(1, width + 1) - (width + 1)) / width]]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_count, height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "dsnt_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "dsnt_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile([[(2 * tf.range(1, width + 1) - (width + 1)) / width]], [batch_count, height, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(dsnt_x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_29": {
                "variable": {
                    "value": "dsnt_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "[[(2 * tf.range(1, height + 1) - (height + 1)) / height]]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_count, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "dsnt_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(dsnt_y, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "outputs_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(norm_heatmap, dsnt_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "variable": {
                    "value": "outputs_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(norm_heatmap, dsnt_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "coords_zipped",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs_x, outputs_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, tf.shape(inputs)[:3])",
                            "Call"
                        ],
                        [
                            "_softmax2d(inputs, axes=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.abs(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(inputs)[:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "kl_values",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "unsummed_kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p * (tf.log(p + eps) - tf.log(q + eps))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_101": {
                "variable": {
                    "value": "max_axis",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "target_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "target - max_axis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "normalize",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_exp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(target - max_axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "Name",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "square_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_152": {
                "variable": {
                    "value": "(_, heatmaps_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[centres_in, tf.constant([])]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([None, 2]), tf.TensorShape([None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "heatmaps_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heatmaps_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(heatmaps_out, [-1, height, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "divergences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_js_2d(heatmaps, gauss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "new_heatmap",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_make_gaussian([height, width], curr, fwhm)",
                            "Call"
                        ],
                        [
                            "tf.reshape(new_heatmap, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "heatmaps",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[heatmaps, new_heatmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_22": {
                "input": {
                    "value": "norm_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_normalise_heatmap(inputs, method)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "norm_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_normalise_heatmap(inputs, method)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_24": {
                "input": {
                    "value": "norm_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_normalise_heatmap(inputs, method)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_30": {
                "a": {
                    "value": "dsnt_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile([[(2 * tf.range(1, height + 1) - (height + 1)) / height]], [batch_count, width, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.transpose(dsnt_y, perm=[0, 2, 1]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "x": {
                    "value": "norm_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_normalise_heatmap(inputs, method)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dsnt_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile([[(2 * tf.range(1, width + 1) - (width + 1)) / width]], [batch_count, height, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(dsnt_x, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "norm_heatmap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_normalise_heatmap(inputs, method)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dsnt_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile([[(2 * tf.range(1, height + 1) - (height + 1)) / height]], [batch_count, width, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.transpose(dsnt_y, perm=[0, 2, 1]), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_65": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, square_size, 1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(tf.reduce_sum(x, [1, 2]), [2, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_71": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, tf.shape(inputs)[:3])",
                            "Call"
                        ],
                        [
                            "_softmax2d(inputs, axes=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.abs(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_119": {
                "input_tensor": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_125": {
                "x": {
                    "value": "-4 * tf.log(2.0) * ((x - x0) ** 2 + (y - y0) ** 2) / fwhm ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "unnorm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(-4 * tf.log(2.0) * ((x - x0) ** 2 + (y - y0) ** 2) / fwhm ** 2)[:size[0], :size[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "greater_140": {
                "x": {
                    "value": "tf.shape(centres)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "heatmaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([heatmaps, new_heatmap], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_62": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, tf.shape(inputs)[:3])",
                            "Call"
                        ],
                        [
                            "_softmax2d(inputs, axes=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.abs(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "tf.reduce_sum(x, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, tf.shape(inputs)[:3])",
                            "Call"
                        ],
                        [
                            "_softmax2d(inputs, axes=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.abs(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_85": {
                "x": {
                    "value": "q + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_117": {
                "x": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_154": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, square_size, 1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, tf.shape(inputs)[:3])",
                            "Call"
                        ],
                        [
                            "_softmax2d(inputs, axes=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.abs(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(inputs)",
                            "Call"
                        ],
                        [
                            "normalise(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "centres",
                    "type": "Name",
                    "possible_values": [
                        [
                            "centres[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorShape_155": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_125": {
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_29": {}
        }
    },
    "dsnt/dsnt_snt.py": {
        "tensorflow": {}
    },
    "dsnt/input_fn.py": {
        "tensorflow": {
            "read_file_18": {
                "variable": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "decode_png_21": {
                "variable": {
                    "value": "image_decoded",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_24": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image_decoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.decode_png(image_string, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_27": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(label, [2])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.stack([labelh, labelt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [4])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_brightness_64": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_67": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_122": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_42": {
                "variable": {
                    "value": "H_int",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "W_int",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_47": {
                "variable": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[x, y, 0]]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1.0]",
                            "List"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ],
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_52": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_up_down_53": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "rot90_54": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_57": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(label, [2])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.stack([labelh, labelt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_63": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(label, [2])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.stack([labelh, labelt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_84": {
                "variable": {
                    "value": "H_int",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "W_int",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_90": {
                "variable": {
                    "value": "delta1",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[xh, yh, 0]]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1.0]",
                            "List"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ],
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "SparseTensor_94": {
                "variable": {
                    "value": "delta2",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[xt, yt, 0]]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[2.0]",
                            "List"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ],
                        [
                            "[H_int, W_int, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_99": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_100": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_up_down_101": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "rot90_102": {
                "variable": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([image, mask], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_up_down(concat)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(concat, tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.random_uniform(shape=[], minval=0, maxval=4, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_108": {
                "variable": {
                    "value": "labelh",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_109": {
                "variable": {
                    "value": "labelt",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_114": {
                "variable": {
                    "value": "labelh",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labelh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(labelh, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(labelh, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_115": {
                "variable": {
                    "value": "labelt",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labelt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 2.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(labelt, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(labelt, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[labelh, labelt]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(label, [2])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.stack([labelh, labelt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_153": {
                "seed": {
                    "value": "params.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.shape(image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "W * label[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_57": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta) + mask",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta1) + mask + tf.sparse_tensor_to_dense(delta2)",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_59": {
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(label, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(label, [2])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.stack([labelh, labelt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [4])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "tf.shape(image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "W * label[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "W * label[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_108": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta) + mask",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta1) + mask + tf.sparse_tensor_to_dense(delta2)",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_109": {
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta) + mask",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_to_dense(delta1) + mask + tf.sparse_tensor_to_dense(delta2)",
                            "BinOp"
                        ],
                        [
                            "concat[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "labelh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(labelh, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(labelh, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "labelt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 2.0))",
                            "Call"
                        ],
                        [
                            "tf.cast(labelt, tf.float32) / H",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(labelt, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_174": {
                "value": {
                    "value": "labels_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(labels_df.loc[tr_folder_names])[:, label_idx_low:label_idx_hi]",
                            "Subscript"
                        ],
                        [
                            "np.array(labels_df.loc[tr_folder_names])[:, label_idx_low:label_idx_hi]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_197": {
                "value": {
                    "value": "labels_tst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(labels_df.loc[tst_folder_names])[:, label_idx_low:label_idx_hi]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_40": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(image_decoded, tf.float32)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "concat[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dsnt/model_fn.py": {
        "tensorflow": {
            "relu_17": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_27": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_41": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_42": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_65": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_87": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_101": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_108": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_109": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=64, kernel_shape=3, rate=1, padding='SAME', name='conv1_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=128, kernel_shape=3, rate=1, padding='SAME', name='conv2_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=256, kernel_shape=3, rate=1, padding='SAME', name='conv3_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv4_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_1')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_2')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "snt.Conv2D(output_channels=512, kernel_shape=3, rate=1, padding='SAME', name='conv5_3')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_squared_error_156": {
                "variable": {
                    "value": "loss_1",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([preds_h, preds_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "group_234": {
                "variable": {
                    "value": "update_metrics_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[op for (_, op) in metrics.values()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_collection_236": {
                "variable": {
                    "value": "metric_variables",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOCAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "metrics",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variables_initializer_237": {
                "variable": {
                    "value": "metrics_init_op",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "metric_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOCAL_VARIABLES, scope='metrics')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_243": {
                "variable": {
                    "value": "model_spec[variable_init_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_248": {
                "variable": {
                    "value": "model_spec[summary_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_168": {
                "variable": {
                    "value": "headinputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_169": {
                "variable": {
                    "value": "headpreds",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([preds_h, preds_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_170": {
                "variable": {
                    "value": "tailinputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_171": {
                "variable": {
                    "value": "tailpreds",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([preds_h, preds_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_181": {
                "variable": {
                    "value": "head_predictions0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(headinputs - headpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha0 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_182": {
                "variable": {
                    "value": "tail_predictions0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(tailinputs - tailpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha0 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_183": {
                "variable": {
                    "value": "head_predictions1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(headinputs - headpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha1 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_184": {
                "variable": {
                    "value": "tail_predictions1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(tailinputs - tailpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha1 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_185": {
                "variable": {
                    "value": "head_predictions2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(headinputs - headpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha2 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_186": {
                "variable": {
                    "value": "tail_predictions2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(tailinputs - tailpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha2 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_187": {
                "variable": {
                    "value": "head_predictions3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(headinputs - headpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha3 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_188": {
                "variable": {
                    "value": "tail_predictions3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(tailinputs - tailpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha3 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_189": {
                "variable": {
                    "value": "head_predictions4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(headinputs - headpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha4 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_190": {
                "variable": {
                    "value": "tail_predictions4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.norm(tailinputs - tailpreds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.alpha4 * 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_192": {
                "variable": {
                    "value": "head_predictions0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "head_predictions0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th0)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions0, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_193": {
                "variable": {
                    "value": "head_predictions1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "head_predictions1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th1)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions1, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_194": {
                "variable": {
                    "value": "head_predictions2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "head_predictions2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th2)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions2, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_195": {
                "variable": {
                    "value": "head_predictions3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "head_predictions3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th3)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions3, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_196": {
                "variable": {
                    "value": "head_predictions4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "head_predictions4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th4)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions4, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_198": {
                "variable": {
                    "value": "tail_predictions0",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tail_predictions0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions0, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_199": {
                "variable": {
                    "value": "tail_predictions1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tail_predictions1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions1, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_200": {
                "variable": {
                    "value": "tail_predictions2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tail_predictions2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions2, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_201": {
                "variable": {
                    "value": "tail_predictions3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tail_predictions3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions3, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_202": {
                "variable": {
                    "value": "tail_predictions4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tail_predictions4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th4)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions4, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_204": {
                "variable": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "head_predictions0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th0)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions0, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_209": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_240": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_1 + loss_2 + loss_3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_152": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[preds_h, preds_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([preds_h, preds_t], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_181": {
                "tensor": {
                    "value": "headinputs - headpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_182": {
                "tensor": {
                    "value": "tailinputs - tailpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_183": {
                "tensor": {
                    "value": "headinputs - headpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_184": {
                "tensor": {
                    "value": "tailinputs - tailpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_185": {
                "tensor": {
                    "value": "headinputs - headpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_186": {
                "tensor": {
                    "value": "tailinputs - tailpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_187": {
                "tensor": {
                    "value": "headinputs - headpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_188": {
                "tensor": {
                    "value": "tailinputs - tailpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_189": {
                "tensor": {
                    "value": "headinputs - headpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_190": {
                "tensor": {
                    "value": "tailinputs - tailpreds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "metrics",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_218": {
                "a": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_1 + loss_2 + loss_3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "accuracy_220": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "head_predictions0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th0)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions0, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_221": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "head_predictions1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th1)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions1, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_222": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "head_predictions2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th2)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions2, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_223": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "head_predictions3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th3)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions3, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_224": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "head_predictions4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(headinputs - headpreds, axis=1), th4)",
                            "Call"
                        ],
                        [
                            "tf.cast(head_predictions4, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_226": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tail_predictions0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions0, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_227": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tail_predictions1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions1, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_228": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tail_predictions2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions2, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_229": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tail_predictions3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions3, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_230": {
                "labels": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(head_predictions0)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tail_predictions4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.less(tf.norm(tailinputs - tailpreds, axis=1), th4)",
                            "Call"
                        ],
                        [
                            "tf.cast(tail_predictions4, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dsnt/training.py": {
        "tensorflow": {
            "get_global_step_25": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_64": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_105": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_87": {
                "variable": {
                    "value": "summ",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=val)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dsnt/wormml_dsnt.py": {
        "tensorflow": {
            "reset_default_graph_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_47": {
                "seed": {
                    "value": "params.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "model_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_78": {
                "variable": {
                    "value": "train_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(model_dir, 'train_summaries')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_79": {
                "variable": {
                    "value": "eval_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(model_dir, 'eval_summaries')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}