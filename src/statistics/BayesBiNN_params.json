{
    "main_cifar10.py": {
        "torch": {
            "device_count_107": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VGGBinaryConnect(in_channels, out_features, eps=1e-05, momentum=args.bnmomentum, batch_affine=args.bn_affine == 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_num)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "VGGBinaryConnect_STE(in_channels, out_features, eps=1e-05, momentum=args.bnmomentum, batch_affine=args.bn_affine == 1)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed + args.experiment_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_173": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_174": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_232": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_cifar100.py": {
        "torch": {
            "device_count_107": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100('./data', train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VGGBinaryConnect(in_channels, out_features, eps=1e-05, momentum=args.bnmomentum, batch_affine=args.bn_affine == 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_num)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "VGGBinaryConnect_STE(in_channels, out_features, eps=1e-05, momentum=args.bnmomentum, batch_affine=args.bn_affine == 1)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed + args.experiment_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_174": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_175": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100('./data', train=True, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR100('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_232": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_mnist.py": {
        "torch": {
            "device_115": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed + args.experiment_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_154": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_155": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_195": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_204": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_permute_mnist_CL.py": {
        "torch": {
            "device_119": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "args.seed + args.experiment_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_158": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_159": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "val_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.MNIST('./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_208": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/function.py": {
        "torch": {
            "where_14": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "x >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.ones_like(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_14": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "input[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_129": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_135": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_142": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_148": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn8(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/models_STE.py": {
        "torch": {
            "Hardtanh_31": {
                "variable": {
                    "value": "self.hardtanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_48": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_98": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_109": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_118": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_162": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_169": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_176": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_179": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_183": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_189": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_196": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_202": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.in_features)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout3(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(x))",
                            "Call"
                        ],
                        [
                            "self.dropout4(x)",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 512 * 4 * 4)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn7(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn8(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.bn9(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_208": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_211": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn8(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/simple_models.py": {
        "torch": {
            "sigmoid_76": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_171": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.input_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.input_size)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_173": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.input_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.input_size)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_size, out_size, bias=bias) for (in_size, out_size) in zip([self.input_size] + hidden_sizes[:-1], hidden_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BinaryLinear(in_size, out_size, bias=bias) for (in_size, out_size) in zip([self.input_size] + hidden_sizes[:-1], hidden_sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "variable": {
                    "value": "self.output_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.output_layer_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(in_size, eps=bn_eps, momentum=bn_momentum, affine=learn_bn) for in_size in hidden_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "variable": {
                    "value": "self.output_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.output_layer_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.output_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(in_size, eps=bn_eps, momentum=bn_momentum, affine=learn_bn) for in_size in hidden_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "variable": {
                    "value": "self.output_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.output_logvar_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_57": {
                "variable": {
                    "value": "self.output_logvar_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.output_logvar_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_131": {
                "variable": {
                    "value": "self.output_logvar_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.15",
                            "Constant"
                        ],
                        [
                            "0.15",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "optimizers/BayesBiNN.py": {
        "torch": {
            "parameters_to_vector_66": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.param_groups[0]['params']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_like_71": {
                "variable": {
                    "value": "mixtures_coeff",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.param_groups[0]['params'])",
                            "Call"
                        ]
                    ]
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "self.state[momentum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.param_groups[0]['params'])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "grad_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "lamda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.state['lamda']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_185": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(loss_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_193": {
                "variable": {
                    "value": "self.state[mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lamda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.state['lamda']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_77": {
                "variable": {
                    "value": "self.state[mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state['lamda']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "self.state[mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state['lamda']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_86": {
                "obj": {
                    "value": "defaults['prior_lamda']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "self.state[prior_lamda]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.param_groups[0]['params'])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_137": {
                "variable": {
                    "value": "w_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state['lamda']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_145": {
                "variable": {
                    "value": "linear_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(loss_list))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "parameters_to_vector_148": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "linear_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(loss, parameters)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(loss, parameters)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_223": {
                "variable": {
                    "value": "mean_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.state['mu'] <= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(self.state['mu'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(self.state['mu'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_138": {
                "vec": {
                    "value": "w_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(self.state['lamda'])",
                            "Call"
                        ],
                        [
                            "torch.tanh(rou_vector / temperature)",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_like_156": {
                "variable": {
                    "value": "raw_noise",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.state['mu']",
                            "Subscript"
                        ],
                        [
                            "self.state['mu'].clone().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_160": {
                "variable": {
                    "value": "w_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "rou_vector / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_169": {
                "variable": {
                    "value": "linear_grad",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(loss_list))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "parameters_to_vector_173": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "linear_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(loss, parameters)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(loss, parameters)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_185": {
                "tensors": {
                    "value": "loss_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "vector_to_parameters_228": {
                "vec": {
                    "value": "2 * raw_noise - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parameters": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_39": {
                "obj": {
                    "value": "prior_lamda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "vector_to_parameters_162": {
                "vec": {
                    "value": "w_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(self.state['lamda'])",
                            "Call"
                        ],
                        [
                            "torch.tanh(rou_vector / temperature)",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ],
                        [
                            "self.param_groups[0]['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_223": {
                "input": {
                    "value": "self.state['mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_223": {
                "input": {
                    "value": "self.state['mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_like_72": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parameters_to_vector(self.param_groups[0]['params'])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_158": {
                "input": {
                    "value": "raw_noise / (1 - raw_noise)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/binarized_modules.py": {
        "torch": {
            "pow_44": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.margin - input.mul(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.pow(output, 2)",
                            "Call"
                        ],
                        [
                            "self.margin - input.mul(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.pow(output, 2)",
                            "Call"
                        ],
                        [
                            "self.margin - input.mul(target)",
                            "BinOp"
                        ],
                        [
                            "self.margin - input.mul(target)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_77": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.margin - input.mul(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.pow(output, 2)",
                            "Call"
                        ],
                        [
                            "self.margin - input.mul(target_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.pow(output, 2)",
                            "Call"
                        ],
                        [
                            "self.margin - input.mul(target)",
                            "BinOp"
                        ],
                        [
                            "self.margin - input.mul(target)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_15": {
                "input": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_cl_utils.py": {
        "torch": {
            "stack_21": {
                "variable": {
                    "value": "probs_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[logits for logits in logits_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(probs_list, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_26": {
                "variable": {
                    "value": "(_, pred_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(probs_tensor, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_71": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "PATH_to_log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./log_dir'",
                            "Constant"
                        ],
                        [
                            "os.path.join(args.out_dir, 'log_dir_{}'.format(args.experiment_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_74": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[args.epochs // 2, args.epochs // 4 * 3, 150, 250, 350, 450]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_76": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[args.epochs // 2, args.epochs // 4 * 3, 150, 250, 350, 450]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_79": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06 ** (1.0 / args.epochs)",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialLR_81": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06 ** (1.0 / args.epochs)",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_84": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-16",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_86": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-16",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bernoulli_227": {
                "input": {
                    "value": "torch.sigmoid(2 * optimizer.state['lamda'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_227": {
                "input": {
                    "value": "2 * optimizer.state['lamda']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_utils.py": {
        "torch": {
            "stack_23": {
                "variable": {
                    "value": "probs_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[logits for logits in logits_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(probs_list, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, pred_class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean(probs_tensor, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_56": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "PATH_to_log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./log_dir'",
                            "Constant"
                        ],
                        [
                            "os.path.join(args.out_dir, 'log_dir_{}'.format(args.experiment_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_59": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[args.epochs // 2, args.epochs // 4 * 3, 150, 250, 350, 450]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiStepLR_61": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[args.epochs // 2, args.epochs // 4 * 3, 150, 250, 350, 450]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_64": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06 ** (1.0 / args.epochs)",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialLR_66": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-06 ** (1.0 / args.epochs)",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_69": {
                "variable": {
                    "value": "opt_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-16",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_71": {
                "variable": {
                    "value": "bn_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "bn_optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-16",
                    "type": "Constant",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'best_acc1': best_acc, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.out_dir, 'saved_models', 'model_{}_checkpoint_best.ckpt'.format(args.experiment_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_217": {
                "input": {
                    "value": "torch.sigmoid(2 * optimizer.state['lamda'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "input": {
                    "value": "2 * optimizer.state['lamda']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}