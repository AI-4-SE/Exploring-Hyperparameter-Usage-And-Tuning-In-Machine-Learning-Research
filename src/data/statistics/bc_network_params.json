{
    "BCN/models.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self.cell_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(cell_types.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.iglusnfr_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(get_iGluSnFR_kernel(dt=1 / input_frequency))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_156": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.iglusnfr_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "ip_steady",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sig_ip_steady",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "rrp_steady",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sig_rrp_steady",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_174": {
                "variable": {
                    "value": "release_pool_capacity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_clamp(self.log_release_pool_capacity, high=1000000.0, low=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_176": {
                "variable": {
                    "value": "intermediate_pool_capacity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_clamp(self.log_intermediate_pool_capacity, high=1000000.0, low=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_247": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1 / self.input_frequency",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "kernel_speed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_kernel_speed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "track_feedback_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_357": {
                "variable": {
                    "value": "sigmoid_slope",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lnr_model.log_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_359": {
                "variable": {
                    "value": "bc_ac_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.amacrine_cells.log_bc_ac_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_361": {
                "variable": {
                    "value": "ac_sigmoid_slope",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.amacrine_cells.log_ac_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_456": {
                "variable": {
                    "value": "self.kernel_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.arange(0.8, 0, step=-1 / self.input_frequency)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_472": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bc_ac_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(self.amacrine_cells.log_bc_ac_weight)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_486": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ac_kernel * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_527": {
                "variable": {
                    "value": "self.released",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "released_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_581": {
                "variable": {
                    "value": "self.cell_types",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(cell_types.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.iglusnfr_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(get_iGluSnFR_kernel(dt=1 / input_frequency))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_700": {
                "variable": {
                    "value": "sigmoid_slope",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_703": {
                "variable": {
                    "value": "bc_acl_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.glycinergic_amacrine_cells.log_bc_ac_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_706": {
                "variable": {
                    "value": "acl_sigmoid_slope",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.glycinergic_amacrine_cells.log_ac_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_710": {
                "variable": {
                    "value": "bc_acg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gabaergic_amacrine_cells.log_bc_ac_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_713": {
                "variable": {
                    "value": "acg_sigmoid_slope",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gabaergic_amacrine_cells.log_ac_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_765": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_790": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.iglusnfr_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_805": {
                "variable": {
                    "value": "ip_steady",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sig_ip_steady",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_806": {
                "variable": {
                    "value": "rrp_steady",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sig_rrp_steady",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_809": {
                "variable": {
                    "value": "release_pool_capacity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_clamp(self.log_release_pool_capacity, high=1000000.0, low=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_811": {
                "variable": {
                    "value": "intermediate_pool_capacity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_clamp(self.log_intermediate_pool_capacity, high=1000000.0, low=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_886": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1 / self.input_frequency",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_887": {
                "variable": {
                    "value": "kernel_speed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_kernel_speed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "self.dummy_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "self.dummy_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(self.dummy_input.size(0), self.lnr_model.padding) * self.dummy_input[:, 0, None], self.dummy_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_374": {
                "variable": {
                    "value": "ac_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "track_ac_input[-self.amacrine_cells.kernel_shape[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_386": {
                "variable": {
                    "value": "feedback",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ac_bc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.exp(self.log_ac_bc_weight)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "ac_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.amacrine_cells.forward(ac_in, bc_ac_weight, ac_kernel, ac_sigmoid_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_476": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.kernel_shape[-1] - x.shape[1], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_722": {
                "variable": {
                    "value": "ac_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lnr_state['track_ac_input'][-acl_kernel.shape[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_727": {
                "variable": {
                    "value": "local_feedback",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acl_bc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.exp(self.log_acl_bc_weight)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "acl_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_736": {
                "variable": {
                    "value": "ac_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bcn_state['track_ac_input'][-acg_kernel.shape[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_741": {
                "variable": {
                    "value": "global_feedback",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acl_bc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.exp(self.log_acl_bc_weight)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "acl_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_159": {
                "input": {
                    "value": "self.log_final_scale[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_256": {
                "input": {
                    "value": "2 * np.pi * t / phi + tau_phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_258": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-self.kernel_time / tau_decay) - torch.exp(-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "self.temporal_kernel",
                            "Attribute"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_358": {
                "input": {
                    "value": "self.log_ac_bc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_504": {
                "input": {
                    "value": "-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_508": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-self.kernel_time / tau_decay) - torch.exp(-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "self.temporal_kernel",
                            "Attribute"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_702": {
                "input": {
                    "value": "self.log_acl_bc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_709": {
                "input": {
                    "value": "self.log_acg_bc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_715": {
                "input": {
                    "value": "self.log_acl_acg_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_794": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_895": {
                "input": {
                    "value": "2 * np.pi * t / phi + tau_phase",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_897": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-self.kernel_time / tau_decay) - torch.exp(-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "self.temporal_kernel",
                            "Attribute"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "cell_types.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "get_iGluSnFR_kernel(dt=1 / input_frequency)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_134": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-self.kernel_time / tau_decay) - torch.exp(-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "self.temporal_kernel",
                            "Attribute"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_142": {
                "input": {
                    "value": "self.log_sigmoid_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_186": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_189": {
                "input": {
                    "value": "self.log_change_prob12",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "self.log_change_prob01",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_234": {
                "input": {
                    "value": "x - low - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_235": {
                "input": {
                    "value": "high - 1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_255": {
                "input": {
                    "value": "-(t / tau_d) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_500": {
                "input": {
                    "value": "self.log_ac_tau_rise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_501": {
                "input": {
                    "value": "self.log_ac_tau_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "data": {
                    "value": "cell_types.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_586": {
                "data": {
                    "value": "get_iGluSnFR_kernel(dt=1 / input_frequency)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_616": {
                "input": {
                    "value": "self.compute_kernel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_744": {
                "input": {
                    "value": "acl_acg_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.exp(self.log_acl_acg_weight)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "acl_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.glycinergic_amacrine_cells.forward(ac_in, bc_acl_weight, acl_kernel, acl_sigmoid_slope)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_746": {
                "input": {
                    "value": "acg_bc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.exp(self.log_acg_bc_weight)",
                            "UnaryOp"
                        ]
                    ]
                },
                "other": {
                    "value": "acg_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gabaergic_amacrine_cells.forward(ac_in, bc_acg_weight, acg_kernel, acg_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "acg_out + torch.matmul(acl_acg_weight, acl_out)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_778": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-self.kernel_time / tau_decay) - torch.exp(-(tau_decay + tau_rise) / (tau_decay * tau_rise) * self.kernel_time)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_kernel()",
                            "Call"
                        ],
                        [
                            "self.temporal_kernel",
                            "Attribute"
                        ],
                        [
                            "-(t / tau_r) ** 3 / (1 + t / tau_r) * torch.exp(-(t / tau_d) ** 2) * torch.cos(2 * np.pi * t / phi + tau_phase)",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.norm(kernel, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "-kernel * self.cell_types[:, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_795": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_816": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_821": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_822": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_823": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_824": {
                "input": {
                    "value": "self.log_change_prob12",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_826": {
                "input": {
                    "value": "self.log_change_prob01",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_828": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.final_transformation(state['track_release'])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid((x - self.sigmoid_offset) * torch.exp(self.log_sigmoid_slope))",
                            "Call"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x * torch.exp(self.log_final_scale[:, None])",
                            "BinOp"
                        ],
                        [
                            "x + self.final_bias[:, None]",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ],
                        [
                            "self.lnr_model.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(bc_ac_weight, x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.kernel_shape[-1] - x.shape[1], 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(ac_kernel * x, dim=1)",
                            "Call"
                        ],
                        [
                            "precomputed_sigmoid(x, self.ac_sigmoid_offset, ac_sigmoid_slope)",
                            "Call"
                        ],
                        [
                            "self.linear_filter(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, 0), mode='constant', value=x[0])",
                            "Call"
                        ],
                        [
                            "x * self.stimulus_scale",
                            "BinOp"
                        ],
                        [
                            "x + self.stimulus_bias",
                            "BinOp"
                        ],
                        [
                            "x[None, None, :]",
                            "Subscript"
                        ],
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, self.iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, self.steady_state_steps:]",
                            "Subscript"
                        ],
                        [
                            "x - torch.mean(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x / (torch.norm(x, 2, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "F.elu(x - low - 1) + low + 1",
                            "BinOp"
                        ],
                        [
                            "F.elu(high - 1 - x) - high + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "elu_873": {
                "input": {
                    "value": "x - low - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_874": {
                "input": {
                    "value": "high - 1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_894": {
                "input": {
                    "value": "-(t / tau_d) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_182": {
                "input": {
                    "value": "self.log_intermediate_pool_capacity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_184": {
                "input": {
                    "value": "self.log_release_pool_capacity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_457": {
                "start": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1 / self.input_frequency",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_817": {
                "input": {
                    "value": "self.log_intermediate_pool_capacity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_819": {
                "input": {
                    "value": "self.log_release_pool_capacity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_295": {
                "*size": {
                    "value": "self.dummy_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.lnr_model.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BCN/training.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stimulus.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "y_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "responses[0].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "y_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "responses[1].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "releases",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lnr_state['track_release'], bcn_state['track_release']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "releases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([lnr_state['track_release'], bcn_state['track_release']], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_120": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "releases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([lnr_state['track_release'], bcn_state['track_release']], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_130": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_local + reg_speed",
                            "BinOp"
                        ],
                        [
                            "loss + loss_global + reg_sparsity + scaling_mean_penalty + scaling_std_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "std_96": {
                "input": {
                    "value": "torch.exp(model.log_kernel_speed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_121": {
                "input": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(releases, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_122": {
                "input": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.std(releases, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_179": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_267": {
                "f": {
                    "value": "os.path.join(args.log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_97": {
                "input": {
                    "value": "model.log_kernel_speed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "torch.exp(model.log_acl_acg_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_111": {
                "input": {
                    "value": "torch.exp(model.gabaergic_amacrine_cells.log_bc_ac_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_113": {
                "input": {
                    "value": "model.log_acl_acg_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_295": {
                "f": {
                    "value": "best_bcn/z_scored_inaff/model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "torch.exp(model.log_acg_bc_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_111": {
                "input": {
                    "value": "model.gabaergic_amacrine_cells.log_bc_ac_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_190": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_192": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "torch.exp(model.log_acl_bc_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "torch.exp(model.glycinergic_amacrine_cells.log_bc_ac_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_110": {
                "input": {
                    "value": "model.log_acg_bc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_190": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_107": {
                "input": {
                    "value": "model.log_acl_bc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_108": {
                "input": {
                    "value": "model.glycinergic_amacrine_cells.log_bc_ac_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BCN/training_lnl.py": {
        "torch": {
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stimulus.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "response.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_25": {
                "input": {
                    "value": "torch.sum(x * y, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs - outputs.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "outputs / torch.norm(outputs, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_34": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs - outputs.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "outputs / torch.norm(outputs, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_182": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "BCN/utils.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(init, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "init * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "init + noise",
                            "BinOp"
                        ],
                        [
                            "torch.log(init.clamp(min=1e-06))",
                            "Call"
                        ],
                        [
                            "init.clamp(min=1e-06, max=1 - 1e-06)",
                            "Call"
                        ],
                        [
                            "torch.log(init / (1 - init))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "input": {
                    "value": "(x - sigmoid_offset) * sigmoid_slope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "torch.sum(x * y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "data": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(init, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "init * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "init + noise",
                            "BinOp"
                        ],
                        [
                            "torch.log(init.clamp(min=1e-06))",
                            "Call"
                        ],
                        [
                            "init.clamp(min=1e-06, max=1 - 1e-06)",
                            "Call"
                        ],
                        [
                            "torch.log(init / (1 - init))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.requires_grad",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_197": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_63": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init.clamp(min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.shape",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_56": {
                "*size": {
                    "value": "init.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "torch.max(torch.abs(init)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_66": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init / (1 - init)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "torch.abs(init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(init, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "init * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "init + noise",
                            "BinOp"
                        ],
                        [
                            "torch.log(init.clamp(min=1e-06))",
                            "Call"
                        ],
                        [
                            "init.clamp(min=1e-06, max=1 - 1e-06)",
                            "Call"
                        ],
                        [
                            "torch.log(init / (1 - init))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LSTM/model.py": {
        "torch": {
            "LSTM_22": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.layer_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.layer_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LSTM/training.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "stimulus",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stimulus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(stimulus, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "stimulus.view(-1, seq_dim, model.input_dim).requires_grad_().to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "response",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "os.path.join(log_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LSTM/utils_lstm.py": {
        "torch": {
            "mean_27": {
                "input": {
                    "value": "torch.sum(x * y, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_34": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs - outputs.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "outputs / torch.norm(outputs, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_36": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs - outputs.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "outputs / torch.norm(outputs, dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "drug_experiments/utils_dissection.py": {
        "torch": {
            "conv1d_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "track_release.T[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "F.conv1d(x, iglusnfr_kernel)",
                            "Call"
                        ],
                        [
                            "x[:, 0, steady_state_steps:]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "iglusnfr_kernel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}