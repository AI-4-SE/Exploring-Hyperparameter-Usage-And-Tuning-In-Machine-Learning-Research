{
    "exppos/exppos.py": {
        "tensorflow": {
            "zeros_91": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "pos_order",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "unordered_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(serp_labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_149": {
                "variable": {
                    "value": "ordered_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unordered_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.concat(serp_labels, axis=1), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "order_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-pos_order, serp_len)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "result[serp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "serp_ind",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "result[serp_doc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "serp_ind",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_167": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, max_docs - n_docs], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_168": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, max_docs - n_docs], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(docs, padding, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_docs, [1, max_docs, docs.shape[1].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, max_docs, docs.shape[1].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_176": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(hidden_state, [n_docs, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "variable": {
                    "value": "max_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[:, :serp_len - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_178": {
                "variable": {
                    "value": "max_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(hidden_states[:, :serp_len - 1, :], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.tile(max_states, [1, 1, max_n_docs, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, max_n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "variable": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(all_docs, params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_col, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "doc_col",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_180": {
                "variable": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(doc_col, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(max_col, [1, serp_len - 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, serp_len - 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[max_states, max_col]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_189": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_order[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_190": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pos_order[:, :-1], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(pos_filter, serp_len, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(pos_filter, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(batch_pos, serp_len)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_192": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pos_order[:, :-1], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(pos_filter, serp_len, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(pos_filter, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(batch_pos, serp_len)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_193": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "serp_ind[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cumsum(doc_filter, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_196": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_197": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_in_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros_like(n_doc_filter, dtype=tf.float32), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(n_doc_filter, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill(n_doc_filter.shape, np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_203": {
                "variable": {
                    "value": "(pos_scores, pos_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores + score_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_206": {
                "variable": {
                    "value": "unfilter_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_ind[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_207": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "doc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(pos_scores, axis=2)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs[:, :-1, :], params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_241": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :-1, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(batch_pos, tf.float32), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[serp_emb, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_243": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([a_doc, a_pos], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, hidden_state_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_244": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(hidden_state, [n_docs, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_246": {
                "variable": {
                    "value": "tiled_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, max_n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_247": {
                "variable": {
                    "value": "tiled_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len - 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_249": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_states, tiled_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "drop_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['docs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "drop_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs[:, :-1, :], params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_289": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(batch_pos, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_290": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :-1, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(batch_pos, tf.float32), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_291": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[serp_emb, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_292": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([a_doc, a_pos], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, hidden_state_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_293": {
                "variable": {
                    "value": "score_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_hidden[None, :, :], hidden_states[:-1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[score_states, serp_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores + score_filter, k=1)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pos_scores, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_303": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_305": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_scores * pos_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_314": {
                "variable": {
                    "value": "double_max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_filter * label_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_315": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[double_max_scores, rewards]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_317": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_in_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(serp_len)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_319": {
                "variable": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_320": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_in_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(rewards, [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([double_max_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_324": {
                "variable": {
                    "value": "doc_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(docs_in_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_325": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(docs_in_query, serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_327": {
                "variable": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_in_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_mc_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_332": {
                "variable": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_in_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_dqn_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "self.original_doc_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "self.original_pos_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_27": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores + self.pos_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_33": {
                "variable": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "max_pos_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pos(scores)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_doc_ind(pos_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_41": {
                "variable": {
                    "value": "random_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_49": {
                "variable": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "random_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(tf.random_uniform([]), self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : max_ind",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : noise_ind",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_doc, lambda : max_ind, lambda : noise_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_ind, [1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_53": {
                "variable": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "random_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(tf.random_uniform([]), self.epsilon)",
                            "Call"
                        ],
                        [
                            "random_doc",
                            "variable"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : max_pos",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : noise_pos",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_pos, lambda : max_pos, lambda : noise_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_pos, [1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_58": {
                "variable": {
                    "value": "cur_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_pos, lambda : max_pos, lambda : noise_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_pos, [1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.serp_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_62": {
                "variable": {
                    "value": "cur_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_doc, lambda : max_ind, lambda : noise_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_ind, [1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "(mean, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores + self.pos_filter, k=1)",
                            "Call"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_74": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(tf.reduce_mean(values))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_106": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_init",
                            "variable"
                        ],
                        [
                            "gru_fn(hidden_state, gru_input)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_118": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_doc, lambda : max_ind, lambda : noise_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_ind, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "less_123": {
                "variable": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[0]",
                            "Subscript"
                        ],
                        [
                            "batch_docs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_docs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_343": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(filtered_mc_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_344": {
                "name": {
                    "value": "DQN/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(filtered_dqn_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_346": {
                "name": {
                    "value": "DQN/double_max_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(double_max_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_24": {
                "input": {
                    "value": "scores + self.doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_44": {
                "variable": {
                    "value": "random_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "cur_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(action_ind, self.n_docs, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "a_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(action_pos, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_140": {
                "variable": {
                    "value": "a_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs[:, :-1, :], params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_doc, lambda : max_ind, lambda : noise_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_ind, [1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_141": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a_doc, a_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_146": {
                "input": {
                    "value": "-pos_order",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_148": {
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_195": {
                "x": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(serp_ind[:, :-1], max_n_docs, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cumsum(doc_filter, axis=1), axis=3)",
                            "Call"
                        ],
                        [
                            "doc_filter + n_doc_filter[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(doc_ind, max_n_docs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_198": {
                "input": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_in_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros_like(n_doc_filter, dtype=tf.float32), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_199": {
                "dims": {
                    "value": "n_doc_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "input": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores + score_filter, k=1)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(pos_scores, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_240": {
                "x": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_289": {
                "x": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "input_tensor": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_325": {
                "lengths": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_329": {
                "input": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_330": {
                "input_tensor": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_334": {
                "input": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_335": {
                "input_tensor": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_dqn_loss, tf.zeros_like(unfiltered_dqn_loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_346": {
                "input_tensor": {
                    "value": "double_max_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(max_filter * label_scores, axis=[2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_28": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores + self.pos_filter, k=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_37": {
                "input": {
                    "value": "pos_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pos(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_70": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(scores + self.pos_filter, k=1)",
                            "Call"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_124": {
                "pred": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, n_docs)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.gather(labels, action_ind, axis=0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant([[0]], dtype=tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_130": {
                "pred": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, n_docs)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.expand_dims(action_pos, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant([[serp_len]], dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_pos, lambda : max_pos, lambda : noise_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_pos, [1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_126": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_doc, lambda : max_ind, lambda : noise_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_ind, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_127": {
                "value": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose(scores)",
                            "Call"
                        ],
                        [
                            "tf.cond(random_pos, lambda : max_pos, lambda : noise_pos)",
                            "Call"
                        ],
                        [
                            "tf.reshape(action_pos, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_133": {
                "value": {
                    "value": "[[serp_len]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gru/gru.py": {
        "tensorflow": {
            "zeros_33": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "result[serp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "replay['serp_ind']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "result[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_95": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, max_docs - batch_max_docs], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_96": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(shuffled, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, max_docs - batch_max_docs], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(docs, padding, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_docs, [batch_size, max_docs, docs.shape[2].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_docs, docs.shape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_109": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "serp_ind[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_111": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(serp_ind[:, :-1], max_n_docs, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(score_filter, axis=1)",
                            "Call"
                        ],
                        [
                            "score_filter + tf.where(n_doc_filter, tf.zeros([batch_size, max_n_docs]), tf.fill([batch_size, max_n_docs], np.NINF))[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_113": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states[1:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_120": {
                "variable": {
                    "value": "tiled_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, max_n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_121": {
                "variable": {
                    "value": "tiled_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len - 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_states, tiled_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_138": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size, dtype=tf.int64)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind, [-1]), tf.reshape(max_train_ind, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_140": {
                "variable": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs']",
                            "Subscript"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_col, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "doc_col",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind, [-1]), tf.reshape(max_train_ind, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(doc_col, max_ind)",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_docs, [batch_size, serp_len - 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len - 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_178": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'][:, :-1], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_179": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(hidden_state[:, None, :], [1, batch_max_docs, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states[1:, :, :], [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, serp_emb, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, serp_emb[:-1, :, :], init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.concat([init_hidden[None, :, :], hidden_states], axis=0)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, max_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_202": {
                "variable": {
                    "value": "drop_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['docs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_221": {
                "variable": {
                    "value": "drop_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'][:, :-1], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_235": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "serp_emb[:-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_236": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_hidden[None, :, :], hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, serp_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_274": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(docs_per_query, serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_275": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_276": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_277": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(query_denom)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_279": {
                "variable": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_per_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_mc_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "variable": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(filtered_mc_loss, axis=1) / query_denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_per_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ],
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_dqn_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "variable": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(filtered_dqn_loss, axis=1) / query_denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_16": {
                "variable": {
                    "value": "to_shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(labels[:, :, None], tf.float32), docs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "variable": {
                    "value": "shuffled",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "shuffled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.transpose(to_shuffle, [1, 0, 2]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(shuffled, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(shuffled, [0, 0, 0], [-1, -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_21": {
                "variable": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "shuffled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.transpose(to_shuffle, [1, 0, 2]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(shuffled, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'][:, :-1], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_40": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "context_gru_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/label/gru/context', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(emb_col, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(doc_col, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_42": {
                "variable": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[docs_per_query - 1, tf.range(batch_size)[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_43": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(context_gru_fn, scan_input, hidden_init)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_57": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_state[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_max_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int64), action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_71": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(shuffled, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_91": {
                "name": {
                    "value": "label/output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "result['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "input": {
                    "value": "scores + score_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "variable": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "emb_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(doc_col, params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_173": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "context_gru_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/label/gru/context', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(emb_col, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(doc_col, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_175": {
                "variable": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[docs_per_query - 1, tf.range(batch_size)[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_176": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(context_gru_fn, scan_input, hidden_init)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_215": {
                "variable": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs']",
                            "Subscript"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_col, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "doc_col",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_216": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "context_gru_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/label/gru/context', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru/context', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "scan_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(emb_col, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(doc_col, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(context, ind_nd)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_218": {
                "variable": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[docs_per_query - 1, tf.range(batch_size)[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_219": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(context_gru_fn, scan_input, hidden_init)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.scan(context_gru_fn, scan_input, init_hidden)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([docs_per_query - 1, tf.range(batch_size)[:, None]], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_252": {
                "variable": {
                    "value": "cum_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "doc_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_scores, rewards]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_260": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(serp_len)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_261": {
                "variable": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_262": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ],
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(rewards, [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_values), q_values)",
                            "Call"
                        ],
                        [
                            "q_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "zero_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_267": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_scores, zero_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_268": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(serp_len)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_269": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ],
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(q_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_values), q_values)",
                            "Call"
                        ],
                        [
                            "q_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_294": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(filtered_mc_loss, axis=1) / query_denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_295": {
                "name": {
                    "value": "DQN/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(filtered_dqn_loss, axis=1) / query_denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_297": {
                "name": {
                    "value": "DQN/double_max_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(label_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_12": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(shuffled, [0, 0, 1], [-1, -1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_73": {
                "name": {
                    "value": "'policy/scores/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.gather_nd(scores, nd_ind))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_84": {
                "variable": {
                    "value": "select_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'][:, :-1], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_114": {
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_per_query[:, 0], max_n_docs)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros([batch_size, max_n_docs])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill([batch_size, max_n_docs], np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_189": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/label/scoring', label_network=True, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scores, [1, 0, 2])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_247": {
                "a": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/label/scoring', label_network=True, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scores, [1, 0, 2])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_274": {
                "lengths": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['n_docs']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_277": {
                "input": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_281": {
                "input": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_286": {
                "input": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ],
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_297": {
                "input_tensor": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_label_scores(params, replay, max_train_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_17": {
                "a": {
                    "value": "to_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.cast(labels[:, :, None], tf.float32), docs], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_19": {
                "input_": {
                    "value": "shuffled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.transpose(to_shuffle, [1, 0, 2]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(shuffled, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_72": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.slice(shuffled, [0, 0, 0], [-1, -1, 1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "labels[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "tf.gather_nd(scores, nd_ind)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_76": {
                "condition": {
                    "value": "tf.less(i, docs_per_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "select_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels, nd_ind)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros([batch_size, 1], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "shape": {
                    "value": "[batch_size, max_n_docs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_116": {
                "dims": {
                    "value": "[batch_size, max_n_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "max_train_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_train_docs(params, replay, hidden_states, doc_col)",
                            "Call"
                        ],
                        [
                            "max_train_ind",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_values), q_values)",
                            "Call"
                        ],
                        [
                            "q_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_282": {
                "input_tensor": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_287": {
                "input_tensor": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_dqn_loss, tf.zeros_like(unfiltered_dqn_loss))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_16": {
                "x": {
                    "value": "labels[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_74": {
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/label/scoring', label_network=True, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=True, inference=False)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scores, [1, 0, 2])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_77": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['n_docs']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_175": {},
            "range_218": {}
        }
    },
    "letor_conversion.py": {
        "tensorflow": {
            "TFRecordWriter_51": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.directory, name + '.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_20": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_23": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_29": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_33": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_54": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(rows), 'width': _int64_feature(cols), 'depth': _int64_feature(depth), 'label': _int64_feature(int(labels[index]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_220": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Example_125": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_20": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_23": {
                "value": {
                    "value": "value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_list",
                            "Method Argument"
                        ],
                        [
                            "value_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FloatList_26": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_29": {
                "value": {
                    "value": "value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_list",
                            "Method Argument"
                        ],
                        [
                            "value_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BytesList_33": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_54": {
                "feature": {
                    "value": "{'height': _int64_feature(rows), 'width': _int64_feature(cols), 'depth': _int64_feature(depth), 'label': _int64_feature(int(labels[index]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "TFRecordWriter_91": {
                "path": {
                    "value": "FLAGS.output_folder + '/%s.%d-of-%d.tfrecord' % (name, i, shards)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Features_125": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "letorinput.py": {
        "tensorflow": {
            "parse_example_43": {
                "variable": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "batched_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.learn.read_batch_examples(file_pattern=input_dir + params['partition'] + '.*-*.tfrecord', batch_size=params['read_batch'], reader=tf.TFRecordReader, randomize_input=not params['evaluation'], num_epochs=None, queue_capacity=10000, num_threads=num_threads, read_batch_size=1, parse_fn=None, name=None, seed=None)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'qid': tf.FixedLenSequenceFeature(shape=[], dtype=tf.int64, allow_missing=True, default_value=-1), 'label': tf.FixedLenSequenceFeature(shape=[], dtype=tf.int64, allow_missing=True), 'n_docs': tf.FixedLenFeature(shape=[1], dtype=tf.int64)}",
                            "Dict"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_48": {
                "variable": {
                    "value": "doc_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[examples[str(x)] for x in feat_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_50": {
                "variable": {
                    "value": "min_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "doc_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([examples[str(x)] for x in feat_ids], axis=2)",
                            "Call"
                        ],
                        [
                            "doc_tensors - min_values[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "doc_tensors / safe_max[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_53": {
                "variable": {
                    "value": "max_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "doc_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([examples[str(x)] for x in feat_ids], axis=2)",
                            "Call"
                        ],
                        [
                            "doc_tensors - min_values[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "doc_tensors / safe_max[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "safe_max",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(max_values, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(max_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(doc_tensors, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenSequenceFeature_6": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_9": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_15": {
                "variable": {
                    "value": "features[fid.strip()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_54": {
                "x": {
                    "value": "max_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(doc_tensors, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "max_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(doc_tensors, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_62": {
                "x": {
                    "value": "examples['qid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "examples['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "examples['n_docs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_70": {
                "name": {
                    "value": "label/input",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_72": {
                "name": {
                    "value": "'input/%s' % key",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "where_15": {
                "variable": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(pos, docs_in_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - max_q) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), q_pos_loss, tf.zeros_like(q_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(q_pos_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(q_pos_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_18": {
                "variable": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(pos, docs_in_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - rewards) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), mc_pos_loss, tf.zeros_like(mc_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mc_pos_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(mc_pos_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "variable": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - max_q) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), q_pos_loss, tf.zeros_like(q_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(q_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - rewards) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), mc_pos_loss, tf.zeros_like(mc_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mc_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "drop_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_54": {
                "variable": {
                    "value": "main_serp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "main_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_72": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(serp_len), 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_73": {
                "variable": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(ind, docs_in_query)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.sequence_mask(docs_in_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_mc_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ],
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "doc_i",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, serp_emb, (init_hidden, init_scores))",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "hidden_states[:, :-1, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.scan(gru, serp_emb[:-1, :, :], init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.concat([init_hidden[None, :, :], hidden_states], axis=0)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "max_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(replay['docs'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_col, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "doc_col",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "train_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gru((max_states, None), max_col)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_240": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "serp_ind[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_243": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(serp_ind[:, :-1], max_n_docs, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(score_filter, axis=1)",
                            "Call"
                        ],
                        [
                            "score_filter + n_doc_filter",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_245": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_246": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_in_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros_like(n_doc_filter, dtype=tf.float32), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(n_doc_filter, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill(n_doc_filter.shape, np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_251": {
                "variable": {
                    "value": "argmax_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_scores + score_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_275": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_281": {
                "variable": {
                    "value": "(hidden_states, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_score_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "gru",
                            "Method Argument"
                        ]
                    ]
                },
                "elems": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(doc_emb, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "(init_hidden, init_scores)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, serp_emb, (init_hidden, init_scores))",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "hidden_states[:, :-1, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.scan(gru, serp_emb[:-1, :, :], init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.concat([init_hidden[None, :, :], hidden_states], axis=0)",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_286": {
                "variable": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(replay['docs'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_col, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "doc_col",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "variable": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gru((hidden_states, None), max_col)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_301": {
                "variable": {
                    "value": "drop_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['docs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_323": {
                "variable": {
                    "value": "drop_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_331": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_337": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_338": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_score_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "gru",
                            "Method Argument"
                        ]
                    ]
                },
                "elems": {
                    "value": "serp_emb[:-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, hidden_state_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_339": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_hidden[None, :, :], hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_348": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(scores, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_357": {
                "variable": {
                    "value": "double_max_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_filter * label_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_358": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[double_max_scores, rewards]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_360": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_in_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(tf.range(serp_len), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_362": {
                "variable": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards",
                            "Method Argument"
                        ],
                        [
                            "rewards",
                            "Method Argument"
                        ],
                        [
                            "rewards",
                            "Method Argument"
                        ],
                        [
                            "rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_363": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_in_query - 1, tf.expand_dims(tf.range(serp_len), axis=0))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(rewards, [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([double_max_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_367": {
                "variable": {
                    "value": "doc_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.minimum(docs_in_query, serp_len))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(docs_in_query, serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_371": {
                "variable": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(ind, docs_in_query)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.sequence_mask(docs_in_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_mc_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_376": {
                "variable": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(ind, docs_in_query)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.sequence_mask(docs_in_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_dqn_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_387": {
                "variable": {
                    "value": "filtered_double_max",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "double_max_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(max_filter * label_scores, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(double_max_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_25": {
                "name": {
                    "value": "'scores/pos_%d' % pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_27": {
                "name": {
                    "value": "'q_loss/pos_%d' % pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - max_q) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), q_pos_loss, tf.zeros_like(q_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(q_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_29": {
                "name": {
                    "value": "'monte_carlo/loss_pos_%d' % pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - rewards) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), mc_pos_loss, tf.zeros_like(mc_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mc_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_79": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(filtered_mc_loss)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(filtered_mc_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_81": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(filtered_mc_loss)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(filtered_mc_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_171": {
                "variable": {
                    "value": "main_pos_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_i, drop_docs[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "label_pos_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_i, docs[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_228": {
                "name": {
                    "value": "q_loss/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_losses[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_229": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_losses[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_losses[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_253": {
                "indices": {
                    "value": "argmax_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(train_scores + score_filter, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_289": {
                "input": {
                    "value": "label_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(gru((hidden_states, None), max_col)[1], axis=3)",
                            "Call"
                        ],
                        [
                            "get_label_scores(params, replay)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_384": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(filtered_mc_loss)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(filtered_mc_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_385": {
                "name": {
                    "value": "DQN/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(filtered_dqn_loss) / doc_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_392": {
                "name": {
                    "value": "DQN/double_max_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "double_max_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(filtered_double_max) / double_max_denom",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_15": {
                "x": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "q_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - max_q) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), q_pos_loss, tf.zeros_like(q_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(q_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_18": {
                "x": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_20": {
                "input": {
                    "value": "mc_pos_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - rewards) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.less(pos, docs_in_query), mc_pos_loss, tf.zeros_like(mc_pos_loss))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mc_pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(main_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(serp_pbow, params, '/main/score', reuse_variable_scope=True, label_network=False, inference=False)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(serp_pbow, params, '/main/score', reuse_variable_scope=True, label_network=False, inference=False)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(scores, [1, 0, 2]), axis=2)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_45": {
                "input": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_63": {
                "variable": {
                    "value": "main_serp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[main_serp, tf.gather(doc_emb, 1, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "input": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_157": {
                "input": {
                    "value": "replay['doc_0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_162": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_187": {
                "variable": {
                    "value": "max_pos_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_i, max_docs[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_247": {
                "input": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_in_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros_like(n_doc_filter, dtype=tf.float32), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_248": {
                "dims": {
                    "value": "n_doc_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_257": {
                "input": {
                    "value": "replay['serp']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_298": {
                "input": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_348": {
                "a": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(main_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(serp_pbow, params, '/main/score', reuse_variable_scope=True, label_network=False, inference=False)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(serp_pbow, params, '/main/score', reuse_variable_scope=True, label_network=False, inference=False)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(scores, [1, 0, 2]), axis=2)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_361": {
                "input": {
                    "value": "tf.range(serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "input_tensor": {
                    "value": "tf.minimum(docs_in_query, serp_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_368": {
                "lengths": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_373": {
                "input": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(rewards - scores) ** 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_374": {
                "input_tensor": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ],
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_378": {
                "input": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores - q_values) ** 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_380": {
                "input_tensor": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_dqn_loss, tf.zeros_like(unfiltered_dqn_loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_389": {
                "input": {
                    "value": "double_max_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(max_filter * label_scores, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_390": {
                "x": {
                    "value": "n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(batch_docs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(batch_docs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_391": {
                "input_tensor": {
                    "value": "filtered_double_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, :-1], double_max_scores, tf.zeros_like(double_max_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_367": {
                "x": {
                    "value": "docs_in_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ],
                        [
                            "docs_in_query",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_65": {
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(replay['serp'], params, '/label/doc_emb', inference=True, label_network=True, reuse_variable_scope=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Variable_133": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_137": {
                "variable": {
                    "value": "degrade_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.maximum(epsilon * params['epsilon_decay'], 0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_138": {
                "variable": {
                    "value": "turn_off_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_166": {
                "variable": {
                    "value": "transfer_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "transfer_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_167": {
                "variable": {
                    "value": "update_transfer_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "transfer_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='transfer_step')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "transfer_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "increment_transfer_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_243": {
                "variable": {
                    "value": "merged_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_245": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_251": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "sum_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.summary_dir + '/' + params['partition']",
                            "BinOp"
                        ],
                        [
                            "args.summary_dir + '/overfit'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_252": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_136": {
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "transfer_step",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "transfer_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='transfer_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_176": {
                "variable": {
                    "value": "(mean_reward, mean_update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_177": {
                "variable": {
                    "value": "eval_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "mean_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(tf.reduce_mean(rewards))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "*eval_update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "shuffle_batch_179": {
                "variable": {
                    "value": "replay",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "to_enqueue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.pbow_model(params, examples, labels, epsilon)",
                            "Call"
                        ],
                        [
                            "models.naive_model(params, examples, labels, epsilon)",
                            "Call"
                        ],
                        [
                            "gru.model(params, examples, labels, epsilon)",
                            "Call"
                        ],
                        [
                            "exppos.model(params, examples, labels, epsilon, eval_update_ops)",
                            "Call"
                        ],
                        [
                            "seppos.model(params, examples, labels, epsilon, eval_update_ops)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params['replay_batch']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "capacity": {
                    "value": "params['min_replay'] + n_policy_threads * params['replay_batch']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "params['min_replay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "enqueue_many": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "ExperienceReplay",
                    "type": "str",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "n_policy_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "AdamOptimizer_222": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'hidden_units': [128], 'hidden_state_size': 256, 'model': args.model, 'model_name': 'dnn', 'update': args.update, 'serp_len': 10, 'evaluation': args.eval, 'partition': args.partition, 'steps': args.steps, 'eval_steps': args.eval_steps, 'doc_emb': [128], 'steps_per_transfer': args.steps_per_transfer, 'visible_dropout': 1.0, 'hidden_dropout': 1.0, 'l2_scale': 0.0, 'learning_rate': args.learning_rate, 'epsilon_decay': args.epsilon_decay, 'discount': args.discount, 'context_input': False, 'all_discounts': {'ndcg': list(range(10)), 'hill': [8, 6, 4, 2, 0, 1, 3, 5, 7, 9], 'reverse': [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]}, 'compact_gru': True, 'min_replay': args.min_replay, 'read_batch': 64, 'replay_batch': 64, 'doc_rewards': args.doc_rewards}",
                            "Dict"
                        ]
                    ]
                }
            },
            "group_241": {
                "variable": {
                    "value": "transfer_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "update_transfer_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(transfer_step, transfer_step + 1, name='increment_transfer_step')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "*pairs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Supervisor_257": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.FileWriter(sum_path)",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_secs": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "save_model_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_137": {
                "x": {
                    "value": "epsilon * params['epsilon_decay']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_190": {
                "name": {
                    "value": "DQN/replay/step_added",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(replay['step_added'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "DQN/replay/step_delay",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(replay['step_added']) - global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_237": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_268": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_298": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_300": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_176": {
                "input_tensor": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.calculate_custom_discount_reward(params, to_enqueue, stats_ops=eval_update_ops)",
                            "Call"
                        ],
                        [
                            "rewards.calculate_custom_discount_reward(params, replay)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_190": {
                "input_tensor": {
                    "value": "replay['step_added']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Session_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "input_tensor": {
                    "value": "replay['step_added']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_240": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "train_variables[common_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mdprank/main.py": {
        "tensorflow": {
            "Variable_133": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_184": {
                "variable": {
                    "value": "merged_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_186": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_192": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "sum_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.summary_dir + '/' + params['partition']",
                            "BinOp"
                        ],
                        [
                            "args.summary_dir + '/overfit'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "(mean_reward, mean_update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_156": {
                "variable": {
                    "value": "eval_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "mean_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(tf.reduce_mean(rewards))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "*eval_update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(episode['probs'] * tf.cumsum(doc_rewards, axis=1, reverse=True))",
                            "UnaryOp"
                        ],
                        [
                            "-(episode['probs'] * rewards)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'hidden_units': [], 'hidden_state_size': 256, 'model': 'mdpdiv', 'model_name': 'mdpdiv', 'update': args.update, 'serp_len': 10, 'evaluation': args.eval, 'partition': args.partition, 'steps': args.steps, 'eval_steps': args.eval_steps, 'doc_emb': [128], 'steps_per_transfer': args.steps_per_transfer, 'visible_dropout': 1.0, 'hidden_dropout': 1.0, 'l2_scale': 0.0, 'learning_rate': args.learning_rate, 'epsilon_decay': args.epsilon_decay, 'discount': args.discount, 'context_input': False, 'all_discounts': {'ndcg': list(range(10)), 'hill': [8, 6, 4, 2, 0, 1, 3, 5, 7, 9], 'reverse': [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]}, 'compact_gru': True, 'min_replay': args.min_replay, 'read_batch': 64, 'replay_batch': 1, 'doc_rewards': args.doc_rewards}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Supervisor_198": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.FileWriter(sum_path)",
                            "Call"
                        ]
                    ]
                },
                "save_summaries_secs": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "save_model_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_209": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_237": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_239": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_155": {
                "input_tensor": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.calculate_custom_discount_reward(params, episode, stats_ops=eval_update_ops)",
                            "Call"
                        ],
                        [
                            "rewards.calculate_custom_discount_reward(params, episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_180": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_163": {
                "x": {
                    "value": "doc_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.calculate_custom_discount_reward(params, episode)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mdprank/mdprank.py": {
        "tensorflow": {
            "zeros_57": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_68": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "batch_max_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_69": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_per_query[:, 0], batch_max_docs)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros([batch_size, batch_max_docs])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill([batch_size, batch_max_docs], np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "result[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "result[probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_77": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_state[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_max_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_85": {
                "variable": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "gather_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_ind, sampled]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_102": {
                "variable": {
                    "value": "sampled_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=False)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_ind, sampled], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "exp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores + doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_104": {
                "variable": {
                    "value": "exp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(exp_scores, 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "exp_scores + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "exp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(scores + doc_filter)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(exp_scores, 0.001), exp_scores + 0.001, exp_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(scores + doc_filter)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(exp_scores, 0.001), exp_scores + 0.001, exp_scores)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_111": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_ind, sampled], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_114": {
                "variable": {
                    "value": "select_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_ind, sampled], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_30": {
                "variable": {
                    "value": "sigmoid_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_state, input_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "range_65": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[batch_size, batch_max_docs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_71": {
                "dims": {
                    "value": "[batch_size, batch_max_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_89": {
                "variable": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores + doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_90": {
                "variable": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, docs_per_query[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores + doc_filter, axis=1)[:, None]",
                            "Subscript"
                        ],
                        [
                            "tf.multinomial(scores + doc_filter, 1)",
                            "Call"
                        ],
                        [
                            "tf.where(seq_mask, sampled, tf.zeros_like(sampled))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(sampled)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_109": {
                "indices": {
                    "value": "sampled[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "batch_max_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "parent_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['model_name'] + sub_name",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "(hidden_state, input_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "reuse": {
                    "value": "c.reuse_var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_104": {
                "x": {
                    "value": "exp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(scores + doc_filter)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(exp_scores, 0.001), exp_scores + 0.001, exp_scores)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_115": {
                "condition": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, docs_per_query[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "select_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels, gather_ind)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros([batch_size], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_120": {
                "condition": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, docs_per_query[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sampled_scores - tf.log(denom)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros([batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_87": {
                "input": {
                    "value": "scores + doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_92": {
                "input": {
                    "value": "sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores + doc_filter, axis=1)[:, None]",
                            "Subscript"
                        ],
                        [
                            "tf.multinomial(scores + doc_filter, 1)",
                            "Call"
                        ],
                        [
                            "tf.where(seq_mask, sampled, tf.zeros_like(sampled))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_122": {
                "x": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_scores, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_utils.py": {
        "tensorflow": {
            "min_max_variable_partitioner_90": {
                "variable": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": []
                },
                "max_partitions": {
                    "value": "num_ps_replicas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ],
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_max_variable_partitioner_145": {
                "variable": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": []
                },
                "max_partitions": {
                    "value": "num_ps_replicas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ],
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "argmax_192": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores + score_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "max_ind_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(scores)) + score_filter",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_197": {
                "variable": {
                    "value": "random_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon",
                            "Method Argument"
                        ],
                        [
                            "epsilon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_198": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "random_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([]), epsilon)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([self.batch_size]), self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : max_ind",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_ind_noise",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "scalar_16": {
                "name": {
                    "value": "'%s/fraction_of_zero_values' % tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_17": {
                "name": {
                    "value": "'%s/activation' % tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_210": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_211": {
                "variable": {
                    "value": "self.score_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_per_query[:, 0], max_n_docs)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros([batch_size, max_n_docs])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill([batch_size, max_n_docs], np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_222": {
                "variable": {
                    "value": "random_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_224": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([]), epsilon)",
                            "Call"
                        ],
                        [
                            "tf.greater(tf.random_uniform([self.batch_size]), self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(scores + score_filter, axis=0)",
                            "Call"
                        ],
                        [
                            "max_ind",
                            "Call"
                        ],
                        [
                            "self.max_ind(scores)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noise_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_ind(tf.random_uniform(tf.shape(scores)))",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_fraction_16": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_max_variable_partitioner_83": {
                "max_partitions": {
                    "value": "num_ps_replicas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ],
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ]
                    ]
                },
                "min_slice_size": {
                    "value": "64 << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "parent_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_name + subnetwork_name",
                            "BinOp"
                        ],
                        [
                            "model_name + subnetwork_name",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "(doc_tensors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(l2_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "partitioner": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)",
                            "Call"
                        ],
                        [
                            "partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse_variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_max_variable_partitioner_134": {
                "max_partitions": {
                    "value": "num_ps_replicas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ],
                        [
                            "config.num_ps_replicas if config else 0",
                            "IfExp"
                        ]
                    ]
                },
                "min_slice_size": {
                    "value": "64 << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "parent_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_name + subnetwork_name",
                            "BinOp"
                        ],
                        [
                            "model_name + subnetwork_name",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "(doc_tensors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "partitioner": {
                    "value": "partitioner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)",
                            "Call"
                        ],
                        [
                            "partitioned_variables.min_max_variable_partitioner(max_partitions=num_ps_replicas)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "l2_regularizer(l2_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_156": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_tensors",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(net, num_hidden_units, activation_fn=activation_fn, variables_collections=[parent_scope], scope=hidden_layer_scope, trainable=not label_network)",
                            "Call"
                        ],
                        [
                            "doc_tensors",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(net, hidden_dropout)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(net, num_hidden_units, activation_fn=activation_fn, variables_collections=[parent_scope], scope=hidden_layer_scope, trainable=not label_network)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, hidden_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['hidden_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_216": {
                "input": {
                    "value": "scores[:, :, 0] + self.score_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_227": {
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(random_cond, lambda : max_ind, lambda : max_ind_noise)",
                            "Call"
                        ],
                        [
                            "tf.where(random_cond, max_ind, noise_ind)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.max_n_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(net,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_initializer_177": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_212": {
                "shape": {
                    "value": "[batch_size, max_n_docs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_213": {
                "dims": {
                    "value": "[batch_size, max_n_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "'shared_document_layer_%d' % layer_id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "(net,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "'hiddenlayer_%d' % layer_id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "(net,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_tensors",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(net, num_hidden_units, activation_fn=activation_fn, variables_collections=[parent_scope], scope=hidden_layer_scope, trainable=not label_network)",
                            "Call"
                        ],
                        [
                            "doc_tensors",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(net, hidden_dropout)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(net, num_hidden_units, activation_fn=activation_fn, variables_collections=[parent_scope], scope=hidden_layer_scope, trainable=not label_network)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, hidden_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "hidden_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['hidden_dropout']",
                            "Subscript"
                        ],
                        [
                            "params['hidden_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_220": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "cast_13": {
                "variable": {
                    "value": "ind_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(n_docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_17": {
                "variable": {
                    "value": "neginf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "result[serp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "result[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_74": {
                "variable": {
                    "value": "neginf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "ind_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(n_docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "pbow",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "doc_i",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "doc_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_i, docs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "result[serp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_205": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "result['serp_ind']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "message": {
                    "value": "serp_ind: ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "result[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_211": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, max_docs - batch_max_docs], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_212": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, max_docs - batch_max_docs], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(docs, padding, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_docs, [batch_size, max_docs, docs.shape[2].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_docs, docs.shape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_36": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_59": {
                "name": {
                    "value": "label/output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "result['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_97": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_98": {
                "variable": {
                    "value": "select_doc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', reuse_variable_scope=True, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_99": {
                "variable": {
                    "value": "result[label_%d % i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(i, n_docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.gather(labels, action, axis=0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant([[0]], dtype=tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tile_174": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_state[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_max_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int64), action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_188": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_207": {
                "name": {
                    "value": "label/output",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "result['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_12": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_31": {
                "name": {
                    "value": "'policy/scores/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "result[max_doc_%d % i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_50": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(ind_range, action)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "neginf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(score_filter, np.NINF)",
                            "Call"
                        ],
                        [
                            "tf.add(score_filter, np.NINF)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_53": {
                "variable": {
                    "value": "select_doc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', reuse_variable_scope=True, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_54": {
                "variable": {
                    "value": "tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_doc_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(doc_emb, action)",
                            "Call"
                        ],
                        [
                            "tf.gather(doc_emb, action)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "doc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled, doc_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_92": {
                "name": {
                    "value": "'policy/scores/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_107": {
                "variable": {
                    "value": "result[max_doc_%d % i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_110": {
                "variable": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(ind_range, action)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "neginf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(score_filter, np.NINF)",
                            "Call"
                        ],
                        [
                            "tf.add(score_filter, np.NINF)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_docs, 1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(ind_range, action), neginf, score_filter)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_116": {
                "variable": {
                    "value": "doc_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_i, docs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_131": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "mu._get_doc_tensors(examples, params, 'main')",
                            "Call"
                        ],
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_183": {
                "name": {
                    "value": "'policy/scores/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_199": {
                "variable": {
                    "value": "select_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(doc_pos, params, '/main/doc_emb', reuse_variable_scope=True, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score/pos_%d' % i, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score', reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_38": {
                "pred": {
                    "value": "tf.less(i, n_docs)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.gather(labels, action, axis=0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant([[0]], dtype=tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score/pos_%d' % i, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score', reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_100": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(docs)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score/pos_%d' % i, reuse_variable_scope=False, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(doc_input, params, '/main/score', reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring', label_network=False, reuse_variable_scope=i > 0, inference=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_189": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "nd_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_191": {
                "condition": {
                    "value": "tf.less(i, docs_per_query)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "select_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(labels, nd_ind)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros([batch_size, 1], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_39": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(docs)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_50": {
                "x": {
                    "value": "ind_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(n_docs), dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.range(n_docs), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_101": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_102": {
                "value": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_110": {
                "x": {
                    "value": "ind_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(n_docs), dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.range(n_docs), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_187": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_192": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['n_docs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_194": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_40": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "mu.select_eps_greedy_action(scores, epsilon, score_filter)",
                            "Call"
                        ],
                        [
                            "policy.choose(scores)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rewards.py": {
        "tensorflow": {
            "log_5": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_6": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(2, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_26": {
                "variable": {
                    "value": "cut_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(docs_per_query, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[labels.shape[0], tf.maximum(serp_len - tf.shape(labels)[1], 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "padded_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[labels, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_41": {
                "variable": {
                    "value": "(top_labels, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([labels, padding], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_42": {
                "variable": {
                    "value": "nominators",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 ** top_labels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "variable": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nominators * all_discounts['ndcg']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_24": {
                "variable": {
                    "value": "len_discounts[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(len_discounts[name])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_28": {
                "variable": {
                    "value": "new_discounts[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "len_discounts[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "cut_len[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "nominators",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 ** labels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_69": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "ideal_reward == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(ideal_reward)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nominators * all_discounts['ndcg'], axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "replay['ideal_rewards/%s' % name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "pos_order",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['pos_order']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['select_order_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_105": {
                "variable": {
                    "value": "safe_order",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "to_few_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(docs_per_query, serp_len)[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "x": {
                    "value": "second_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-first_sort, k=serp_len)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "pos_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(replay['pos_order'], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_107": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind, [-1]), tf.reshape(safe_order, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "rewards[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "discounts * nominators",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_126": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(ideal_reward, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(ideal_reward)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nominators * all_discounts['ndcg'], axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "replay['ideal_rewards/%s' % name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_135": {
                "variable": {
                    "value": "label_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['label_%d' % i]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(replay['labels'], tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(params['serp_len'])",
                            "Call"
                        ],
                        [
                            "i in range(params['serp_len'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_136": {
                "variable": {
                    "value": "nom_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nominators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(2 ** top_labels - 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(2 ** labels - 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "2 ** labels - 1",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ],
                        [
                            "i in range(params['serp_len'])",
                            "Call"
                        ],
                        [
                            "i in range(params['serp_len'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(rewards[cur_reward])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_5": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_6": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_14": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['label_%d' % i]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(replay['labels'], tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_26": {
                "x": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "(mean, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "'label/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(tf.cast(labels, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "'exp_label/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(tf.cast(nominators, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_72": {
                "name": {
                    "value": "normalized_reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(rewards / denom)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_78": {
                "variable": {
                    "value": "(mean, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_119": {
                "variable": {
                    "value": "pos_discounts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discounts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_discounts.items()",
                            "Call"
                        ],
                        [
                            "replay['discounts/%s' % name]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind, [-1]), tf.reshape(safe_order, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "pos_discounts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_discounts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(discounts, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_discounts, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_130": {
                "name": {
                    "value": "'normalized_rewards/%s' % name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_helper(rewards[name] / denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_137": {
                "name": {
                    "value": "'label/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(label_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_138": {
                "name": {
                    "value": "'exp_label/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(nom_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_142": {
                "variable": {
                    "value": "label_order",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['select_order_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_37": {
                "x": {
                    "value": "serp_len - tf.shape(labels)[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.cast(i + 2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_63": {
                "x": {
                    "value": "tf.constant(2.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nominators * all_discounts['ndcg'], axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "replay['ideal_rewards/%s' % name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_97": {
                "input": {
                    "value": "-pos_order",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "top_k_98": {
                "input": {
                    "value": "-first_sort",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "less_103": {
                "x": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_126": {
                "x": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nominators * all_discounts['ndcg'], axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "replay['ideal_rewards/%s' % name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_127": {
                "input": {
                    "value": "ideal_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(nominators * all_discounts['ndcg'], axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "replay['ideal_rewards/%s' % name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_132": {
                "name": {
                    "value": "normalized_reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_helper(rewards[name] / denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_141": {
                "name": {
                    "value": "'pos_order/pos_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(replay['pos_order'][:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "'label_order2/label_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(label_order[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "'label_order/exp_label_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_helper(nom_order[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_63": {
                "x": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['label_%d' % i]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(replay['labels'], tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "nominators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(2 ** top_labels - 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(2 ** labels - 1, tf.float32)",
                            "Call"
                        ],
                        [
                            "2 ** labels - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ],
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(batch_size)[:, None], [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "safe_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(to_few_docs, second_sort, pos_order)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_37": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['label_%d' % i]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(replay['labels'], tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rnn_utils.py": {
        "tensorflow": {
            "dropout_12": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(hidden_state, keep_prob)",
                            "Call"
                        ],
                        [
                            "hidden_state",
                            "Method Argument"
                        ],
                        [
                            "hidden_state",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "hidden_dropout",
                            "variable"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_13": {
                "variable": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_vector, keep_prob)",
                            "Call"
                        ],
                        [
                            "input_vector",
                            "Method Argument"
                        ],
                        [
                            "input_vector",
                            "Method Argument"
                        ],
                        [
                            "input_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "hidden_dropout",
                            "variable"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "input_update",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(input_vector,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "hidden_update",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(input_vector,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_state, input_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "parent_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['model_name'] + sub_name",
                            "BinOp"
                        ]
                    ]
                },
                "values": {
                    "value": "(hidden_state, input_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "l2_regularizer(l2_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "c.reuse_var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "update_vector",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(input_vector,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "reset_vector",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(input_vector,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(input_vector,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "update_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "update_reset_node(input_vector, hidden_state, gru_scope, keep_prob, tf.sigmoid, hidden_state_size, label_network)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "seppos/seppos.py": {
        "tensorflow": {
            "zeros_84": {
                "variable": {
                    "value": "hidden_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "pos_order",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_160": {
                "variable": {
                    "value": "(_, order_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_order",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_161": {
                "variable": {
                    "value": "unordered_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_162": {
                "variable": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "order_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind_nd, [-1]), tf.reshape(order_ind, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_166": {
                "variable": {
                    "value": "ordered_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unordered_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(serp_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "order_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(order_ind, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "ordered_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ordered_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(unordered_labels, order_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ordered_labels, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "result[serp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "result[serp_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "serp_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "serp_ind",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_176": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, max_docs - batch_max_docs], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_177": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, max_docs - batch_max_docs], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(docs, padding, 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_docs, [batch_size, max_docs, docs.shape[2].value])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_docs, docs.shape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_188": {
                "variable": {
                    "value": "doc_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[:, 1:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, max_n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_189": {
                "variable": {
                    "value": "max_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_col[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len - 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "doc_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_states, max_col]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_199": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "serp_ind[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_201": {
                "variable": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(serp_ind[:, :-1], max_n_docs, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(doc_filter, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_202": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['n_docs']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_n_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "max_n_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_203": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_per_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros(n_doc_filter.shape), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(docs_per_query[:, 0], batch_max_docs)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros(n_doc_filter.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill(n_doc_filter.shape, np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_206": {
                "variable": {
                    "value": "max_doc_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_scores + doc_filter + n_doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, serp_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_217": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_order[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_219": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(pos_order[:, :-1], serp_len, on_value=np.NINF, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(pos_filter, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros([batch_size, 1, serp_len]), pos_filter], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_220": {
                "variable": {
                    "value": "pos_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([batch_size, 1, serp_len]), pos_filter]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_223": {
                "variable": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_scores + pos_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_244": {
                "variable": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size, dtype=tf.int64)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_245": {
                "variable": {
                    "value": "doc_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind_nd, [-1]), tf.reshape(max_doc_ind, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_248": {
                "variable": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['docs']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "doc_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(max_doc_ind, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "max_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_docs']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(all_docs, doc_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(max_docs, [batch_size, serp_len - 1, all_docs.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len - 1, all_docs.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_257": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs, params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_264": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :-1, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[serp_emb[:-1, :, :], pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_266": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([select_emb, a_pos], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb[:-1, :, :], pos], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_267": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(hidden_state[:, None, :], [1, batch_max_docs, 1])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.concat([init_hidden[None, :, :], hidden_states[:-1, :, :]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, max_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_277": {
                "variable": {
                    "value": "pos_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_hidden[:, None, :], hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_278": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pos_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_287": {
                "variable": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size, dtype=tf.int64)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_288": {
                "variable": {
                    "value": "serp_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(serp_len, dtype=tf.int64)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_289": {
                "variable": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(max_pos, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_293": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=i > 0, inference=True, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/label/scoring/pos', label_network=True, inference=True, reuse_variable_scope=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=serp_len)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(max_pos, [-1])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(batch_pos_filtered, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=i > 0, inference=True, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/label/scoring/pos', label_network=True, inference=True, reuse_variable_scope=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=serp_len)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_309": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(docs_per_query, serp_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_313": {
                "variable": {
                    "value": "drop_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "replay['docs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_320": {
                "variable": {
                    "value": "drop_docs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['serp']",
                            "Subscript"
                        ],
                        [
                            "replay['serp']",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "visible_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['visible_dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_327": {
                "variable": {
                    "value": "serp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs, params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_334": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :-1, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_pos, tf.float32)[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(pos, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_335": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[serp_emb, pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_336": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "gru",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ru.get_gru_layer(params, '/label/gru', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "ru.get_gru_layer(params, '/main/gru', label_network=False, inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([select_emb, a_pos], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb[:-1, :, :], pos], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([serp_emb, pos], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, hidden_state_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_337": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_hidden[None, :, :], hidden_states[:-1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_339": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(hidden_state[:, None, :], [1, batch_max_docs, 1])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.scan(gru, gru_input, init_hidden)",
                            "Call"
                        ],
                        [
                            "tf.concat([init_hidden[None, :, :], hidden_states[:-1, :, :]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hidden_states, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "hidden_states",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_341": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_356": {
                "variable": {
                    "value": "batch_pos_filtered",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_per_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(batch_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_359": {
                "variable": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size, dtype=tf.int64)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_360": {
                "variable": {
                    "value": "serp_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(serp_len, dtype=tf.int64)[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(batch_pos_filtered, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_365": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=i > 0, inference=True, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/label/scoring/pos', label_network=True, inference=True, reuse_variable_scope=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=serp_len)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "pos_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(max_pos, [-1])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.reshape(batch_ind_nd, [-1]), tf.reshape(serp_ind_nd, [-1]), tf.reshape(batch_pos_filtered, [-1])], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=i > 0, inference=True, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(pos_input, params, subnetwork_name='/label/scoring/pos', label_network=True, inference=True, reuse_variable_scope=False, n_output=10)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/pos', label_network=False, reuse_variable_scope=True, inference=False, n_output=serp_len)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(pos_scores, pos_ind_nd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pos_scores, [batch_size, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_406": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_407": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_408": {
                "variable": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(query_denom)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_410": {
                "variable": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_per_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - pos_scores) ** 2 + (rewards - doc_scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(cum_rewards - pos_scores) ** 2 + (cum_rewards - doc_scores) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_mc_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "variable": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(filtered_mc_loss, axis=1) / query_denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_415": {
                "variable": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sequence_mask(docs_per_query, serp_len), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unfiltered_doc_loss + unfiltered_pos_loss",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(unfiltered_dqn_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_418": {
                "variable": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(filtered_dqn_loss, axis=1) / query_denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "self.pos_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_13": {
                "variable": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "batch_max_docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(docs)[1]",
                            "Subscript"
                        ],
                        [
                            "batch_max_docs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_14": {
                "variable": {
                    "value": "self.doc_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "n_doc_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(docs_per_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "tf.where(n_doc_filter, tf.zeros(n_doc_filter.shape), tf.fill(n_doc_filter.shape, np.NINF))",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(docs_per_query[:, 0], batch_max_docs)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros([batch_size, batch_max_docs])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.fill([batch_size, batch_max_docs], np.NINF)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_29": {
                "variable": {
                    "value": "random_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_31": {
                "variable": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(tf.random_uniform([self.batch_size]), self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_doc_ind(scores[:, :, 0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noise_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_doc_ind(noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "cur_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose_doc(doc_scores)",
                            "Call"
                        ],
                        [
                            "tf.where(random_doc, max_ind, noise_ind)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_docs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_equal_46": {
                "variable": {
                    "value": "random_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_49": {
                "variable": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "random_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater_equal(tf.random_uniform([self.batch_size]), self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(pos_scores + pos_filter, axis=2)",
                            "Call"
                        ],
                        [
                            "max_train_doc_pos(params, hidden_states, doc_emb, serp_len, doc_col, replay['serp_ind'], batch_pos, docs_per_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "max_pos",
                            "Call"
                        ],
                        [
                            "self.max_pos(scores)",
                            "Call"
                        ],
                        [
                            "max_pos",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "noise_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pos(noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_53": {
                "variable": {
                    "value": "cur_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose_pos(pos_scores)",
                            "Call"
                        ],
                        [
                            "tf.where(random_pos, max_pos, noise_pos)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.serp_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "on_value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "(mean, update)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reduce_mean(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_65": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.metrics.mean(tf.reduce_mean(values))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_100": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_state[:, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, batch_max_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "score_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_states, doc_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size, dtype=tf.int64), action_ind]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_115": {
                "variable": {
                    "value": "select_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action_ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_120": {
                "variable": {
                    "value": "select_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "doc_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._shared_doc_embeddings(docs, params, '/main/doc_emb', inference=True)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(batch_docs, params, '/label/doc_emb', label_network=True, inference=True, reuse_variable_scope=False)",
                            "Call"
                        ],
                        [
                            "mu._shared_doc_embeddings(drop_docs, params, '/main/doc_emb', inference=False, reuse_variable_scope=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action_ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_121": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hidden_state, select_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_142": {
                "variable": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(serp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "docs_per_query[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_371": {
                "variable": {
                    "value": "cum_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "doc_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_382": {
                "variable": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_doc_scores, rewards]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_383": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(serp_len)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_385": {
                "variable": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_386": {
                "variable": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ],
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "reward_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(rewards, [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_doc_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_doc_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_doc_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_doc_values), q_doc_values)",
                            "Call"
                        ],
                        [
                            "q_doc_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_388": {
                "variable": {
                    "value": "zero_end",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_doc_scores, zero_end]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_390": {
                "variable": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "docs_per_query - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.range(serp_len)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_392": {
                "variable": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "end_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ],
                        [
                            "tf.equal(docs_per_query - 1, tf.range(serp_len)[None, :])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(q_doc_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_doc_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_doc_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_doc_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_doc_values), q_doc_values)",
                            "Call"
                        ],
                        [
                            "q_doc_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_420": {
                "name": {
                    "value": "monte_carlo/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(filtered_mc_loss, axis=1) / query_denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_422": {
                "name": {
                    "value": "DQN/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.reduce_sum(filtered_dqn_loss, axis=1) / query_denom)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_424": {
                "name": {
                    "value": "DQN/max_doc_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(label_doc_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_425": {
                "name": {
                    "value": "DQN/max_pos_scores",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(q_pos_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_19": {
                "input": {
                    "value": "scores + self.doc_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "scores + self.pos_filter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "docs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['doc_tensors']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_156": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[select_emb, a_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "shape": {
                    "value": "n_doc_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_205": {
                "dims": {
                    "value": "n_doc_filter.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_263": {
                "x": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_309": {
                "lengths": {
                    "value": "docs_per_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples['n_docs']",
                            "Subscript"
                        ],
                        [
                            "replay['docs_per_query']",
                            "Subscript"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ],
                        [
                            "docs_per_query",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_333": {
                "x": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_358": {
                "input": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ],
                        [
                            "replay['pos_order']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_408": {
                "input": {
                    "value": "query_denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(docs_per_query[:, 0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(query_denom, serp_len)",
                            "Call"
                        ],
                        [
                            "tf.maximum(query_denom, tf.ones_like(query_denom))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_412": {
                "input": {
                    "value": "unfiltered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rewards - pos_scores) ** 2 + (rewards - doc_scores) ** 2",
                            "BinOp"
                        ],
                        [
                            "(cum_rewards - pos_scores) ** 2 + (cum_rewards - doc_scores) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_417": {
                "input": {
                    "value": "unfiltered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unfiltered_doc_loss + unfiltered_pos_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_424": {
                "input_tensor": {
                    "value": "label_doc_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_label_scores(params, replay, max_doc_ind, max_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_425": {
                "input_tensor": {
                    "value": "q_pos_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_label_scores(params, replay, max_doc_ind, max_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "shape": {
                    "value": "[batch_size, batch_max_docs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_16": {
                "dims": {
                    "value": "[batch_size, batch_max_docs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "np.NINF",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "input_tensor": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_132": {
                "params": {
                    "value": "doc_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/doc', label_network=False, reuse_variable_scope=i > 0, inference=True, n_output=1)",
                            "Call"
                        ],
                        [
                            "mu._create_subnetwork(doc_input, params, subnetwork_name='/main/scoring/doc', label_network=False, reuse_variable_scope=True, inference=False)[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/label/scoring/doc', label_network=True, inference=True, reuse_variable_scope=False)[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "mu._create_subnetwork(score_input, params, subnetwork_name='/main/scoring/doc', label_network=False, reuse_variable_scope=True, inference=False)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action_ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_143": {
                "condition": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, docs_per_query[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.gather_nd(labels, ind_nd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros([batch_size], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_148": {
                "condition": {
                    "value": "in_doc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, docs_per_query[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose_pos(pos_scores)",
                            "Call"
                        ],
                        [
                            "tf.where(random_pos, max_pos, noise_pos)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.fill([batch_size], tf.cast(serp_len, dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "tensor": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(batch_size)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len - 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "order_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(-pos_order, serp_len)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[batch_size, 1, serp_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(batch_size)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len - 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "tensor": {
                    "value": "max_doc_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(doc_scores + doc_filter + n_doc_filter, axis=2)",
                            "Call"
                        ],
                        [
                            "max_train_doc_pos(params, hidden_states, doc_emb, serp_len, doc_col, replay['serp_ind'], batch_pos, docs_per_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "max_doc_ind",
                            "Call"
                        ],
                        [
                            "max_doc_ind",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_288": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "tensor": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(batch_size)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len - 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "tensor": {
                    "value": "serp_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(serp_len, dtype=tf.int64)[None, :], [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(serp_len, dtype=tf.int64)[:, None], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "tensor": {
                    "value": "max_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(pos_scores + pos_filter, axis=2)",
                            "Call"
                        ],
                        [
                            "max_train_doc_pos(params, hidden_states, doc_emb, serp_len, doc_col, replay['serp_ind'], batch_pos, docs_per_query, max_n_docs)",
                            "Call"
                        ],
                        [
                            "max_pos",
                            "Call"
                        ],
                        [
                            "self.max_pos(scores)",
                            "Call"
                        ],
                        [
                            "max_pos",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_359": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_360": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "tensor": {
                    "value": "batch_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(batch_size)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len - 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(batch_size, dtype=tf.int64)[:, None], [1, serp_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "tensor": {
                    "value": "serp_ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.range(serp_len, dtype=tf.int64)[None, :], [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(serp_len, dtype=tf.int64)[:, None], [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "tensor": {
                    "value": "batch_pos_filtered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, batch_pos, tf.zeros_like(batch_pos))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_392": {
                "input": {
                    "value": "q_doc_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([label_doc_scores, rewards], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, reward_tile, q_doc_values)",
                            "Call"
                        ],
                        [
                            "tf.concat([label_doc_scores, zero_end], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(end_mask, tf.zeros_like(q_doc_values), q_doc_values)",
                            "Call"
                        ],
                        [
                            "q_doc_values + doc_rewards",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_413": {
                "input_tensor": {
                    "value": "filtered_mc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_mc_loss, tf.zeros_like(unfiltered_mc_loss))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "input_tensor": {
                    "value": "filtered_dqn_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask, unfiltered_dqn_loss, tf.zeros_like(unfiltered_dqn_loss))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_112": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_145": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size, dtype=tf.int64), action_ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_151": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(serp_len, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "action_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy.choose_pos(pos_scores)",
                            "Call"
                        ],
                        [
                            "tf.where(random_pos, max_pos, noise_pos)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_384": {},
            "range_391": {},
            "cast_151": {
                "x": {
                    "value": "serp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "params['serp_len']",
                            "Subscript"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ],
                        [
                            "serp_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}