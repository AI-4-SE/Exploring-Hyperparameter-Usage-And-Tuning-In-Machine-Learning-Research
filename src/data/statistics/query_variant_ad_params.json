{
    "AD_generation-main/util/tfidf_utils.py": {
        "sklearn": {
            "TfidfVectorizer_17": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CountVectorizer_90": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TfidfTransformer_91": {
                "variable": {
                    "value": "transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TfidfVectorizer_104": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "encoding": {
                    "value": "utf8",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/Data.py": {
        "torch": {
            "from_numpy_139": {
                "variable": {
                    "value": "self.extend_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.extend.sparse_to_dense(), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "self.ads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.ads, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.mask, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "self.sub_node_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.sub_node_idx, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "self.extend_node_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.extend_node_idx, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "self.neibour_node_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.neibour_node_idx, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "self.word_type_sub",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.word_type_sub, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "self.word_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.word_type, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "self.expose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.expose, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "self.click",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.click, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.query, dtype=np.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Collate(self.data_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Collate(self.data_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "ndarray": {
                    "value": "np.array(self.sub_adj, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/lr_scheduler.py": {
        "torch": {}
    },
    "AD_generation-main/metric.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(metric, dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight, dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/models/g2s_rl.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "martix_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "martix_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(martix_pad, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_36": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, pad_w, 0, pad_l)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_63": {
                "variable": {
                    "value": "self.word_type_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_num_sam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "sample_adj_mid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(extend_adj[:sub_node_num, :], sample1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "sample_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_adj_mid[:, :sub_node_num], sample2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state[0][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ne_153": {
                "variable": {
                    "value": "query_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(word_type, 1) + torch.eq(word_type, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "query_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:query_num]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(query, -1)",
                            "Call"
                        ],
                        [
                            "batch.query",
                            "Attribute"
                        ],
                        [
                            "[q.cuda() for q in query]",
                            "ListComp"
                        ],
                        [
                            "query_s + query_no",
                            "BinOp"
                        ],
                        [
                            "sort_list(query, index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(state[0][-1], 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(state, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_157": {
                "variable": {
                    "value": "match_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(state[0][-1], 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(state, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:query_num]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(query, -1)",
                            "Call"
                        ],
                        [
                            "batch.query",
                            "Attribute"
                        ],
                        [
                            "[q.cuda() for q in query]",
                            "ListComp"
                        ],
                        [
                            "query_s + query_no",
                            "BinOp"
                        ],
                        [
                            "sort_list(query, index)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_157": {
                "variable": {
                    "value": "match_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t.cuda() for t in tgt]",
                            "ListComp"
                        ],
                        [
                            "tgt_s + tgt_no",
                            "BinOp"
                        ],
                        [
                            "sort_list(tgt, index)",
                            "Call"
                        ],
                        [
                            "torch.stack(tgt, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_315": {
                "variable": {
                    "value": "word_type_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "word_type_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "word_type_sub_s + word_type_sub_no",
                            "BinOp"
                        ],
                        [
                            "sort_list(word_type_batch, index)",
                            "Call"
                        ],
                        [
                            "pad_sequence(word_type_batch, batch_first=True)",
                            "Call"
                        ],
                        [
                            "word_type_trans(word_type_batch)",
                            "Call"
                        ],
                        [
                            "word_type_batch.unbind(0)",
                            "Call"
                        ],
                        [
                            "word_type_batch + word_type_no",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "sub_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(sub_node_num))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sub_id, sample_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_242": {
                "variable": {
                    "value": "sub_node_idx_s",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sub_node_idx_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(sub_node_idx_s, batch_first=True)",
                            "Call"
                        ],
                        [
                            "list(sub_node_idx_s)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_243": {
                "variable": {
                    "value": "word_type_sub_s",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "word_type_sub_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(word_type_sub_s, batch_first=True)",
                            "Call"
                        ],
                        [
                            "list(word_type_sub_s)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_257": {
                "variable": {
                    "value": "neibour_node_idx_s",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "neibour_node_idx_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(neibour_node_idx_s, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_271": {
                "variable": {
                    "value": "prob_no",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt_no)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "sample_prob_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_prob_batch, prob_no)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_293": {
                "variable": {
                    "value": "sample_prob_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sample_node_idx_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_269": {
                "input": {
                    "value": "sample_prob_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(len(sample_node_idx_batch)).fill_(1).cuda()",
                            "Call"
                        ],
                        [
                            "sample_prob_batch.index_select(dim=0, index=torch.tensor(index).cuda())",
                            "Call"
                        ],
                        [
                            "torch.cat((sample_prob_batch, prob_no), 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "data": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_s + index_no",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eq_153": {
                "input": {
                    "value": "word_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_ori + mask_nei",
                            "BinOp"
                        ],
                        [
                            "word_type_extend[id]",
                            "Subscript"
                        ],
                        [
                            "e.word_type",
                            "Attribute"
                        ],
                        [
                            "word_type.cuda()",
                            "Call"
                        ],
                        [
                            "[w.cuda() for w in word_type]",
                            "ListComp"
                        ]
                    ]
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/models/gcn_encode.py": {
        "torch": {
            "LSTM_15": {
                "variable": {
                    "value": "self.lstm_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "x1_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(1), x1_mid.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x2_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1.unsqueeze(1), x2_mid.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/models/gcn_lstm.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_20": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.x_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.g_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.lstm_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_28": {
                "variable": {
                    "value": "self.lstm_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool2(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(self.pool2(h), -1)",
                            "Call"
                        ],
                        [
                            "score + mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "graph_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(alpha, -1) * x",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "graph_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x1_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(1), x1_mid.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "x2_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1.unsqueeze(1), x2_mid.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "graph_out_tensor_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph_out_tensor1, graph_out_tensor2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "graph_out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph_out_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_g(graph_out_tensor_cat)[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(graph_out_tensor, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/models/score.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.n_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(neibour, sub_graph)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_w(mid)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score)",
                            "Call"
                        ],
                        [
                            "score.sum(2)",
                            "Call"
                        ],
                        [
                            "score + nei_pad_mask",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_w(mid)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score)",
                            "Call"
                        ],
                        [
                            "score.sum(2)",
                            "Call"
                        ],
                        [
                            "score + nei_pad_mask",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_65": {
                "variable": {
                    "value": "neibour_id",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nei_pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nei_pad_mask.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "neibour_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "att.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_89": {
                "variable": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score.compute_score(x, neibour, sub_graph, mask, nei_pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(att.size())",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot.scatter_(1, sample_index.long(), 1)",
                            "Call"
                        ],
                        [
                            "one_hot.bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_94": {
                "variable": {
                    "value": "sample_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neibour_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, nei_pad_size).unsqueeze(0).expand(neibour.size(0), nei_pad_size)",
                            "Call"
                        ],
                        [
                            "neibour_id.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(att.size())",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot.scatter_(1, sample_index.long(), 1)",
                            "Call"
                        ],
                        [
                            "one_hot.bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_76": {
                "variable": {
                    "value": "sample_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score.compute_score(x, neibour, sub_graph, mask, nei_pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_num",
                            "Attribute"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_80": {
                "variable": {
                    "value": "(sth, sample_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score.compute_score(x, neibour, sub_graph, mask, nei_pad_mask)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "sample_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_num",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "AD_generation-main/models/transformer_gcn.py": {
        "torch": {
            "triu_22": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((seq_len, seq_len), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "self.pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_model, 2) * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_53": {
                "variable": {
                    "value": "self.pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_54": {
                "variable": {
                    "value": "self.pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_76": {
                "variable": {
                    "value": "self.word_type_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_num_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_82": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "config.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "config.dim_feedforward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_83": {
                "variable": {
                    "value": "encoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerEncoder_84": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(config.decoder_hidden_size, config.num_head, dim_feedforward=config.dim_feedforward, dropout=0.1)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "norm": {
                    "value": "encoder_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.LayerNorm(config.decoder_hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "TransformerDecoderLayer_87": {
                "variable": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nhead": {
                    "value": "config.num_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "config.dim_feedforward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_88": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TransformerDecoder_89": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "decoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.TransformerDecoderLayer(config.decoder_hidden_size, config.num_head, dim_feedforward=config.dim_feedforward, dropout=0.1)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "norm": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.LayerNorm(config.decoder_hidden_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.decoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.pe[:, :x.size(1), :]",
                            "BinOp"
                        ],
                        [
                            "[i.cuda() for i in x]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.w(x_emb)",
                            "Call"
                        ],
                        [
                            "x.unbind(0)",
                            "Call"
                        ],
                        [
                            "self.graph_encoder(data_batch, mask_pad_g)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[i.cuda() for i in x]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.w(x_emb)",
                            "Call"
                        ],
                        [
                            "x.unbind(0)",
                            "Call"
                        ],
                        [
                            "self.graph_encoder(data_batch, mask_pad_g)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_103": {
                "variable": {
                    "value": "word_type",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "word_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[w.cuda() for w in word_type]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(word_type, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[w.cuda() for w in word_type]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(word_type, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(tgt=tgt, memory=memory, tgt_mask=tgt_mask, memory_mask=None, tgt_key_padding_mask=tgt_pad_mask, memory_key_padding_mask=memory_pad_mask)",
                            "Call"
                        ],
                        [
                            "self.o(output)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(tgt=input, memory=memory, tgt_mask=tgt_mask, memory_key_padding_mask=memory_pad_mask)",
                            "Call"
                        ],
                        [
                            "self.o(output)[-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_sequence_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.pe[:, :x.size(1), :]",
                            "BinOp"
                        ],
                        [
                            "[i.cuda() for i in x]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.w(x_emb)",
                            "Call"
                        ],
                        [
                            "x.unbind(0)",
                            "Call"
                        ],
                        [
                            "self.graph_encoder(data_batch, mask_pad_g)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[i.cuda() for i in x]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(x, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.w(x_emb)",
                            "Call"
                        ],
                        [
                            "x.unbind(0)",
                            "Call"
                        ],
                        [
                            "self.graph_encoder(data_batch, mask_pad_g)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_161": {
                "variable": {
                    "value": "word_type",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "word_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[w.cuda() for w in word_type]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(word_type, batch_first=True)",
                            "Call"
                        ],
                        [
                            "[w.cuda() for w in word_type]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(word_type, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_242": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_246": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(outputs.size(-1))",
                            "Call"
                        ],
                        [
                            "weight.to(outputs.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(outputs.size(-1))",
                            "Call"
                        ],
                        [
                            "weight.to(outputs.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_272": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_276": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "targets.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(outputs.size(-1))",
                            "Call"
                        ],
                        [
                            "weight.to(outputs.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(outputs.size(-1))",
                            "Call"
                        ],
                        [
                            "weight.to(outputs.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "(seq_len, seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_75": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_246": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_outputs.contiguous().view(-1, hidden_outputs.size(2))",
                            "Call"
                        ],
                        [
                            "hidden_outputs.contiguous().view(-1, hidden_outputs.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_276": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_outputs.contiguous().view(-1, hidden_outputs.size(2))",
                            "Call"
                        ],
                        [
                            "hidden_outputs.contiguous().view(-1, hidden_outputs.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_33": {
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/optims.py": {
        "torch": {
            "SGD_11": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__35": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/train.py": {
        "torch": {
            "is_available_86": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_330": {
                "obj": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_sample': model_state_dict_sample, 'model_generate': model_state_dict_generate, 'config': config, 'optim_sample': optim_sample, 'optim_generate': optim_generate, 'updates': updates}",
                            "Dict"
                        ],
                        [
                            "torch.load(os.path.join(log_path, args.restore))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_345": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_373": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(log_path, args.restore)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_347": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sample_prob, 0)",
                            "Call"
                        ],
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(sample_prob_ori - 1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sample_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_127": {
                "input": {
                    "value": "generate_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(generate_loss)",
                            "Call"
                        ],
                        [
                            "generate_loss.detach().data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_157": {
                "variable": {
                    "value": "sample_prob_ori",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sample_prob, 0)",
                            "Call"
                        ],
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(sample_prob_ori - 1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sample_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_prob_ori - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_162": {
                "variable": {
                    "value": "generate_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generate_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(generate_loss)",
                            "Call"
                        ],
                        [
                            "generate_loss.detach().data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mul_168": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - generate_loss",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sample_prob, 0)",
                            "Call"
                        ],
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(sample_prob_ori - 1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sample_prob)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_159": {
                "input": {
                    "value": "sample_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sample_prob, 0)",
                            "Call"
                        ],
                        [
                            "[s.cuda() for s in sample_prob]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(sample_prob_ori - 1)",
                            "Call"
                        ],
                        [
                            "-torch.log(sample_prob)",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "AD_generation-main/util/ml_utils.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AD_generation-main/util/vis_utils.py": {
        "torch": {
            "is_tensor_31": {
                "obj": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}