{
    "layer/loss_func.py": {
        "tensorflow": {
            "reduce_sum_7": {
                "variable": {
                    "value": "anchors",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_true)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "greater_8": {
                "variable": {
                    "value": "anchors",
                    "possible_values": []
                },
                "x": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(y_true), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.greater(anchors, tf.constant(0.5))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(anchors, tf.float32), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.5)",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "variable": {
                    "value": "anchors",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(anchors, tf.float32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_13": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "-(y_true[:, :, 0] * y_pred[:, :, 0] + y_true[:, :, 1] * y_pred[:, :, 1])",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss / anchors",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "input_tensor": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "-(y_true[:, :, 0] * y_pred[:, :, 0] + y_true[:, :, 1] * y_pred[:, :, 1])",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ],
                        [
                            "loss / anchors",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_7": {
                "x": {
                    "value": "y_true",
                    "possible_values": []
                }
            },
            "constant_8": {
                "value": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "cast_9": {
                "x": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(y_true), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.greater(anchors, tf.constant(0.5))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(anchors, tf.float32), 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    },
    "net/bbox_3D_net.py": {
        "tensorflow": {
            "l2_normalize_11": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "Flatten()(vgg16_model.output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    }
}