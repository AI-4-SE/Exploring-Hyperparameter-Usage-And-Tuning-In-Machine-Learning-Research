{
    "back_test.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "v[i * batch_size:(i + 1) * batch_size, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "back_test_mlp.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "v[i * batch_size:(i + 1) * batch_size, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torch_model.py": {
        "torch": {
            "mean_20": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_31": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "neg_45": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(f, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_48": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sefl.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "subtract",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_stocks - 2 * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "torch.log(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "f[:, :num_stocks // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_18": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_19": {
                "input": {
                    "value": "torch.neg(f[:, i:num_stocks - i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "f[:, :num_stocks // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "torch.sum(torch.exp(f[:, i:num_stocks - i]), dim=1) * torch.sum(torch.exp(torch.neg(f[:, i:num_stocks - i])), dim=1) - subtract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "f[:, num_stocks // 2:] - f[:, :num_stocks // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_45": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_47": {
                "input": {
                    "value": "f[:, i:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_19": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.exp(torch.neg(f[:, i:num_stocks - i]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "torch.neg(f[:, i:num_stocks - i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "neg_30": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "torch_model_mlp.py": {
        "torch": {
            "mean_20": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_31": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "neg_45": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(f, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_48": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sefl.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "subtract",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_stocks - 2 * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "torch.log(l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "f[:, :num_stocks // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_18": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_19": {
                "input": {
                    "value": "torch.neg(f[:, i:num_stocks - i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "f[:, :num_stocks // 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "torch.sum(torch.exp(f[:, i:num_stocks - i]), dim=1) * torch.sum(torch.exp(torch.neg(f[:, i:num_stocks - i])), dim=1) - subtract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "f[:, num_stocks // 2:] - f[:, :num_stocks // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "l + torch.logsumexp(f[:, i:], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.sum(f[:, num_stocks // 2:], dim=1) - torch.sum(f[:, :num_stocks // 2], dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, requires_grad=False) + torch.exp(f[:, num_stocks // 2:] - f[:, :num_stocks // 2])",
                            "BinOp"
                        ],
                        [
                            "torch.neg(torch.sum(f, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.mean(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_45": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_47": {
                "input": {
                    "value": "f[:, i:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_19": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.exp(torch.neg(f[:, i:num_stocks - i]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "torch.neg(f[:, i:num_stocks - i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "neg_30": {
                "input": {
                    "value": "f[:, i:num_stocks - i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_84": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate[args.loss_type]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_87": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "random_batch(features, ranks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name + str(itr) + '.dat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_mlp.py": {
        "torch": {
            "MSELoss_81": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_grad_enabled_85": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name + str(itr) + '.dat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}