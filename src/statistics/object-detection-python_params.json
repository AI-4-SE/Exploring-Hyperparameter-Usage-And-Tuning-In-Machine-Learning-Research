{
    "loss.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "LAMBDA_COORD",
                    "possible_values": []
                },
                "value": {
                    "value": "5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "LAMBDA_NOOBJ",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "epsilon",
                    "possible_values": []
                },
                "value": {
                    "value": "1e-06",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "equal_18": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true[..., 4]",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_19": {
                "variable": {
                    "value": "neg_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true[..., 4]",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "masked_true",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_true, mask)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_25": {
                "variable": {
                    "value": "masked_pred",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, mask)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "neg_masked_pred",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.boolean_mask(y_pred, neg_mask)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "sigmoid_30": {
                "variable": {
                    "value": "masked_pred_xy",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_pred[..., 0:2]",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "masked_pred_wh",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_pred[..., 2:4]",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "masked_pred_o_conf",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_pred[..., 4:5]",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "masked_pred_no_o_conf",
                    "possible_values": []
                },
                "x": {
                    "value": "neg_masked_pred[..., 4:5]",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "total_obj_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(masked_true)[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "total_noobj_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(neg_masked_pred)[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Print_59": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[xy_loss]",
                    "possible_values": []
                },
                "message": {
                    "value": "\\nxy loss:",
                    "possible_values": []
                }
            },
            "Print_60": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[wh_loss]",
                    "possible_values": []
                },
                "message": {
                    "value": "wh loss:",
                    "possible_values": []
                }
            },
            "Print_61": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[obj_loss]",
                    "possible_values": []
                },
                "message": {
                    "value": "obj loss:",
                    "possible_values": []
                }
            },
            "Print_62": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[noobj_loss]",
                    "possible_values": []
                },
                "message": {
                    "value": "noobj loss:",
                    "possible_values": []
                }
            },
            "Print_65": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[y_pred[..., 0]]",
                    "possible_values": []
                },
                "message": {
                    "value": "\\nThe value of prediction x:",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "Print_66": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[y_pred[..., 1]]",
                    "possible_values": []
                },
                "message": {
                    "value": "The value of prediction y:",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "Print_67": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[y_pred[..., 2]]",
                    "possible_values": []
                },
                "message": {
                    "value": "The value of prediction w:",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "Print_68": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[y_pred[..., 3]]",
                    "possible_values": []
                },
                "message": {
                    "value": "The value of prediction h:",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "flattened",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred[..., 4]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "unique_72": {
                "variable": {
                    "value": "(unique_values, _)",
                    "possible_values": []
                },
                "x": {
                    "value": "flattened",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred[..., 4], [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_73": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[unique_values]",
                    "possible_values": []
                },
                "message": {
                    "value": "Unique value of conf",
                    "possible_values": []
                },
                "summarize": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Print_76": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[masked_true]",
                    "possible_values": []
                },
                "message": {
                    "value": "True mas",
                    "possible_values": []
                },
                "summarize": {
                    "value": "15",
                    "possible_values": []
                }
            },
            "Print_77": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.sigmoid(masked_pred)]",
                    "possible_values": []
                },
                "message": {
                    "value": "Pred mask",
                    "possible_values": []
                },
                "summarize": {
                    "value": "15",
                    "possible_values": []
                }
            },
            "Print_78": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "LAMBDA_COORD * (xy_loss + wh_loss) + obj_loss + LAMBDA_NOOBJ * noobj_loss",
                            "BinOp"
                        ],
                        [
                            "tf.Print(loss, [xy_loss], '\\nxy loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [wh_loss], 'wh loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [obj_loss], 'obj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [noobj_loss], 'noobj loss:')",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 0]], '\\nThe value of prediction x:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 1]], 'The value of prediction y:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 2]], 'The value of prediction w:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [y_pred[..., 3]], 'The value of prediction h:', summarize=10)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [unique_values], 'Unique value of conf', summarize=100)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [masked_true], 'True mas', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(masked_pred)], 'Pred mask', summarize=15)",
                            "Call"
                        ],
                        [
                            "tf.Print(loss, [tf.sigmoid(neg_masked_pred)], 'No mask', summarize=15)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.sigmoid(neg_masked_pred)]",
                    "possible_values": []
                },
                "message": {
                    "value": "No mask",
                    "possible_values": []
                },
                "summarize": {
                    "value": "15",
                    "possible_values": []
                }
            },
            "boolean_mask_24": {
                "tensor": {
                    "value": "y_true",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.equal(y_true[..., 4], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_25": {
                "tensor": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.equal(y_true[..., 4], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_26": {
                "tensor": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "mask": {
                    "value": "neg_mask",
                    "possible_values": [
                        [
                            "tf.equal(y_true[..., 4], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.square(masked_true_xy - masked_pred_xy)",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.square(masked_true_wh - masked_pred_wh)",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "tf.square(1 - masked_pred_o_conf)",
                    "possible_values": []
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "tf.square(0 - masked_pred_no_o_conf)",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "masked_true",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_true, mask), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "neg_masked_pred",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, neg_mask), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_51": {
                "x": {
                    "value": "masked_true_xy - masked_pred_xy",
                    "possible_values": []
                }
            },
            "square_52": {
                "x": {
                    "value": "masked_true_wh - masked_pred_wh",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "1 - masked_pred_o_conf",
                    "possible_values": []
                }
            },
            "square_54": {
                "x": {
                    "value": "0 - masked_pred_no_o_conf",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "x": {
                    "value": "masked_pred",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, mask), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_78": {
                "x": {
                    "value": "neg_masked_pred",
                    "possible_values": [
                        [
                            "tf.cast(tf.boolean_mask(y_pred, neg_mask), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "yolo_utils.py": {
        "tensorflow": {
            "maximum_425": {
                "variable": {
                    "value": "inter_top",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bb[0]",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_bb[0]",
                    "possible_values": []
                }
            },
            "maximum_426": {
                "variable": {
                    "value": "inter_left",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bb[1]",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_bb[1]",
                    "possible_values": []
                }
            },
            "minimum_427": {
                "variable": {
                    "value": "inter_bottom",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bb[2]",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_bb[2]",
                    "possible_values": []
                }
            },
            "minimum_428": {
                "variable": {
                    "value": "inter_right",
                    "possible_values": []
                },
                "x": {
                    "value": "true_bb[3]",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_bb[3]",
                    "possible_values": []
                }
            },
            "multiply_431": {
                "variable": {
                    "value": "intersection_area",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(inter_top, inter_bottom)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(inter_right, inter_left)",
                    "possible_values": []
                }
            },
            "multiply_432": {
                "variable": {
                    "value": "true_bb_area",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(true_bb[0], true_bb[2])",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(true_bb[1], true_bb[3])",
                    "possible_values": []
                }
            },
            "multiply_433": {
                "variable": {
                    "value": "pred_bb_area",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(pred_bb[0], pred_bb[2])",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(pred_bb[1], pred_bb[3])",
                    "possible_values": []
                }
            },
            "divide_439": {
                "variable": {
                    "value": "iou",
                    "possible_values": []
                },
                "x": {
                    "value": "intersection_area",
                    "possible_values": [
                        [
                            "(inter_bottom - inter_top) * (inter_right - inter_left)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.subtract(inter_top, inter_bottom), tf.subtract(inter_right, inter_left))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.subtract(tf.add(true_bb_area, pred_bb_area), intersection_area)",
                    "possible_values": []
                }
            },
            "cast_440": {
                "variable": {
                    "value": "iou",
                    "possible_values": []
                },
                "x": {
                    "value": "iou",
                    "possible_values": [
                        [
                            "calculate_iou(bbox, anchor_box)",
                            "Call"
                        ],
                        [
                            "intersection_area / float(true_bb_area + pred_bb_area - intersection_area)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(intersection_area, tf.subtract(tf.add(true_bb_area, pred_bb_area), intersection_area))",
                            "Call"
                        ],
                        [
                            "tf.cast(iou, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iou, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "clip_by_value_456": {
                "variable": {
                    "value": "iou",
                    "possible_values": []
                },
                "t": {
                    "value": "iou",
                    "possible_values": [
                        [
                            "calculate_iou(bbox, anchor_box)",
                            "Call"
                        ],
                        [
                            "intersection_area / float(true_bb_area + pred_bb_area - intersection_area)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(intersection_area, tf.subtract(tf.add(true_bb_area, pred_bb_area), intersection_area))",
                            "Call"
                        ],
                        [
                            "tf.cast(iou, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iou, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cond_451": {
                "pred": {
                    "value": "tf.logical_and(tf.greater(iou, tf.constant(0.0)), tf.greater(tf.constant(1.0), iou))",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : iou",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(-1.0, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "subtract_431": {
                "x": {
                    "value": "inter_right",
                    "possible_values": [
                        [
                            "min(true_bb[3], pred_bb[3])",
                            "Call"
                        ],
                        [
                            "tf.minimum(true_bb[3], pred_bb[3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inter_left",
                    "possible_values": [
                        [
                            "max(true_bb[1], pred_bb[1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(true_bb[1], pred_bb[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_432": {
                "x": {
                    "value": "true_bb[1]",
                    "possible_values": []
                },
                "y": {
                    "value": "true_bb[3]",
                    "possible_values": []
                }
            },
            "subtract_433": {
                "x": {
                    "value": "pred_bb[1]",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_bb[3]",
                    "possible_values": []
                }
            },
            "subtract_439": {
                "x": {
                    "value": "tf.add(true_bb_area, pred_bb_area)",
                    "possible_values": []
                },
                "y": {
                    "value": "intersection_area",
                    "possible_values": [
                        [
                            "(inter_bottom - inter_top) * (inter_right - inter_left)",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.subtract(inter_top, inter_bottom), tf.subtract(inter_right, inter_left))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_451": {
                "x": {
                    "value": "tf.greater(iou, tf.constant(0.0))",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(tf.constant(1.0), iou)",
                    "possible_values": []
                }
            },
            "add_439": {
                "x": {
                    "value": "true_bb_area",
                    "possible_values": [
                        [
                            "(true_bb[2] - true_bb[0]) * (true_bb[3] - true_bb[1])",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.subtract(true_bb[0], true_bb[2]), tf.subtract(true_bb[1], true_bb[3]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_bb_area",
                    "possible_values": [
                        [
                            "(pred_bb[2] - pred_bb[0]) * (pred_bb[3] - pred_bb[1])",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(tf.subtract(pred_bb[0], pred_bb[2]), tf.subtract(pred_bb[1], pred_bb[3]))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_451": {
                "x": {
                    "value": "iou",
                    "possible_values": [
                        [
                            "calculate_iou(bbox, anchor_box)",
                            "Call"
                        ],
                        [
                            "intersection_area / float(true_bb_area + pred_bb_area - intersection_area)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(intersection_area, tf.subtract(tf.add(true_bb_area, pred_bb_area), intersection_area))",
                            "Call"
                        ],
                        [
                            "tf.cast(iou, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iou, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "possible_values": []
                }
            },
            "greater_452": {
                "x": {
                    "value": "tf.constant(1.0)",
                    "possible_values": []
                },
                "y": {
                    "value": "iou",
                    "possible_values": [
                        [
                            "calculate_iou(bbox, anchor_box)",
                            "Call"
                        ],
                        [
                            "intersection_area / float(true_bb_area + pred_bb_area - intersection_area)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(intersection_area, tf.subtract(tf.add(true_bb_area, pred_bb_area), intersection_area))",
                            "Call"
                        ],
                        [
                            "tf.cast(iou, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(iou, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_451": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "constant_452": {
                "value": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "constant_454": {
                "value": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    }
}