{
    "src/utils/utils.py": {
        "sklearn": {},
        "torch": {}
    },
    "src/utils/visualization/t_SNE_Visualization.py": {
        "sklearn": {
            "TSNE_118": {
                "variable": {
                    "value": "digits_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20150101",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "src/NCE/Link.py": {
        "torch": {
            "rand_133": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Call",
                    "possible_values": [
                        [
                            "queue.size(0)",
                            "Call"
                        ],
                        [
                            "len(values)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_116": {
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/NCE/NCEAverage.py": {
        "torch": {
            "ones_13": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_40": {
                "variable": {
                    "value": "weight_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_l, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_l.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ab.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_44": {
                "variable": {
                    "value": "weight_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory_ab, 0, idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "weight_ab.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "l.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_98": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_124": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(self.memory, 0, idx.view(-1))",
                            "Call"
                        ],
                        [
                            "weight.view(batchSize, K + 1, inputSize)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.view(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_181": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_187": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_192": {
                "variable": {
                    "value": "l_neg_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "n.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_pos, l_neg, l_neg_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_49": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_50": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_54": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_ab, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out_l, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_67": {
                "variable": {
                    "value": "out_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_68": {
                "variable": {
                    "value": "out_ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[3].item()",
                            "Call"
                        ],
                        [
                            "self.params[3].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_72": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_79": {
                "variable": {
                    "value": "ab_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory_ab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_129": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_132": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_142": {
                "variable": {
                    "value": "weight_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_202": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_205": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_211": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[2].item()",
                            "Call"
                        ],
                        [
                            "self.params[2].clone().detach().item()",
                            "Call"
                        ],
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_211": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_223": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "l.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "q.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "fmod_225": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(batchSize).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[K, T, -1, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_21": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_22": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[K, T, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "outputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(0)",
                            "Call"
                        ],
                        [
                            "self.memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_166": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.memory_l.size(1)",
                            "Call"
                        ],
                        [
                            "self.memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_54": {
                "input": {
                    "value": "out_ab",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_l, ab.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, T)",
                            "Call"
                        ],
                        [
                            "out_ab.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_ab, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_ab, Z_ab).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_55": {
                "input": {
                    "value": "out_l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight_ab, l.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, T)",
                            "Call"
                        ],
                        [
                            "out_l.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out_l, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out_l, Z_l).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_74": {
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_81": {
                "input": {
                    "value": "ab",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_132": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "self.params[1].item()",
                            "Call"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ],
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_144": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_205": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(weight, x.view(batchSize, inputSize, 1))",
                            "Call"
                        ],
                        [
                            "torch.div(out, T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((l_pos, l_neg, l_neg_2), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/NCE/NCECriterion.py": {
        "torch": {
            "div_24": {
                "variable": {
                    "value": "log_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_28": {
                "variable": {
                    "value": "log_D0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/NCE/alias_multinomial.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_61": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/PSEUDO/clustering.py": {
        "torch": {
            "device_count_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/eda.py": {
        "torch": {}
    },
    "src/TC/basic_augmentation/mixup_methods.py": {
        "torch": {
            "randperm_185": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_215": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_259": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_297": {
                "variable": {
                    "value": "resize_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(t, f_size[0], f_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_304": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_308": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_26": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_28": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "mixed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_111": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "mixed_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/noise.py": {
        "torch": {
            "Upsample_14": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[round(sx), round(sy)]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "round(size[1] / scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "round(size[2] / scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "noise2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "num_samp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/rotation.py": {
        "torch": {
            "zeros_like_65": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2], [3, 4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                            ],
                            "Call"
                        ],
                        [
                            "range(B)",
                            "Call"
                        ],
                        [
                            "range(B)",
                            "Call"
                        ],
                        [
                            "range(B)",
                            "Call"
                        ],
                        [
                            "range(B)",
                            "Call"
                        ],
                        [
                            "range(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "data": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/temporal_augment.py": {
        "torch": {
            "zeros_like_13": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "rotated_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_new_data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/temporal_dropout.py": {
        "torch": {
            "max_pool2d_75": {
                "variable": {
                    "value": "block_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool3d_140": {
                "variable": {
                    "value": "block_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, None, :, :, :]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ],
                        [
                            "(torch.rand(x.shape[0], *x.shape[2:]) < gamma).float()",
                            "Call"
                        ],
                        [
                            "mask.to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.block_size, self.block_size, self.block_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_radio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout3d_178": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_123": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*x.shape[2:]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/temporal_shuffle.py": {
        "torch": {
            "randperm_43": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_45": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randperm_51": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "t // K",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/temporal_sub.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, c, t - 1, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/basic_augmentation/triplet.py": {
        "torch": {
            "arange_31": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "origin_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/config.py": {
        "torch": {
            "ones_61": {
                "variable": {
                    "value": "flip_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "postive_input.size(0) * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "rotation_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "postive_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "postive_rotation_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "postive_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat(input, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/gen_negative.py": {
        "torch": {}
    },
    "src/TC/gen_positive.py": {
        "torch": {}
    },
    "src/TC/video_transformations/functional.py": {
        "torch": {
            "as_tensor_85": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean, dtype=dtype, device=clip.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_86": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(std, dtype=dtype, device=clip.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_9": {
                "obj": {
                    "value": "clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip.clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/TC/video_transformations/videotransforms.py": {
        "torch": {
            "Tensor_314": {
                "variable": {
                    "value": "self.eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_315": {
                "variable": {
                    "value": "self.eigvec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/TC/video_transformations/volume_transforms.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "tensor_clip",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([self.channel_nb, len(clip), int(h), int(w)])",
                            "Call"
                        ],
                        [
                            "np_clip / 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/base.py": {
        "torch": {
            "from_numpy_16": {
                "ndarray": {
                    "value": "pic.transpose([3, 0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/dataloader.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataSet(args, args.root, args.train_list, num_segments=1, new_length=data_length, stride=args.stride, modality=args.mode, dataset=args.dataset, test_mode=False, image_tmpl=image_tmpl if args.mode in ['rgb', 'RGBDiff'] else args.flow_prefix + '{}_{:05d}.jpg', transform=train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataSet(args, args.root, args.val_list, num_segments=1, new_length=data_length, stride=args.stride, modality=args.mode, test_mode=True, dataset=args.dataset, image_tmpl=image_tmpl if args.mode in ['rgb', 'RGBDiff'] else args.flow_prefix + '{}_{:05d}.jpg', random_shift=False, transform=test_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "eval_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataSet(args, args.root, args.val_list, num_segments=1, new_length=data_length, stride=args.stride, modality=args.mode, test_mode=True, dataset=args.dataset, image_tmpl=image_tmpl if args.mode in ['rgb', 'RGBDiff'] else args.flow_prefix + '{}_{:05d}.jpg', random_shift=False, transform=eval_transforms, full_video=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/dataset.py": {
        "torch": {}
    },
    "src/data/video_dataset.py": {
        "torch": {
            "from_numpy_26": {
                "ndarray": {
                    "value": "pic.transpose([3, 0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/feature_extractor.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_19": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/MoCo_loss.py": {
        "torch": {
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_31": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(N, 1, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(N, C, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_34": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(N, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "queue.view(C, self.K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "fmod_49": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(N).cuda()",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.K)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_17": {
                "*size": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/NCEAverage.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ],
                        [
                            "int(params[0].item())",
                            "Call"
                        ],
                        [
                            "int(params[0].item())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_74": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_97": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_101": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(memory, 0, idx.view(-1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.data.resize_(batchSize, inputSize, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_133": {
                "variable": {
                    "value": "gradInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradOutput.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(memory, 0, idx.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_151": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nLem",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_139": {
                "input": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - momentum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[K, T, -1, momentum]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_157": {
                "*size": {
                    "value": "outputSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/loss/NCECriterion.py": {
        "torch": {
            "div_28": {
                "variable": {
                    "value": "lnPmt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Pmt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Pmt_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Pmt.add(K * Pnt + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_33": {
                "variable": {
                    "value": "lnPon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Pon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Pon_div.clone().fill_(K * Pns)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Pon_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.narrow(1, 1, K).add(K * Pns + eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/loss/batch_NCE.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "reordered_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.narrow(0, batchSize // 2, batchSize // 2), x.narrow(0, 0, batchSize // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_55": {
                "variable": {
                    "value": "lnPmt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x * reordered_x.data).sum(1).div_(self.T).exp_()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_prob.sum(1)",
                            "Call"
                        ],
                        [
                            "(all_prob.sum(1) - pos) * self.negM + pos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_59": {
                "variable": {
                    "value": "lnPon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, x.t().data).div_(self.T).exp_() * self.diag_mat",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Pon_div.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_30": {
                "n": {
                    "value": "batchSize * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_38": {
                "n": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_48": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.t().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_1, feature_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/batch_flip_cls_loss.py": {
        "torch": {
            "CrossEntropyLoss_12": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/batch_triplet_loss.py": {
        "torch": {
            "cat_25": {
                "variable": {
                    "value": "reordered_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.narrow(0, batchSize // 2, batchSize // 2), x.narrow(0, 0, batchSize // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_38": {
                "variable": {
                    "value": "lnPmt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x * reordered_x.data).sum(1).div_(self.T).exp_()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_prob.sum(1)",
                            "Call"
                        ],
                        [
                            "(all_prob.sum(1) - pos) * self.negM + pos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_42": {
                "variable": {
                    "value": "lnPon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, x.t().data).div_(self.T).exp_() * self.diag_mat",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Pon_div.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_19": {
                "n": {
                    "value": "batchSize * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_31": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.t().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/config.py": {
        "torch": {
            "NLLLoss_18": {
                "variable": {
                    "value": "train_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_19": {
                "variable": {
                    "value": "val_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.module.base_model[0].parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.module.base_model[0].parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "train_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "val_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/contrastiveLoss.py": {
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_44": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(N, 1, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(N, C, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_47": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(N, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.queue.view(C, self.K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.queue[:, N:], k.transpose(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_36": {
                "input": {
                    "value": "F.cosine_similarity(p[i], n[i], dim=0) / tempeature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "sim_s / sim_all",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_31": {
                "input": {
                    "value": "F.cosine_similarity(p[i], p[j], dim=0) / tempeature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_32": {
                "input": {
                    "value": "F.cosine_similarity(p[i], n[j], dim=0) / tempeature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "F.cosine_similarity(n[i], n[j], dim=0) / tempeature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_34": {
                "input": {
                    "value": "F.cosine_similarity(n[i], p[j], dim=0) / tempeature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosine_similarity_36": {
                "x1": {
                    "value": "p[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_31": {
                "x1": {
                    "value": "p[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "p[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_32": {
                "x1": {
                    "value": "p[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "n[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_33": {
                "x1": {
                    "value": "n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "n[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_34": {
                "x1": {
                    "value": "n[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "p[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/inverse_loss.py": {
        "torch": {
            "MSELoss_26": {
                "variable": {
                    "value": "criteion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_30": {
                "variable": {
                    "value": "rotation_data_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "x_inverse_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "x_inverse_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "rotation_data_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_91": {
                "variable": {
                    "value": "criteion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_37": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_40": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_30": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_31": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/mutual_loss.py": {
        "torch": {
            "NLLLoss_7": {
                "variable": {
                    "value": "cls_criteation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_8": {
                "variable": {
                    "value": "kl_diverge",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_10": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/net_mixup_loss.py": {
        "torch": {
            "MSELoss_13": {
                "variable": {
                    "value": "criteion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/temporal_consistency_loss.py": {
        "torch": {
            "cat_19": {
                "variable": {
                    "value": "reordered_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.narrow(0, batchSize // 2, batchSize // 2), x.narrow(0, 0, batchSize // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_32": {
                "variable": {
                    "value": "lnPmt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x * reordered_x.data).sum(1).div_(self.T).exp_()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "all_div",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_prob.sum(1)",
                            "Call"
                        ],
                        [
                            "(all_prob.sum(1) - pos) * self.negM + pos",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_36": {
                "variable": {
                    "value": "lnPon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(x, x.t().data).div_(self.T).exp_() * self.diag_mat",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Pon_div.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "self.inverse_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_1, features_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "self.cls_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_13": {
                "n": {
                    "value": "batchSize * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.t().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss/temporal_sampling_rate_loss.py": {
        "torch": {
            "CrossEntropyLoss_4": {
                "variable": {
                    "value": "criteion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_10": {
                "data": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                            ],
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/loss/triplet_loss.py": {
        "torch": {
            "MarginRankingLoss_16": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pairwise_distance_20": {
                "variable": {
                    "value": "distance_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "anchor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distance_21": {
                "variable": {
                    "value": "distance_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "anchor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/c3d.py": {
        "torch": {
            "Conv3d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_21": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_26": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_28": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_29": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_31": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_32": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_34": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "variable": {
                    "value": "self.bn4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_39": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "variable": {
                    "value": "self.bn4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_42": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "variable": {
                    "value": "self.conv5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.bn5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_50": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/config.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "base_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_model",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "load_weight(args, model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_model, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "base_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "base_model",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "load_weight(args, model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_model, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "load_weight(args, model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_models, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "TCN(base_model, out_size, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/hr.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_262": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_264": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_265": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "incre_modules",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "incre_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(incre_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_343": {
                "variable": {
                    "value": "downsamp_modules",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "downsamp_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(downsamp_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "final_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=head_channels[3] * head_block.expansion, out_channels=2048, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "modules": {
                    "value": "branches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_223": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "downsamp_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_393": {
                "modules": {
                    "value": "transition_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_398": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_486": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x[0] if i == 0 else self.fuse_layers[i][0](x[0])",
                            "IfExp"
                        ],
                        [
                            "y + x[j]",
                            "BinOp"
                        ],
                        [
                            "y + self.fuse_layers[i][j](x[j])",
                            "BinOp"
                        ],
                        [
                            "self.incre_modules[0](y_list[0])",
                            "Call"
                        ],
                        [
                            "self.incre_modules[i + 1](y_list[i + 1]) + self.downsamp_modules[i](y)",
                            "BinOp"
                        ],
                        [
                            "self.final_layer(y)",
                            "Call"
                        ],
                        [
                            "y.flatten(start_dim=2).mean(dim=2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(y, kernel_size=y.size()[2:]).view(y.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(y)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "y.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_503": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_346": {
                "in_channels": {
                    "value": "head_channels[3] * head_block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_353": {
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_354": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_440": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_221": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "head_channels[i] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "head_channels[i + 1] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_338": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "head_channels[i + 1] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_339": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_401": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_391": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "num_features": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_197": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_375": {
                "num_features": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_377": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_387": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_389": {
                "num_features": {
                    "value": "outchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_390": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_217": {
                "num_features": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/i3d.py": {
        "torch": {
            "from_numpy_471": {
                "variable": {
                    "value": "state_dict[name_pt + .conv3d.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_weights_rs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.transpose(conv_weights, (4, 3, 0, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_156": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.branch_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch_1_conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.branch_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch_2_conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.branch_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch_3_pool",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_0, out_1, out_2, out_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_473": {
                "variable": {
                    "value": "state_dict[name_pt + .conv3d.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "conv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(conv_bias_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_481": {
                "variable": {
                    "value": "state_dict[name_pt + .batch3d.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_weights_rs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_483": {
                "variable": {
                    "value": "state_dict[name_pt + .batch3d.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_485": {
                "variable": {
                    "value": "state_dict[name_pt + .batch3d.running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "moving_mean.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_487": {
                "variable": {
                    "value": "state_dict[name_pt + .batch3d.running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "moving_var.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm3d_133": {
                "variable": {
                    "value": "self.batch3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_shape[4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_145": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.div(norm)",
                            "Call"
                        ],
                        [
                            "-torch.norm(x, 'nuc')",
                            "UnaryOp"
                        ],
                        [
                            "self.conv3d(inp)",
                            "Call"
                        ],
                        [
                            "self.batch3d(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inp)",
                            "Call"
                        ],
                        [
                            "torch.cat((out_0, out_1, out_2, out_3), 1)",
                            "Call"
                        ],
                        [
                            "self.conv3d_1a_7x7(inp)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_2a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_2b_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_2c_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_3a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_3b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_3c(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_4a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4c(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4d(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4e(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4f(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_5a_2x2(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_5b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_5c(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_0c_1x1_custom(out)",
                            "Call"
                        ],
                        [
                            "out.squeeze(3)",
                            "Call"
                        ],
                        [
                            "out.squeeze(3)",
                            "Call"
                        ],
                        [
                            "out.mean(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad3d_155": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "self.id_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d((1, 1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.feature_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d((2, 1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_301": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_303": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_311": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_354": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.div(norm)",
                            "Call"
                        ],
                        [
                            "-torch.norm(x, 'nuc')",
                            "UnaryOp"
                        ],
                        [
                            "self.conv3d(inp)",
                            "Call"
                        ],
                        [
                            "self.batch3d(out)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inp)",
                            "Call"
                        ],
                        [
                            "torch.cat((out_0, out_1, out_2, out_3), 1)",
                            "Call"
                        ],
                        [
                            "self.conv3d_1a_7x7(inp)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_2a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_2b_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_2c_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_3a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_3b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_3c(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_4a_3x3(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4c(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4d(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4e(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_4f(out)",
                            "Call"
                        ],
                        [
                            "self.maxPool3d_5a_2x2(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_5b(out)",
                            "Call"
                        ],
                        [
                            "self.mixed_5c(out)",
                            "Call"
                        ],
                        [
                            "self.avg_pool(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "self.conv3d_0c_1x1_custom(out)",
                            "Call"
                        ],
                        [
                            "out.squeeze(3)",
                            "Call"
                        ],
                        [
                            "out.squeeze(3)",
                            "Call"
                        ],
                        [
                            "out.mean(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_46": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "nuc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad3d_105": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_106": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "conv_shape[3]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_shape[4]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "conv_shape[3]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_shape[4]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_121": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "conv_shape[3]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_shape[4]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_padding_shape(kernel_size, stride)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool3d_281": {
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_290": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_294": {
                "output_size": {
                    "value": "(2, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/model.py": {
        "torch": {
            "pow_31": {
                "variable": {
                    "value": "tempered",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1 / self.T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_43": {
                "output_size": {
                    "value": "(1, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_60": {
                "variable": {
                    "value": "self.adaptive_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.G_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(args.logits_channel, self.rotate_classes, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k * self.rotate_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_85": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.out_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.P_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.k * self.rotate_classes, self.rotate_classes, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool1d_88": {
                "variable": {
                    "value": "self.cross_channel_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_90": {
                "variable": {
                    "value": "self.adaptive_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.feature_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.G_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(args.logits_channel, 32, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_102": {
                "variable": {
                    "value": "self.adaptive_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.feature_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[0], input[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.rotate_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_81": {
                "num_features": {
                    "value": "self.rotate_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_83": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_86": {
                "in_channels": {
                    "value": "self.k * self.rotate_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.rotate_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_87": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool3d_105": {
                "variable": {
                    "value": "self.adaptive_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.feature_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_191": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_g / 3 + x_p / 3 + side / 3",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_191": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "32 * out_size[0] * out_size[1] * out_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.base_G_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.G_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.base_G_stream",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool3d((1, 7, 7))",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[0], input[1], input[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_109": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.base_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[0], input[1], input[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_118": {
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "args.logits_channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.represent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_129": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "args.logits_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[0], input[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_133": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_238": {
                "input": {
                    "value": "cls_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.G_stream[j](path_a)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_239": {
                "input": {
                    "value": "cls_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.G_stream[j + 1](path_b)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/mutual_net.py": {
        "torch": {}
    },
    "src/model/r2p1d.py": {
        "torch": {
            "Conv3d_53": {
                "variable": {
                    "value": "self.spatial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, kernel_size[1], kernel_size[2])",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "spatial_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, stride[1], stride[2])",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0, padding[1], padding[2])",
                            "Tuple"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_55": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "variable": {
                    "value": "self.temporal_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intermed_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size[0], 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "temporal_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(stride[0], 1, 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(padding[0], 0, 0)",
                            "Tuple"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_105": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_110": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.outrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_144": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm3d_174": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_184": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "variable": {
                    "value": "self.downsamplebn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.id_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d((1, 1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.feature_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_190": {
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_195": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_199": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/r3d.py": {
        "torch": {
            "avg_pool3d_27": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cp(self.avgpool_custom(x))",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(3).mean(2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_28": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_121": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_130": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_142": {
                "variable": {
                    "value": "self.avgpool_custom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_144": {
                "variable": {
                    "value": "self.cp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(last_duration, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.id_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d((1, 1, 1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.feature_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.AdaptiveAvgPool3d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_219": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cp(self.avgpool_custom(x))",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(3).mean(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_150": {
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_155": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_159": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_180": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_185": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/triplet_net.py": {
        "torch": {}
    },
    "src/sequence_mutual_trainer.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_34": {
                "variable": {
                    "value": "loss_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_100": {
                "variable": {
                    "value": "loss_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "loss_ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_161": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_54": {
                "input": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "input": {
                    "value": "Variable(outputs[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_121": {
                "input": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "input": {
                    "value": "Variable(outputs[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {}
    },
    "src/train_temporal_dis.py": {
        "torch": {
            "randperm_193": {
                "variable": {
                    "value": "forward_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs[0].size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "backward_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs[0].size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_195": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bsz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs[0].size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_310": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "I3D(num_classes=101, modality=args.mode, dropout_prob=args.dropout, with_classifier=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "R2Plus1DNet((1, 1, 1, 1), num_classes=num_class, with_classifier=False)",
                            "Call"
                        ],
                        [
                            "resnet18(num_classes=num_class, with_classifier=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_311": {
                "variable": {
                    "value": "model_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_ema",
                    "type": "Call",
                    "possible_values": [
                        [
                            "I3D(num_classes=101, modality=args.mode, dropout_prob=args.dropout, with_classifier=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model_ema)",
                            "Call"
                        ],
                        [
                            "R2Plus1DNet((1, 1, 1, 1), num_classes=num_class, with_classifier=False)",
                            "Call"
                        ],
                        [
                            "model_ema.cuda()",
                            "Call"
                        ],
                        [
                            "resnet18(num_classes=num_class, with_classifier=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_321": {
                "variable": {
                    "value": "cls_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_327": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pseudo_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(train_samples)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pseudo_labels).cuda().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_245": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'current.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TripletMarginLoss_483": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_227": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'current.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_248": {
                "obj": {
                    "value": "state",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'model': model.state_dict(), 'contrast': contrast.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'current.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_337": {
                "variable": {
                    "value": "optimizer_ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_ema.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_348": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "synchronize_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer.py": {
        "torch": {}
    },
    "src/triplet_visualization.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/bk.py": {
        "torch": {
            "from_numpy_319": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array([[1, 2], [3, 4]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/checkpoint_record.py": {
        "torch": {
            "save_93": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/gradient_check.py": {
        "torch": {}
    },
    "src/utils/load_weights.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/visualization/triplet_visualization.py": {
        "torch": {}
    }
}