{
    "code/data_analysis/compute_ic.py": {
        "sklearn": {
            "roc_auc_score_28": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_31": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/data_analysis/icu_data_analysis.py": {
        "sklearn": {
            "GridSearchCV_77": {
                "variable": {
                    "value": "cv_est",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "XGBRegressor(objective=objective_function, max_depth=4, verbosity=0, reg_lambda=0, learning_rate=0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'n_estimators': ntrees}]",
                            "List"
                        ],
                        [
                            "{'hidden_layer_sizes': hidden_layer_sizes}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_88": {
                "variable": {
                    "value": "cv_est",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "mlp_class(activation='relu', solver='adam', max_iter=2000, alpha=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'n_estimators': ntrees}]",
                            "List"
                        ],
                        [
                            "{'hidden_layer_sizes': hidden_layer_sizes}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/data_analysis/measures_of_predictiveness.py": {
        "sklearn": {
            "roc_auc_score_79": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_77": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_75": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_101": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_99": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_97": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/data_analysis/process_icu_data.py": {
        "sklearn": {
            "train_test_split_295": {
                "variable": {
                    "value": "mats",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "icu_subjects",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(args[0])",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "1.0 - train_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/sims/compute_ic.py": {
        "sklearn": {
            "roc_auc_score_28": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_31": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/sims/measures_of_predictiveness.py": {
        "sklearn": {
            "roc_auc_score_79": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_77": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_75": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_101": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_99": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_97": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.empty((data.y_train.shape[0],))",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/sims/run_shapley_sim_once.py": {
        "sklearn": {
            "GridSearchCV_78": {
                "variable": {
                    "value": "cv_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "XGBRegressor(objective=objective_function, max_depth=1, verbosity=0, learning_rate=0.01, reg_lambda=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid_tree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'n_estimators': ntrees_tree, 'reg_alpha': lambdas_tree}]",
                            "List"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_84": {
                "variable": {
                    "value": "ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_97": {
                "variable": {
                    "value": "cv_tree_small",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "XGBRegressor(objective=objective_function, max_depth=1, verbosity=0, learning_rate=0.01, reg_lambda=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid_tree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'n_estimators': ntrees_tree, 'reg_alpha': lambdas_tree}]",
                            "List"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_165": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}