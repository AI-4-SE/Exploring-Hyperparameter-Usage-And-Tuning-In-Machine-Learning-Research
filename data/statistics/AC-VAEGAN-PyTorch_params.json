{
    "decoder.py": {
        "torch": {
            "ConvTranspose2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_out",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(ten)",
                            "Call"
                        ],
                        [
                            "self.bn(ten)",
                            "Call"
                        ],
                        [
                            "F.relu(ten, True)",
                            "Call"
                        ],
                        [
                            "self.fc(ten_cat)",
                            "Call"
                        ],
                        [
                            "ten.view(len(ten), -1, 8, 8)",
                            "Call"
                        ],
                        [
                            "self.conv(ten)",
                            "Call"
                        ],
                        [
                            "ten",
                            "Method Argument"
                        ],
                        [
                            "ten",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=z_size + num_classes, out_features=8 * 8 * size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "z_size + num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8 * 8 * size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "8 * 8 * size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.size, out_channels=3, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "discriminator.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=8 * 8 * self.size, out_features=512, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc_aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_39": {
                "variable": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ten, other_ten)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=32, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "8 * 8 * self.size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "input": {
                    "value": "ten_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_disc(ten)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_59": {
                "input": {
                    "value": "ten_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_aux(ten)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoder.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_in",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_out",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(ten)",
                            "Call"
                        ],
                        [
                            "self.bn(ten)",
                            "Call"
                        ],
                        [
                            "F.relu(ten, False)",
                            "Call"
                        ],
                        [
                            "self.conv(ten)",
                            "Call"
                        ],
                        [
                            "ten.view(len(ten), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(ten)",
                            "Call"
                        ],
                        [
                            "ten",
                            "Method Argument"
                        ],
                        [
                            "ten",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=8 * 8 * self.size, out_features=1024, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.l_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.l_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "8 * 8 * self.size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_47": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.from_numpy(label)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(0, num_classes, batchsize)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "sum_116": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(layer_original - layer_predicted) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_127": {
                "variable": {
                    "value": "aux_criteron",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_48": {
                "variable": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_variances * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "variable": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_variances * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "-variances.exp() - torch.pow(mu, 2) + variances + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "labels_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_original",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_122": {
                "input": {
                    "value": "1 - labels_sampled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_124": {
                "input": {
                    "value": "1 - labels_original",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_125": {
                "input": {
                    "value": "labels_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_sampled",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_51": {
                "*size": {
                    "value": "len(ten)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "len(ten)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "gen_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "len(ten)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_113": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(ten)",
                            "Call"
                        ],
                        [
                            "self.encoder(ten)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_85": {
                "variable": {
                    "value": "optimizer_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_88": {
                "variable": {
                    "value": "lr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(params=net.encoder.parameters(), lr=lr, alpha=0.9, eps=1e-08, weight_decay=0, momentum=0, centered=False)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.decay_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "RMSprop_90": {
                "variable": {
                    "value": "optimizer_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_92": {
                "variable": {
                    "value": "lr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(params=net.decoder.parameters(), lr=lr, alpha=0.9, eps=1e-08, weight_decay=0, momentum=0, centered=False)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.decay_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "RMSprop_95": {
                "variable": {
                    "value": "optimizer_discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_97": {
                "variable": {
                    "value": "lr_discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RMSprop(params=net.discriminator.parameters(), lr=lr, alpha=0.9, eps=1e-08, weight_decay=0, momentum=0, centered=False)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.decay_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(root=train_folder, download=True, transform=transforms.Compose([transforms.Scale(z_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_301": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN(z_size=z_size, recon_level=recon_level).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_156": {
                "variable": {
                    "value": "one_hot_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "aux_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(target_batch, requires_grad=False).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_183": {
                "input": {
                    "value": "mse_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_185": {
                "input": {
                    "value": "nllloss_aux_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_187": {
                "input": {
                    "value": "lambda_mse * mse_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "bce_dis_sampled_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_212": {
                "input": {
                    "value": "bce_dis_sampled_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_215": {
                "input": {
                    "value": "bce_dis_sampled_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_192": {
                "input": {
                    "value": "nle_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_204": {
                "input": {
                    "value": "mse_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_205": {
                "input": {
                    "value": "kl_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_195": {
                "input": {
                    "value": "nllloss_aux_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_198": {
                "input": {
                    "value": "lambda_mse * mse_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_203": {
                "input": {
                    "value": "mse_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_207": {
                "input": {
                    "value": "nllloss_aux_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_199": {
                "input": {
                    "value": "bce_dis_sampled_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_194": {
                "input": {
                    "value": "bce_dis_sampled_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VAEGAN.loss(data_target, out, out_layer_original, out_layer_predicted, out_labels_original, out_labels_sampled, mus, variances, aux_labels_original, aux_labels_sampled, aux_label_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}