{
    "Transteleop/data/__init__.py": {
        "torch": {}
    },
    "Transteleop/data/base_dataset.py": {
        "torch": {
            "BaseDataset_15": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "possible_values": [
                        [
                            "img.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (opt.load_size, opt.load_size))",
                            "Call"
                        ],
                        [
                            "img / 255.0 * 2.0 - 1",
                            "BinOp"
                        ],
                        [
                            "img[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M, (opt.load_size, opt.load_size), borderValue=255)",
                            "Call"
                        ],
                        [
                            "img.clip(max=255.0, min=0.0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Transteleop/data/image_folder.py": {
        "torch": {
            "ImageFolder_40": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.imgs": {
                    "value": "imgs",
                    "possible_values": [
                        [
                            "make_dataset(root)",
                            "Call"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.return_paths": {
                    "value": "return_paths",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loader": {
                    "value": "loader",
                    "possible_values": [
                        [
                            "default_loader",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Transteleop/models/aejoint_model.py": {
        "torch": {
            "tensor_62": {
                "variable": {
                    "value": "self.joint_upper_range",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.349, 1.571, 1.571, 1.571, 0.785, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 0.349, 1.571, 1.571, 1.571, 1.047, 1.222, 0.209, 0.524, 1.571]",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "self.joint_lower_range",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.349, 0, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -0.349, 0, 0, 0, -1.047, 0, -0.209, -0.524, 0]",
                    "possible_values": []
                }
            },
            "MSELoss_47": {
                "variable": {
                    "value": "self.criterionL2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "self.optimizer_G",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/models/base_model.py": {
        "torch": {
            "device_42": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_186": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Transteleop/models/networks.py": {
        "torch": {
            "Identity_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "GANLoss_226": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.gan_mode": {
                    "value": "gan_mode",
                    "possible_values": []
                }
            },
            "L1Loss_334": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.keypoints_factor": {
                    "value": "keypoints_factor",
                    "possible_values": []
                }
            },
            "JointpostGenerator_345": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.demo_mode": {
                    "value": "demo_mode",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_393": {
                    "variable": {
                        "value": "self.model1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_403": {
                    "variable": {
                        "value": "self.model2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_412": {
                    "variable": {
                        "value": "self.model_joint",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_433": {
                    "variable": {
                        "value": "self.model3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "self.is_stn": {
                    "value": "stn",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResnetGenerator_458": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_505": {
                    "variable": {
                        "value": "self.model1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "self.fc_embedding": {
                    "value": "fc_embedding",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_545": {
                    "variable": {
                        "value": "self.model3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "self.is_stn": {
                    "value": "stn",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ContextGenerator_568": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.input_size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ],
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_600": {
                    "variable": {
                        "value": "self.model1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_610": {
                    "variable": {
                        "value": "self.model2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_619": {
                    "variable": {
                        "value": "self.model_joint",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "Sequential_640": {
                    "variable": {
                        "value": "self.model3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*model",
                        "possible_values": []
                    }
                },
                "self.is_stn": {
                    "value": "stn",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResnetBlock_661": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "NLayerDiscriminator_721": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "nf_mult_prev": {
                    "value": "nf_mult",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "min(2 ** n, 8)",
                            "Call"
                        ],
                        [
                            "min(2 ** n_layers, 8)",
                            "Call"
                        ]
                    ]
                },
                "Sequential_763": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*sequence",
                        "possible_values": []
                    }
                }
            },
            "PixelDiscriminator_770": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_795": {
                    "variable": {
                        "value": "self.net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.net",
                        "possible_values": []
                    }
                }
            },
            "STN_802": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_806": {
                    "variable": {
                        "value": "self.localization",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(input_nc, 8, kernel_size=7)",
                        "possible_values": []
                    }
                },
                "Sequential_829": {
                    "variable": {
                        "value": "self.fc_loc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(self.nn_size, 256)",
                        "possible_values": []
                    }
                }
            },
            "LambdaLR_64": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, input_size, fc_embedding, g_embed, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9, stn=stn)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, input_size, fc_embedding, g_embed, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=6, stn=stn)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, input_size, fc_embedding, g_embed, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=3, stn=stn)",
                            "Call"
                        ],
                        [
                            "JointpostGenerator(input_nc, output_nc, ngf, input_size, g_embed=g_embed, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=3, stn=stn, demo_mode=demo_mode)",
                            "Call"
                        ],
                        [
                            "ContextGenerator(input_nc, output_nc, ngf, input_size, g_embed, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=3, stn=stn)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers=3, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers_D, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "PixelDiscriminator(input_nc, ndf, norm_layer=norm_layer)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_324": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "possible_values": [
                        [
                            "real_data",
                            "Name"
                        ],
                        [
                            "fake_data",
                            "Name"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "abs_340": {
                "variable": {
                    "value": "l1_error",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction - real",
                    "possible_values": []
                }
            },
            "affine_grid_844": {
                "variable": {
                    "value": "grid",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "self.fc_loc(xs)",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "possible_values": []
                }
            },
            "grid_sample_845": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.model1(xs)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flat_fts)",
                            "Call"
                        ],
                        [
                            "x_embed.view(-1, self.fc_output_dim, self.map, self.map)",
                            "Call"
                        ],
                        [
                            "self.model1(xs)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.flat_fts)",
                            "Call"
                        ],
                        [
                            "self.model2(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.fc_output_dim, self.map, self.map)",
                            "Call"
                        ],
                        [
                            "self.model1(xs)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_66": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_249": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_342": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "self.loss(prediction, target_tensor)",
                            "Call"
                        ],
                        [
                            "-prediction.mean()",
                            "UnaryOp"
                        ],
                        [
                            "prediction.mean()",
                            "Call"
                        ],
                        [
                            "l1_error * uv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_524": {
                "variable": {
                    "value": "self.model2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Sequential_713": {
                "*args": {
                    "value": "*conv_block",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_68": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_246": {
                "data": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_252": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_375": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_378": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "in_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "BatchNorm1d_398": {
                "num_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "LeakyReLU_399": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "in_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                }
            },
            "BatchNorm1d_401": {
                "num_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                }
            },
            "ReLU_402": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "in_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "BatchNorm1d_406": {
                "num_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "in_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_409": {
                "num_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_410": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "in_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "22",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_429": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_431": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_487": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_490": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_541": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_542": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_543": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_582": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_583": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_585": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Conv2d_604": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.map",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_606": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_607": {
                "in_channels": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.map",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_609": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_612": {
                "in_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "BatchNorm1d_613": {
                "num_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                }
            },
            "ReLU_614": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_615": {
                "in_features": {
                    "value": "g_embed * 64",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_616": {
                "num_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_617": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_618": {
                "in_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "22",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_636": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_637": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tanh_638": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_698": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_698": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_711": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_741": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "LeakyReLU_741": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_756": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_758": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_761": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_788": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LeakyReLU_789": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_790": {
                "in_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_792": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_793": {
                "in_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_807": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "MaxPool2d_808": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_809": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_810": {
                "in_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "MaxPool2d_811": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_812": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_830": {
                "in_features": {
                    "value": "self.nn_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_831": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_832": {
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_833": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_834": {
                "in_features": {
                    "value": "32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * 2",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_70": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.n_epochs",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "rand_316": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "ones_325": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_385": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_417": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_422": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_440": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.input_size",
                    "possible_values": []
                }
            },
            "Conv2d_495": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_497": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "in_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                }
            },
            "BatchNorm1d_513": {
                "num_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                }
            },
            "Linear_516": {
                "in_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_517": {
                "num_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_518": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "in_features": {
                    "value": "g_embed",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                }
            },
            "BatchNorm1d_520": {
                "num_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                }
            },
            "Linear_521": {
                "in_features": {
                    "value": "g_embed * 32",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                }
            },
            "BatchNorm1d_522": {
                "num_features": {
                    "value": "self.flat_fts",
                    "possible_values": []
                }
            },
            "ReLU_523": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_529": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_534": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_552": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.input_size",
                    "possible_values": []
                }
            },
            "Conv2d_590": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_592": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_624": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_629": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_647": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.input_size",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_690": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_700": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_704": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_748": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_750": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_692": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_706": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/models/pix2pix_model.py": {
        "torch": {
            "Adam_80": {
                "variable": {
                    "value": "self.optimizer_G",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "self.optimizer_D",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "MSELoss_76": {
                "variable": {
                    "value": "self.criterionL1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "L1Loss_78": {
                "variable": {
                    "value": "self.criterionL1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "fake_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.stn_A, self.fake_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "fake_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "real_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.stn_A, self.real_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "real_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "fake_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.stn_A, self.fake_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "fake_AB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/options/base_options.py": {
        "torch": {
            "set_device_143": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/options/demo_options.py": {
        "torch": {
            "set_device_143": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/shadow_demo.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                }
            },
            "set_grad_enabled_31": {
                "mode": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/shadow_demo_moveit.py": {
        "torch": {
            "Tensor_33": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/util/image_pool.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "return_images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "Transteleop/util/util.py": {
        "torch": {
            "mean_41": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "param.grad.data",
                    "possible_values": []
                }
            }
        }
    }
}