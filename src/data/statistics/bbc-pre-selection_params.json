{
    "bleu.py": {
        "tensorflow": {
            "info_56": {
                "msg": {
                    "value": "Unable to fetch multi-bleu.perl script, using local.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_85": {
                "msg": {
                    "value": "multi-bleu.perl script returned non-zero exit code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_86": {
                "msg": {
                    "value": "error.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Decoders.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_29": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + 2 * hidden_size + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size + hidden_size + 2 * hidden_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, src_context, bg_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "concat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, gru_state[:, -1], src_context, bg_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_81": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + 2 * hidden_size + 2 * hidden_size + 2 * hidden_size + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size + hidden_size + 2 * hidden_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, src_context, bg_context, sel_bg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "concat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, gru_state[:, -1], src_context, bg_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "EncDecModel.py": {
        "torch": {}
    },
    "MAL.py": {
        "torch": {
            "GRU_13": {
                "variable": {
                    "value": "self.c_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "context_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_14": {
                "variable": {
                    "value": "self.a_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "action_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.match_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.c_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.c_embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.b_embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_57": {
                "variable": {
                    "value": "self.c_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_58": {
                "variable": {
                    "value": "self.b_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_64": {
                "variable": {
                    "value": "self.matching_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "8 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "b2c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attn.unnormalized_score(b_enc_output, c_enc_output, key_mask=c_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "c2b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(score, dim=2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "c2b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.o_embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_115": {
                "variable": {
                    "value": "self.matching_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embedding_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.p1_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.p1_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.p1_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + embedding_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.p1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_151": {
                "variable": {
                    "value": "self.o_embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRU_157": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size + hidden_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.linear_mixture",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "selector_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selector_action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(selector_action, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(selector_action.unsqueeze(1), b_map.float()).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.mul(selector_action, (1 - p_s_g).expand_as(selector_action))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "generator_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generator_action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(generator_action, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mul(generator_action, p_s_g.expand_as(generator_action))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.state_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.o_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_148": {
                "variable": {
                    "value": "self.o_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_45": {
                "input": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mlp(feature).squeeze(2) * action_mask",
                            "BinOp"
                        ],
                        [
                            "self.reward(context, action, context_mask, action_mask)",
                            "Call"
                        ],
                        [
                            "rewards.sum(dim=1) / action_mask.float().sum(dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(rewards.size(0)).float()",
                            "Call"
                        ],
                        [
                            "gt.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(rewards.size(0)).float()",
                            "Call"
                        ],
                        [
                            "gt.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MALCopyDataset.py": {
        "torch": {}
    },
    "MALDataset.py": {
        "torch": {}
    },
    "Run_CaKe.py": {
        "torch": {
            "Adam_41": {
                "variable": {
                    "value": "agent_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, list(selector.parameters()) + list(generator.parameters()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "model_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Utils.py": {
        "torch": {
            "arange_38": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lt_38": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_48": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(all_gen_outputs, dim=0).transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "variable": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "gen_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab, dy_vocab]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(get_ms() // 1000)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(get_ms() // 1000)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(get_ms() // 1000)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_119": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([vocab, dy_vocab], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "max_122": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([vocab, dy_vocab], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_130": {
                "input": {
                    "value": "dy_vocab.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "vocab_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_99": {
                "variable": {
                    "value": "draws",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((batch_size,)) * schedule_rate",
                            "BinOp"
                        ],
                        [
                            "prob.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/Dataset.py": {
        "torch": {}
    },
    "data/Utils.py": {
        "torch": {
            "zeros_67": {
                "variable": {
                    "value": "src_map1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(words), len(vocab2id))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "src_map1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(id2vocab1), len(vocab2id2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_74": {
                "variable": {
                    "value": "vocab_overlap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(id2vocab1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sequences), max_len1, max_len2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "word_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(src_vocab2id), 100)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sents, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(lengths) if max_len is None else max_len",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_97": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sequences), max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "model[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(val) for val in splitLine[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[datalist[i][key] for i in range(size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Attentions.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.linear_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "attn_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unnormalized_score(query, key, key_mask, mask, sum_attention)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(attn.view(attn.size(0), -1), self.temperature, hard=False).view(attn.size())",
                            "Call"
                        ],
                        [
                            "attn_.scatter_(2, attn.argmax(dim=2).unsqueeze(2), 1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "self.v(wquh.view(-1, self.hidden_size)).view(batch_size, query_len, key_len)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask, sum_attention=sum_attention)",
                            "Call"
                        ],
                        [
                            "self.unnormalized_score(query, key, key_mask, mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_vs(value).view(batch_size, value_len, num_head, value_size)",
                            "Call"
                        ],
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, value_len, value_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unnormalized_score(query, key, key_mask, mask, sum_attention)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(attn.view(attn.size(0), -1), self.temperature, hard=False).view(attn.size())",
                            "Call"
                        ],
                        [
                            "attn_.scatter_(2, attn.argmax(dim=2).unsqueeze(2), 1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "self.v(wquh.view(-1, self.hidden_size)).view(batch_size, query_len, key_len)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask, sum_attention=sum_attention)",
                            "Call"
                        ],
                        [
                            "self.unnormalized_score(query, key, key_mask, mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_106": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_qs(query).view(batch_size, query_len, num_head, query_size)",
                            "Call"
                        ],
                        [
                            "query.permute(2, 0, 1, 3).contiguous().view(-1, query_len, query_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_119": {
                "variable": {
                    "value": "attn_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unnormalized_score(query, key, key_mask, mask, sum_attention)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(attn.view(attn.size(0), -1), self.temperature, hard=False).view(attn.size())",
                            "Call"
                        ],
                        [
                            "attn_.scatter_(2, attn.argmax(dim=2).unsqueeze(2), 1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "self.v(wquh.view(-1, self.hidden_size)).view(batch_size, query_len, key_len)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask, sum_attention=sum_attention)",
                            "Call"
                        ],
                        [
                            "self.unnormalized_score(query, key, key_mask, mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_vs(value).view(batch_size, value_len, num_head, value_size)",
                            "Call"
                        ],
                        [
                            "value.permute(2, 0, 1, 3).contiguous().view(-1, value_len, value_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "query_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_head * query_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_head * key_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "value_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_head * value_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_142": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "query_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_head * value_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear_coverage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unnormalized_score(query, key, key_mask, mask, sum_attention)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "F.gumbel_softmax(attn.view(attn.size(0), -1), self.temperature, hard=False).view(attn.size())",
                            "Call"
                        ],
                        [
                            "attn_.scatter_(2, attn.argmax(dim=2).unsqueeze(2), 1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "self.v(wquh.view(-1, self.hidden_size)).view(batch_size, query_len, key_len)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask, sum_attention=sum_attention)",
                            "Call"
                        ],
                        [
                            "self.unnormalized_score(query, key, key_mask, mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=2)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - query_mask.unsqueeze(2).expand(batch_size, query_len, key_len), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, key.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(1 - key_mask.unsqueeze(1).expand(batch_size, query_len, key_len), -float('inf'))",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(1 - mask, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.score(query, key, query_mask=query_mask, key_mask=key_mask, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gumbel_softmax_29": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn.view(attn.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "attn_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "attn.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/Criterions.py": {
        "torch": {
            "ones_11": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sum_attentions, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "sum_attentions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[attentions[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Decoders.py": {
        "torch": {
            "Dropout_22": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_28": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size + hidden_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "gru_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, attn_context_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "concat_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, gru_state[:, -1], attn_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Encoders.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "_weight": {
                    "value": "embedding_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_18": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Generations.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(all_gen_outputs, dim=0).transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "all_gen_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "greedy_indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "greedy_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "greedy_indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "greedy_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "greedy_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "decode_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "last_decode_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "merge1D([new_tensor(node.to_sequence_of_values()[1:]) for node in outputs])",
                            "Call"
                        ],
                        [
                            "merge1D([new_tensor(node.to_sequence_of_values()[1:]) for node in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "input": {
                    "value": "gen_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.generate(data, decode_outputs, softmax=True)",
                            "Call"
                        ],
                        [
                            "model.generate(data, decode_outputs, softmax=True)",
                            "Call"
                        ],
                        [
                            "model.generate(data, decode_outputs, softmax=True)",
                            "Call"
                        ],
                        [
                            "model.generate(data, decode_outputs, softmax=True)",
                            "Call"
                        ],
                        [
                            "model.generate(data, decode_outputs, softmax=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "[n.state[i] for n in fringe]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[n.encode_outputs[i] for n in fringe]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "[n.encode_outputs[i] for n in fringe]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Generators.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "tgt_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "p_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_copy(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "out_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_copy.expand_as(logits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_54": {
                "variable": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.view(-1, batch, slen).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_57": {
                "variable": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "copy_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(attention.view(-1, batch, slen).transpose(0, 1), src_map.float()).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.mul(copy_prob, p_copy.expand_as(copy_prob))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_copy.expand_as(copy_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(feature) * self.logit_scale",
                            "BinOp"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/Utils.py": {
        "torch": {
            "tensor_8": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_19": {
                "variable": {
                    "value": "(input_lengths, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_28": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input[perm]",
                            "Subscript"
                        ],
                        [
                            "input.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_32": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "outputs[perm]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "total_length": {
                    "value": "total_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_34": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triu_76": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((len_s, len_s), device=seq.device, dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "(len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/DefaultTrainer.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}