{
    "script/evaluation.py": {
        "torch": {
            "Tensor_32": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_255": {
                "variable": {
                    "value": "Th",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_256": {
                "variable": {
                    "value": "Rh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_31": {
                "obj": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body_params['poses']",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(poses).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_262": {},
            "Tensor_263": {},
            "is_available_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_307": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_309": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_36": {
                "variable": {
                    "value": "cam_params[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "script/smplmodel/geometry.py": {
        "torch": {
            "transpose_59": {
                "variable": {
                    "value": "rmat_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix",
                            "Method Argument"
                        ],
                        [
                            "rotation_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "q0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 1, 2] - rmat_t[:, 2, 1], t0, rmat_t[:, 0, 1] + rmat_t[:, 1, 0], rmat_t[:, 2, 0] + rmat_t[:, 0, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 2, 0] - rmat_t[:, 0, 2], rmat_t[:, 0, 1] + rmat_t[:, 1, 0], t1, rmat_t[:, 1, 2] + rmat_t[:, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rmat_t[:, 0, 1] - rmat_t[:, 1, 0], rmat_t[:, 2, 0] + rmat_t[:, 0, 2], rmat_t[:, 1, 2] + rmat_t[:, 2, 1], t2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "q3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t3, rmat_t[:, 1, 2] - rmat_t[:, 2, 1], rmat_t[:, 2, 0] - rmat_t[:, 0, 2], rmat_t[:, 0, 1] - rmat_t[:, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_138": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_squared_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q1 * q1 + q2 * q2 + q3 * q3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_147": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sin_squared_theta > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "two_theta / sin_theta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * torch.ones_like(sin_theta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_176": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_184": {
                "variable": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l1norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(theta + 1e-08, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_186": {
                "variable": {
                    "value": "normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_188": {
                "variable": {
                    "value": "v_cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_189": {
                "variable": {
                    "value": "v_sin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(l1norm, -1)",
                            "Call"
                        ],
                        [
                            "angle * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_cos, v_sin * normalized]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "pack",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "R.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R, pack]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_224": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "camera_intri[:, :2, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "t0_rep * mask_c0 + t1_rep * mask_c1 + t2_rep * mask_c2 + t3_rep * mask_c3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_214": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.dot(Vt.T, U.T)",
                            "Call"
                        ],
                        [
                            "np.dot(Vt.T, U.T)",
                            "Call"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_218": {
                "variable": {
                    "value": "img_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points3d[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points3d[:, :, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_221": {
                "variable": {
                    "value": "img_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points3d[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_46": {
                "obj": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix",
                            "Method Argument"
                        ],
                        [
                            "rotation_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_125": {
                "obj": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "quaternion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_140": {
                "condition": {
                    "value": "cos_theta < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.atan2(-sin_theta, -cos_theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.atan2(sin_theta, cos_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_146": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "quaternion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_225": {
                "input": {
                    "value": "img_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(points3d[:, :, :2], points3d[:, :, 2:3])",
                            "Call"
                        ],
                        [
                            "torch.div(points3d[:, :, :2], distance)",
                            "Call"
                        ],
                        [
                            "torch.matmul(img_points, camera_mat.transpose(1, 2)) + center",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "camera_mat.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_142": {
                "input": {
                    "value": "-sin_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-cos_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_143": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_215": {
                "input": {
                    "value": "points3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(points3d, Rt) + T",
                            "BinOp"
                        ],
                        [
                            "points3d",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(R, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "script/smplmodel/smplx_utils.py": {
        "torch": {
            "cat_281": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=return_verts)",
                            "Call"
                        ],
                        [
                            "keypoints.joints",
                            "Attribute"
                        ],
                        [
                            "self.GetVerticesAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, expression=expression, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(keypoints, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_body25, vertices)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_body25, vertices)",
                            "Call"
                        ],
                        [
                            "keypoints[:, self.coco17inbody25]",
                            "Subscript"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_coco_hmmr, vertices)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, expression=expression, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_h36m, vertices)",
                            "Call"
                        ],
                        [
                            "self._GetKeypoints(kpts_type=kpts_type, **params)",
                            "Call"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_102": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_173": {
                "variable": {
                    "value": "inp_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "inp_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "inp_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vertices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_208": {
                "variable": {
                    "value": "inp_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_208": {
                "variable": {
                    "value": "inp_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "inp_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "keypoints.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_234": {
                "variable": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "body_pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_90": {
                "input": {
                    "value": "joints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joints",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.joint_maps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inp_rot.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "input": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=return_verts)",
                            "Call"
                        ],
                        [
                            "keypoints.joints",
                            "Attribute"
                        ],
                        [
                            "self.GetVerticesAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, expression=expression, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(keypoints, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_body25, vertices)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_body25, vertices)",
                            "Call"
                        ],
                        [
                            "keypoints[:, self.coco17inbody25]",
                            "Subscript"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_coco_hmmr, vertices)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, expression=expression, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.J_h36m, vertices)",
                            "Call"
                        ],
                        [
                            "self._GetKeypoints(kpts_type=kpts_type, **params)",
                            "Call"
                        ],
                        [
                            "keypoints",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "inp_rot.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.J_body25",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "body25",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.J_body25",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_84": {
                "data": {
                    "value": "joint_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_218": {
                "input": {
                    "value": "verts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.vertices",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(verts, inp_rot.transpose(1, 2)) + inp_trans",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "inp_rot.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.J_body25",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_307": {
                "variable": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "body_pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size - params_batch[key].shape[0], *params_batch[key].shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "params_batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(params_batch[key], zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.J_coco_hmmr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_330": {
                "variable": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_orient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "inp_pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(global_orient, device=body_pose.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "body_pose.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.J_h36m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(betas=betas, global_orient=global_orient, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, expression=expression, return_verts=True).vertices",
                            "Attribute"
                        ],
                        [
                            "self.GetVertices(inp_pose, inp_betas, inp_trans, inp_rot)",
                            "Call"
                        ],
                        [
                            "self.GetKeypointsAll(global_orient=global_orient, inp_rot=inp_rot, inp_trans=inp_trans, betas=inp_betas, body_pose=body_pose, jaw_pose=jaw_pose, left_hand_pose=left_hand_pose, right_hand_pose=right_hand_pose, split=False, return_verts=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_322": {
                "tensors": {
                    "value": "[body25, keypoints[:, 25:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}