{
    "tests/example_envs/test_tag_gridworld_step_cuda.py": {
        "torch": {
            "from_numpy_151": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0]], [[0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_443": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0]], [[0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/multiblocks_per_env/warp_drive/test_action_sampler_multiblocks.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.333, 0.333, 0.333], [0.2, 0.5, 0.3], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], [[0.1, 0.7, 0.2], [0.7, 0.2, 0.1], [0.5, 0.5, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]], [[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "actions_a_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 5), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "planner_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "planner_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25]], [[0.1, 0.6, 0.15, 0.15]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(planner_distribution)",
                            "Call"
                        ],
                        [
                            "planner_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "actions_p_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 1), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.333, 0.333, 0.333], [0.2, 0.5, 0.3], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], [[0.1, 0.7, 0.2], [0.7, 0.2, 0.1], [0.5, 0.5, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]], [[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_245": {
                "variable": {
                    "value": "actions_s_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 5), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/multiblocks_per_env/warp_drive/test_env_reset_multiblocks.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(_done_)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(at)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(bt)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_125": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ct)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(dt)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_129": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(et)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_132": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ft)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_211": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(af)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(bf)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_213": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(cf)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_214": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(df)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_217": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ef)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_220": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ff)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/multiblocks_per_env/warp_drive/test_function_manager_multiblocks.py": {
        "torch": {}
    },
    "tests/warp_drive/test_action_sampler.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.333, 0.333, 0.333], [0.2, 0.5, 0.3], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], [[0.1, 0.7, 0.2], [0.7, 0.2, 0.1], [0.5, 0.5, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]], [[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "actions_a_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 5), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "planner_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "planner_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25]], [[0.1, 0.6, 0.15, 0.15]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(planner_distribution)",
                            "Call"
                        ],
                        [
                            "planner_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "actions_p_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 1), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "agent_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[0.333, 0.333, 0.333], [0.2, 0.5, 0.3], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], [[0.1, 0.7, 0.2], [0.7, 0.2, 0.1], [0.5, 0.5, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ],
                        [
                            "np.array([[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]], [[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(agent_distribution)",
                            "Call"
                        ],
                        [
                            "agent_distribution.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "actions_s_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.empty((10000, 2, 5), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/warp_drive/test_env_reset.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(_done_)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_118": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(at)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(bt)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_120": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ct)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_121": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(dt)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_124": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(et)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_127": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ft)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_206": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(af)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_207": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(bf)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_208": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(cf)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_209": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(df)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_212": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ef)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_215": {
                "variable": {
                    "value": "self.dm.data_on_device_via_torch(ff)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/warp_drive/test_function_manager.py": {
        "torch": {}
    },
    "tests/wd_training/test_env_training.py": {
        "torch": {
            "device_count_35": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "warp_drive/env_cpu_gpu_consistency_checker.py": {
        "torch": {
            "from_numpy_377": {
                "variable": {
                    "value": "env_gpu.cuda_data_manager.data_on_device_via_torch(name)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(actions_list, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/managers/data_manager.py": {
        "torch": {
            "from_numpy_480": {
                "variable": {
                    "value": "torch_tensor_device",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "host_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._host_data[name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/managers/function_manager.py": {
        "torch": {
            "from_numpy_782": {
                "variable": {
                    "value": "data_manager.data_on_device_via_torch(action_name)[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_748": {
                "obj": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "warp_drive/training/algorithms/a2c.py": {
        "torch": {
            "zeros_like_61": {
                "variable": {
                    "value": "returns_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Categorical_102": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "action_probabilities_batch[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "rewards_batch[step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_119": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/training/algorithms/ppo.py": {
        "torch": {
            "zeros_like_64": {
                "variable": {
                    "value": "returns_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_110": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob - old_logprob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_117": {
                "variable": {
                    "value": "policy_surr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * normalized_advantages_batch",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio, 1.0 - self.clip_param, 1.0 + self.clip_param) * normalized_advantages_batch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Categorical_105": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "action_probabilities_batch[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MSELoss_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_114": {
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_prob - old_logprob)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + self.clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "input": {
                    "value": "rewards_batch[step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_131": {
                "data": {
                    "value": "_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/training/example_training_script.py": {
        "torch": {}
    },
    "warp_drive/training/models/fully_connected.py": {
        "torch": {
            "ModuleDict_86": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.policy_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "policy_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(action_space))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.vf_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.fc[str(fc_layer)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dims[fc_layer], output_dims[fc_layer])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "policy_heads[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "act_space",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "flattened_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(flattened_obs_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_234": {
                "input": {
                    "value": "apply_logit_mask(ph(logits), action_masks[idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "input_dims[fc_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dims[fc_layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "warp_drive/training/pytorch_lightning.py": {
        "torch": {
            "Event_744": {
                "variable": {
                    "value": "start_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_745": {
                "variable": {
                    "value": "end_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_962": {
                "variable": {
                    "value": "self.start_event_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_963": {
                "variable": {
                    "value": "self.end_event_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_965": {
                "variable": {
                    "value": "self.start_event_fit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_966": {
                "variable": {
                    "value": "self.end_event_fit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "variable": {
                    "value": "self.episodic_reward_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "self.reward_running_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_envs, num_agents_for_policy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "synchronize_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_719": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_800": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WarpDriveDataset(self._generate_training_data, batch_size=self.training_batch_size_per_env)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.training_batch_size_per_env",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_812": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.models[policy].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ParamScheduler(lr_schedule).get_param_value(init_timestep)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_914": {
                "variable": {
                    "value": "self.episodic_reward_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_1008": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_1026": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "combined_probabilities[action_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_envs, num_agents, action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_550": {
                "input": {
                    "value": "self.reward_running_sum[policy][done_env_ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_600": {
                "f": {
                    "value": "ckpt_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['policy'][policy]['model']['model_ckpt_filepath']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_630": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'{policy}_{self.current_timestep[policy]}.state_dict')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/training/trainer.py": {
        "torch": {
            "Event_420": {
                "variable": {
                    "value": "start_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_421": {
                "variable": {
                    "value": "end_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_649": {
                "variable": {
                    "value": "start_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_650": {
                "variable": {
                    "value": "end_event",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_245": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['trainer'].get('seed', np.int32(time.time())) + self.device_id",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_294": {
                "variable": {
                    "value": "self.optimizers[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.models[policy].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lr_schedules[policy].get_param_value(timestep=self.current_timestep[policy])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "self.episodic_reward_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "self.reward_running_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_envs, num_agents_for_policy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "synchronize_771": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_497": {
                "variable": {
                    "value": "combined_probabilities[action_type]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_envs, num_agents, action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_641": {
                "input": {
                    "value": "self.reward_running_sum[policy][done_env_ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_766": {
                "variable": {
                    "value": "self.episodic_reward_sum[policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__744": {
                "parameters": {
                    "value": "self.models[policy].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm[policy]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_861": {
                "f": {
                    "value": "ckpt_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['policy'][policy]['model']['model_ckpt_filepath']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_895": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'{policy}_{self.current_timestep[policy]}.state_dict')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "warp_drive/training/utils/child_process.py": {
        "torch": {
            "current_device_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "warp_drive/training/utils/device_context.py": {
        "torch": {}
    },
    "warp_drive/training/utils/param_scheduler.py": {
        "torch": {}
    }
}