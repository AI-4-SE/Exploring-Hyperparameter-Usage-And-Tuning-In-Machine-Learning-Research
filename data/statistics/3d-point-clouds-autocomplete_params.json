{
    "core/experiments.py": {
        "sklearn": {
            "TSNE_348": {
                "variable": {
                    "value": "latent_tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_359": {
                "variable": {
                    "value": "tnw_tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_236": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets_dict['all']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "full_model.get_noise_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "pcd",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pcd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pcd).unsqueeze(0).to(device)",
                            "Call"
                        ],
                        [
                            "pcd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "pcd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "dataset": {
                    "value": "cat_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_65": {
                "dataset": {
                    "value": "cat_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "cat_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_gt).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "f_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "f_existing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_gt[f_gt.T[0].argsort()[1024:]]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(f_existing).unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "f_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "s_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s_existing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_gt[s_gt.T[0].argsort()[1024:]]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(s_existing).unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "s_existing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "cat_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_latent).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_341": {
                "variable": {
                    "value": "cat_tnw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_tnw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_tnw).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "existing.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "full_model.get_noise_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "obj_recs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_recs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(obj_recs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "temp_f_missing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_f_missing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temp_f_gt[temp_f_gt.T[0].argsort()[:1024]]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(temp_f_missing).unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_174": {
                "variable": {
                    "value": "temp_f_missing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "temp_s_missing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_s_missing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temp_s_gt[temp_s_gt.T[0].argsort()[:1024]]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(temp_s_missing).unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "temp_s_missing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "latents[cat_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_latent).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_291": {
                "variable": {
                    "value": "tnws[cat_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_tnw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_tnw).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "existing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "existing_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[gt.T[0].argsort()[1024:]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_328": {
                "variable": {
                    "value": "existing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "missing_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[gt.T[0].argsort()[:1024]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_329": {
                "variable": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_334": {
                "variable": {
                    "value": "existing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "existing_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[gt.T[1].argsort()[1024:]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_334": {
                "variable": {
                    "value": "existing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_335": {
                "variable": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "missing_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[gt.T[1].argsort()[:1024]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_335": {
                "variable": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "full_model.get_noise_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "dataset": {
                    "value": "cat_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "ndarray": {
                    "value": "f_gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "pc.T[pc[1].argsort()[:1024]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_326": {
                "ndarray": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_326": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "sklearn": {
            "NearestNeighbors_300": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "denominators",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "retrieved.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_26": {
                "variable": {
                    "value": "denominators",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "retrieved.size(1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "all_cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_cd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_cd, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "all_emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_emd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_emd, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(n0), torch.zeros(n1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "(Mxy.transpose(0, 1), Myy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ge_175": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(n0 + n1).to(Mxx)",
                            "Call"
                        ],
                        [
                            "count + label.index_select(0, idx[i])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "float(k) / 2 * torch.ones(n0 + n1).to(Mxx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_196": {
                "variable": {
                    "value": "(min_val_fromsmp, min_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dist",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_197": {
                "variable": {
                    "value": "(min_val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_dist",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(min_idx.unique().view(-1).size(0)) / float(N_ref)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(cov).to(all_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_108": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_111": {
                "variable": {
                    "value": "emd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "emd_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(emd_lst, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_189": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.ones(n0), torch.zeros(n1))).to(Mxx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(count, float(k) / 2 * torch.ones(n0 + n1).to(Mxx)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_170": {
                "input": {
                    "value": "INFINITY * torch.ones(n0 + n1).to(Mxx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mxx.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Myy.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_175": {
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "n0 + n1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "core/epoch_loops.py": {
        "torch": {
            "mean_25": {
                "variable": {
                    "value": "loss_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_coef * rec_loss_function(gt, reconstruction.permute(0, 2, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_30": {
                "variable": {
                    "value": "loss_kld",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_kld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loss_kld / i",
                            "BinOp"
                        ],
                        [
                            "0.5 * (torch.exp(logvar) + torch.square(mu) - 1 - logvar).sum()",
                            "BinOp"
                        ],
                        [
                            "torch.div(loss_kld, existing.shape[0])",
                            "Call"
                        ],
                        [
                            "loss_kld + loss_kld.item()",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "existing.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "loss_our_cd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_coef * loss_function(gt, reconstruction.permute(0, 2, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_29": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_model(existing, missing, list(gt.shape), epoch, device)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_29": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_model(existing, missing, list(gt.shape), epoch, device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/main.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(config['dataset'])",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "dataset": {
                    "value": "cat_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "full_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_O.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_S.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/setup.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_16": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "gpu_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_93": {
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_model.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:' + str(gpu_id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_O.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_100": {
                "f": {
                    "value": "join(weights_path, f'{epoch:05}_S.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/base_dataset.py": {
        "torch": {}
    },
    "datasets/shapenet_3depn.py": {
        "torch": {
            "tensor_114": {
                "variable": {
                    "value": "raw_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "raw_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(trimesh.load(raw_ply_path).vertices)",
                            "Call"
                        ],
                        [
                            "self._rotate_point_cloud_by_axis_angle(raw_pc)",
                            "Call"
                        ],
                        [
                            "sample_point_cloud_by_n(raw_pc, 1024)",
                            "Call"
                        ],
                        [
                            "torch.tensor(raw_pc, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "real_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "real_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(trimesh.load(real_ply_path).vertices)",
                            "Call"
                        ],
                        [
                            "sample_point_cloud_by_n(real_pc, 2048)",
                            "Call"
                        ],
                        [
                            "torch.tensor(real_pc, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "losses/champfer_loss.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_13": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_14": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_15": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_16": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_22": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_23": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_24": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_29": {
                "variable": {
                    "value": "diag_ind_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_30": {
                "variable": {
                    "value": "diag_ind_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/encoder.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=3, out_channels=64, kernel_size=1, bias=self.use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 512, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.std_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_39": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std_layer(logit)",
                            "Call"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_40": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_15": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_18": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_51": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std_layer(logit)",
                            "Call"
                        ],
                        [
                            "logvar",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/full_model.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "reconstruction",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "reconstruction[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "target_network(target_network_input.to(device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[codes, real_mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[random_mu, real_mu]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/hyper_network.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.input_size, out_features=64, bias=self.use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[target_network_layer(output) for target_network_layer in self.output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "(target_network_out_ch[x - 1] + target_network_use_bias) * target_network_out_ch[x]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/target_network.py": {
        "torch": {
            "ReLU_28": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(1, len(out_ch))",
                            "Call"
                        ],
                        [
                            "torch.mm(x, torch.transpose(self.layers[layer_index]['weight'], 0, 1))",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x + self.layers[layer_index]['bias']",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(self.layers[layer_index]['weight'], 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(1, len(out_ch))",
                            "Call"
                        ],
                        [
                            "torch.mm(x, torch.transpose(self.layers[layer_index]['weight'], 0, 1))",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x + self.layers[layer_index]['bias']",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(self.output['weight'], 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "self.layers[layer_index]['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "input": {
                    "value": "self.output['weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation/completeness.py": {
        "torch": {
            "sqrt_29": {
                "variable": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((pc1 - pc2) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "(shortest_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((pc1 - pc2) ** 2, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_33": {
                "variable": {
                    "value": "(hausdorff_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "shortest_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(l2_dist, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_36": {
                "variable": {
                    "value": "hausdorff_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hausdorff_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(shortest_dist, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(hausdorff_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_58": {
                "variable": {
                    "value": "gen_pcs_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gen_pcs_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor(pc) for pc in gen_pcs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(gen_pcs_tensors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "existing_pc_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "existing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "existing",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "existing_pc_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "(pc1 - pc2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation/mmd.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ref_pcs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "chunk",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterate_in_chunks(sample_pcs, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_40": {
                "variable": {
                    "value": "best_in_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dist_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_to_s.mean(dim=1) + s_to_ref.mean(dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/points.py": {
        "torch": {
            "zeros_10": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[size[0] * 3, *size[1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_11": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([size[0] * 3, *size[1:]]).uniform_(low, high)",
                            "Call"
                        ],
                        [
                            "points[torch.norm(points, dim=1) < 1]",
                            "Subscript"
                        ],
                        [
                            "generate_points_from_uniform_distribution(size=size)",
                            "Call"
                        ],
                        [
                            "generate_points_from_uniform_distribution(size=size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "np.linalg.norm(points[np.linalg.norm(points, axis=1) < normalization_coef], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/pytorch_structural_losses/match_cost.py": {
        "torch": {}
    },
    "utils/pytorch_structural_losses/nn_distance.py": {
        "torch": {}
    },
    "utils/pytorch_structural_losses/setup.py": {
        "torch": {}
    },
    "utils/sphere_triangles.py": {
        "torch": {
            "from_numpy_215": {
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((X.reshape(-1, 1), Y.reshape(-1, 1), Z.reshape(-1, 1)), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}