{
    "src/datasets/imdb.py": {
        "sklearn": {
            "KMeans_401": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mc.ANCHOR_PER_GRID",
                            "Attribute"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Graph_243": {
                "variable": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_279": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "_writter_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc['PREPROCESSED_DATA_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_' + dataset_set + '.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc['BASE_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_' + dataset_set + '.record')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_280": {
                "variable": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_376": {
                "variable": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[mc.IMAGE_HEIGHT, mc.IMAGE_WIDTH]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "new_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(standarized_imgs, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.IMAGE_HEIGHT, mc.IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_245": {
                "variable": {
                    "value": "pr_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "make_batched_features_dataset_246": {
                "variable": {
                    "value": "pr_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "os.path.join(mc.DATA_PATH, mc.DATASET_NAME.lower() + '_' + dataset_set + '.record')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/height': tf.FixedLenFeature([], tf.int64), 'image/width': tf.FixedLenFeature([], tf.int64), 'image/filename': tf.FixedLenFeature([], tf.string), 'image/encoded': tf.FixedLenFeature([], tf.string), 'image/object/bbox/xmin': tf.VarLenFeature(tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(tf.float32), 'image/object/class/label': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_282": {
                "variable": {
                    "value": "pr_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "make_batched_features_dataset_283": {
                "variable": {
                    "value": "pr_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "os.path.join(mc.DATA_PATH, mc.DATASET_NAME.lower() + '_' + dataset_set + '.record')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/height': tf.FixedLenFeature([], tf.int64), 'image/width': tf.FixedLenFeature([], tf.int64), 'image/filename': tf.FixedLenFeature([], tf.string), 'image/encoded': tf.FixedLenFeature([], tf.string), 'image/object/bbox/xmin': tf.VarLenFeature(tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(tf.float32), 'image/object/class/label': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "variable": {
                    "value": "image_filename",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/filename']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/xmax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/ymin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/ymax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/class/label'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_378": {
                "variable": {
                    "value": "pr_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "pr_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "make_batched_features_dataset_379": {
                "variable": {
                    "value": "pr_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "os.path.join(dataset_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image/height': tf.FixedLenFeature([], tf.int64), 'image/width': tf.FixedLenFeature([], tf.int64), 'image/filename': tf.FixedLenFeature([], tf.string), 'image/encoded': tf.FixedLenFeature([], tf.string), 'image/object/bbox/xmin': tf.VarLenFeature(tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(tf.float32), 'image/object/class/label': tf.VarLenFeature(tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/xmin'].values * tf.cast(pr_it['image/width'], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/xmax'].values * tf.cast(pr_it['image/width'], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_389": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/ymin'].values * tf.cast(pr_it['image/height'], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pr_it['image/object/bbox/ymax'].values * tf.cast(pr_it['image/height'], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_18": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_19": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_20": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_21": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_22": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_23": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_24": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_25": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_26": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "main_input_process",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "new_size_width",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "image_width",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "new_size_height",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "image_height",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "xmin2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmin * new_size_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "xmax2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmax * new_size_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "ymin2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymin * new_size_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "variable": {
                    "value": "ymax2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymax * new_size_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pre_N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(np.shape(s['xmin']))",
                            "Call"
                        ]
                    ]
                }
            },
            "size_91": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_xmin.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_165": {
                "name": {
                    "value": "data_augmentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_169": {
                "variable": {
                    "value": "min_drift_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_min(xmin0, axis=1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-float(mc.DRIFT_X) / float(mc.IMAGE_WIDTH)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_170": {
                "variable": {
                    "value": "max_x_per_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xmax0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "max_drift_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - max_x_per_img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "float(mc.DRIFT_X) / float(mc.IMAGE_WIDTH)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_172": {
                "variable": {
                    "value": "min_drift_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_min(ymin0, axis=1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-float(mc.DRIFT_Y) / float(mc.IMAGE_HEIGHT)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_173": {
                "variable": {
                    "value": "max_y_per_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ymax0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_174": {
                "variable": {
                    "value": "max_drift_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - max_y_per_img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "float(mc.DRIFT_Y) / float(mc.IMAGE_WIDTH)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "begins",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(start_y * mc.IMAGE_HEIGHT, dtype=tf.int32), tf.cast(start_x * mc.IMAGE_WIDTH, dtype=tf.int32), tf.zeros([mc.BATCH_SIZE], dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast((1.0 - tf.abs(unexpanded_dy)) * mc.IMAGE_HEIGHT, dtype=tf.int32), tf.cast((1.0 - tf.abs(unexpanded_dx)) * mc.IMAGE_WIDTH, dtype=tf.int32), tf.fill([mc.BATCH_SIZE], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_192": {
                "variable": {
                    "value": "pad_left",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mc.IMAGE_WIDTH * tf.maximum(unexpanded_dx, _zeros)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_193": {
                "variable": {
                    "value": "pad_top",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mc.IMAGE_HEIGHT * tf.maximum(unexpanded_dy, _zeros)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_194": {
                "variable": {
                    "value": "untiled_dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unexpanded_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dx * (max_drift_x - min_drift_x) + min_drift_x",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_195": {
                "variable": {
                    "value": "untiled_dy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unexpanded_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dy * (max_drift_y - min_drift_y) + min_drift_y",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1], tf.shape(xmin0)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_198": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "untiled_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(unexpanded_dx, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[1], tf.shape(xmin0)[1:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_199": {
                "variable": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "untiled_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(unexpanded_dy, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[1], tf.shape(xmin0)[1:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_213": {
                "variable": {
                    "value": "_conds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([mc.BATCH_SIZE], minval=0, maxval=2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_217": {
                "variable": {
                    "value": "unstacked_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_to_dense(record['image/object/bbox/xmin'], default_value=0.5)",
                            "Call"
                        ],
                        [
                            "xmin0 + dx",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(pr_it['image/object/bbox/xmin'].values, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pr_it['image/object/bbox/xmin'].values * tf.cast(pr_it['image/width'], tf.float32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_218": {
                "variable": {
                    "value": "unstacked_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_to_dense(record['image/object/bbox/xmax'], default_value=0.5)",
                            "Call"
                        ],
                        [
                            "xmax0 + dx",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(pr_it['image/object/bbox/xmax'].values, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pr_it['image/object/bbox/xmax'].values * tf.cast(pr_it['image/width'], tf.float32), [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "new_xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "unstacked_xmin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(xmin, axis=0, num=mc.BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "new_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "unstacked_xmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(xmax, axis=0, num=mc.BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "decode_resize_imgs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "decoded_img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reverse(image_decoder(encoded_imgs[i], channels=3), axis=[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_69": {
                "values": {
                    "value": "standarized_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "annotation_resizing",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "anchor_box_search",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_137": {
                "x": {
                    "value": "aidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_matcher_algorithm(mc.MATCHER_ALGORITHM)(record, anchor_box_tens, dataset_box_tens, anchor_box_centers, dataset_box_centers, idx, N, M, pre_N, mc.BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_168": {
                "name": {
                    "value": "image_distortion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "flipping",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_224": {
                "variable": {
                    "value": "unstacked_xmin[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "_conds[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0 - u_xmax",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : u_xmin",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_225": {
                "variable": {
                    "value": "unstacked_xmax[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pred": {
                    "value": "_conds[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 1.0 - u_xmin",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : u_xmax",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Example_319": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(temp_height), 'image/width': dataset_util.int64_feature(temp_width), 'image/filename': dataset_util.bytes_feature(temp_image_filename.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(temp_encoded_image), 'image/object/bbox/xmin': dataset_util.float_list_feature(temp_xmin[label_indices]), 'image/object/bbox/xmax': dataset_util.float_list_feature(temp_xmax[label_indices]), 'image/object/bbox/ymin': dataset_util.float_list_feature(temp_ymin[label_indices]), 'image/object/bbox/ymax': dataset_util.float_list_feature(temp_ymax[label_indices]), 'image/object/class/label': dataset_util.int64_list_feature(labels)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_93": {
                "value": {
                    "value": "s['xmin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "s['ymin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "s['xmax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "s['ymax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "new_xmin.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "new_ymin.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "new_xmax.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "new_ymax.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "value": {
                    "value": "mc.ANCHOR_BOX[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_106": {
                "value": {
                    "value": "mc.ANCHOR_BOX[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "mc.ANCHOR_BOX[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "mc.ANCHOR_BOX[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "dataset_box_tens['xmax'] - dataset_box_tens['xmin'] + tf.constant(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "dataset_box_tens['ymax'] - dataset_box_tens['ymin'] + tf.constant(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_118": {
                "name": {
                    "value": "deltas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_182": {
                "x": {
                    "value": "unexpanded_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dx * (max_drift_x - min_drift_x) + min_drift_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([mc.BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_183": {
                "x": {
                    "value": "unexpanded_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dy * (max_drift_y - min_drift_y) + min_drift_y",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([mc.BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_206": {
                "image": {
                    "value": "tf.slice(imgs[i], begins[i], sizes[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "offset_height": {
                    "value": "pad_top[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "pad_left[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_height": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_width": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_385": {
                "x": {
                    "value": "pr_it['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_386": {
                "x": {
                    "value": "pr_it['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_389": {
                "x": {
                    "value": "pr_it['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_390": {
                "x": {
                    "value": "pr_it['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_57": {
                "tensor": {
                    "value": "image_decoder(encoded_imgs[i], channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "dataset_box_tens['xmax'] + dataset_box_tens['xmin']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "dataset_box_tens['ymax'] + dataset_box_tens['ymin']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_110": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseTensor_120": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record['image/object/bbox/xmin'].indices",
                            "Attribute"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.cast(dataset_box_centers['x'] - tf.gather(anchor_box_centers['x'], indices=aidx.values), dtype=tf.float32) / tf.gather(anchor_box_centers['w'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "new_xmin.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_123": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record['image/object/bbox/xmin'].indices",
                            "Attribute"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.cast(dataset_box_centers['y'] - tf.gather(anchor_box_centers['y'], indices=aidx.values), dtype=tf.float32) / tf.gather(anchor_box_centers['h'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "new_xmin.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_126": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record['image/object/bbox/xmin'].indices",
                            "Attribute"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.log(tf.cast(dataset_box_centers['w'], dtype=tf.float32) / tf.gather(anchor_box_centers['w'], indices=aidx.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "new_xmin.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_128": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record['image/object/bbox/xmin'].indices",
                            "Attribute"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.log(tf.cast(dataset_box_centers['h'], dtype=tf.float32) / tf.gather(anchor_box_centers['h'], indices=aidx.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "new_xmin.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_169": {
                "input_tensor": {
                    "value": "xmin0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_172": {
                "input_tensor": {
                    "value": "ymin0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "start_y * mc.IMAGE_HEIGHT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "start_x * mc.IMAGE_WIDTH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "shape": {
                    "value": "[mc.BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "x": {
                    "value": "(1.0 - tf.abs(unexpanded_dy)) * mc.IMAGE_HEIGHT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "(1.0 - tf.abs(unexpanded_dx)) * mc.IMAGE_WIDTH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_190": {
                "dims": {
                    "value": "[mc.BATCH_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_192": {
                "x": {
                    "value": "unexpanded_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dx * (max_drift_x - min_drift_x) + min_drift_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([mc.BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_193": {
                "x": {
                    "value": "unexpanded_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dy * (max_drift_y - min_drift_y) + min_drift_y",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([mc.BATCH_SIZE])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_207": {
                "input_": {
                    "value": "imgs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "begins[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_221": {
                "pred": {
                    "value": "_conds[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(distorted_imgs[i])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : distorted_imgs[i]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_111": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_126": {
                "x": {
                    "value": "tf.cast(dataset_box_centers['w'], dtype=tf.float32) / tf.gather(anchor_box_centers['w'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_128": {
                "x": {
                    "value": "tf.cast(dataset_box_centers['h'], dtype=tf.float32) / tf.gather(anchor_box_centers['h'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "xmin0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_319": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(temp_height), 'image/width': dataset_util.int64_feature(temp_width), 'image/filename': dataset_util.bytes_feature(temp_image_filename.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(temp_encoded_image), 'image/object/bbox/xmin': dataset_util.float_list_feature(temp_xmin[label_indices]), 'image/object/bbox/xmax': dataset_util.float_list_feature(temp_xmax[label_indices]), 'image/object/bbox/ymin': dataset_util.float_list_feature(temp_ymin[label_indices]), 'image/object/bbox/ymax': dataset_util.float_list_feature(temp_ymax[label_indices]), 'image/object/class/label': dataset_util.int64_list_feature(labels)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "mc.BGR_MEANS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "dataset_box_centers['x'] - tf.gather(anchor_box_centers['x'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_122": {
                "params": {
                    "value": "anchor_box_centers['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_124": {
                "x": {
                    "value": "dataset_box_centers['y'] - tf.gather(anchor_box_centers['y'], indices=aidx.values)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_125": {
                "params": {
                    "value": "anchor_box_centers['h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_left_right_221": {
                "image": {
                    "value": "distorted_imgs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_126": {
                "x": {
                    "value": "dataset_box_centers['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_127": {
                "params": {
                    "value": "anchor_box_centers['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "dataset_box_centers['h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_129": {
                "params": {
                    "value": "anchor_box_centers['h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_188": {
                "x": {
                    "value": "unexpanded_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dy * (max_drift_y - min_drift_y) + min_drift_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_189": {
                "x": {
                    "value": "unexpanded_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randoms_dx * (max_drift_x - min_drift_x) + min_drift_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_121": {
                "params": {
                    "value": "anchor_box_centers['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_124": {
                "params": {
                    "value": "anchor_box_centers['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/kitti_caffee/export_weights_to_caffee.py": {
        "tensorflow": {}
    },
    "src/auto_ITL.py": {
        "tensorflow": {
            "DEFINE_string_14": {
                "name": {
                    "value": "config_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to json configuration file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/creation/create_coco_tf_record.py": {
        "tensorflow": {
            "Example_115": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(img_data['height']), 'image/width': dataset_util.int64_feature(img_data['width']), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/label': dataset_util.int64_list_feature(img_data['labels']), 'image/encoded': dataset_util.bytes_feature(img_data['pixel_data']), 'image/filename': dataset_util.bytes_feature(img_data['filename'])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_63": {
                "path": {
                    "value": "FLAGS.output_filepath",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FastGFile_86": {
                "variable": {
                    "value": "img_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(imgs_dir, img_detail['file_name'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_115": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(img_data['height']), 'image/width': dataset_util.int64_feature(img_data['width']), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/label': dataset_util.int64_list_feature(img_data['labels']), 'image/encoded': dataset_util.bytes_feature(img_data['pixel_data']), 'image/filename': dataset_util.bytes_feature(img_data['filename'])}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/creation/create_kitti_tf_record.py": {
        "tensorflow": {
            "DEFINE_string_52": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Location of root directory for the data. Folder structure is assumed to be:<data_dir>/training/label_2 (annotations) and<data_dir>/data_object_image_2/training/image_2(images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "output_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/media/terabyte/projects/datasets/kitti",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to which TFRecord fileswill be written. The TFRecord with the training setwill be located at: <output_path>_train.tfrecord.And the TFRecord with the validation set will belocated at: <output_path>_val.tfrecord",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "classes_to_use",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "car,pedestrian,cyclist",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma separated list of class names that will beused. Adding the dontcare class will remove allbboxs in the dontcare regions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "label_map_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "'%s/kitti_label_map.pbtxt' % os.path.dirname(__file__)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to label map proto.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "validation_set_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images tobe used as a validation set.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_109": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "os.path.join(output_path, 'kitti_train.record')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_110": {
                "variable": {
                    "value": "val_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "os.path.join(output_path, 'kitti_val.record')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_170": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_png), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin_norm), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax_norm), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin_norm), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax_norm), 'image/object/class/label': dataset_util.int64_list_feature([label_map_dict[x] for x in annotations['type']])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ListDirectory_112": {
                "dirname": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'training', 'image_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_152": {
                "name": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_dir, img_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_170": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(image_path.encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_png), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin_norm), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax_norm), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin_norm), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax_norm), 'image/object/class/label': dataset_util.int64_list_feature([label_map_dict[x] for x in annotations['type']])}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/creation/create_pascal_tf_record.py": {
        "tensorflow": {
            "Example_124": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/label': dataset_util.int64_list_feature(classes)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_151": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "FLAGS.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_87": {
                "name": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_directory, img_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_124": {
                "feature": {
                    "value": "{'image/height': dataset_util.int64_feature(height), 'image/width': dataset_util.int64_feature(width), 'image/filename': dataset_util.bytes_feature(data['filename'].encode('utf8')), 'image/encoded': dataset_util.bytes_feature(encoded_jpg), 'image/object/bbox/xmin': dataset_util.float_list_feature(xmin), 'image/object/bbox/xmax': dataset_util.float_list_feature(xmax), 'image/object/bbox/ymin': dataset_util.float_list_feature(ymin), 'image/object/bbox/ymax': dataset_util.float_list_feature(ymax), 'image/object/class/label': dataset_util.int64_list_feature(classes)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GFile_165": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, example + '.xml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/creation/dataset_util.py": {
        "tensorflow": {
            "concat_120": {
                "variable": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matching_files(pattern) for pattern in input_files]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Feature_22": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_26": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_30": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_102": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_58": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "parallel_interleave_133": {
                "map_func": {
                    "value": "file_read_func",
                    "type": "variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "config.num_readers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "block_length": {
                    "value": "config.read_block_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "config.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_22": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_26": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_30": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_34": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_38": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matching_files_120": {
                "pattern": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "warning_127": {
                "msg": {
                    "value": "`shuffle` is false, but the input data stream is still slightly shuffled since `num_readers` > 1.",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/creation/label_map_util.py": {
        "tensorflow": {
            "GFile_131": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/kitti.py": {
        "tensorflow": {
            "run_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "KITTI_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_309": {
                "graph": {
                    "value": "t_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_28": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'kitti_train.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle_buffer_size": {
                    "value": "1200 if mc.IS_TRAINING else 512",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sloppy_ordering": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_42": {
                "variable": {
                    "value": "dataset_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_eval_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'kitti_val.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_final_batch": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/matchers.py": {
        "tensorflow": {
            "reduce_max_52": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "flat_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_53": {
                "variable": {
                    "value": "overlaps_sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flat_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argsort_61": {
                "variable": {
                    "value": "dists_sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flat_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_distances(anchor_box_centers, dataset_box_centers, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "compute_distances(anchor_box_centers, dataset_box_centers, N=N, M=M)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "direction": {
                    "value": "ASCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_63": {
                "variable": {
                    "value": "aidx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reshape(tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N]), tf.shape(overlaps_sorted_idx)) <= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dists_sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(flat_dists, axis=1, direction='ASCENDING')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "overlaps_sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(flat_overlaps, axis=1, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_partition_68": {
                "variable": {
                    "value": "unstacked_aidx_array",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aidx_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reshape(tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N]), tf.shape(overlaps_sorted_idx)) <= 0, dists_sorted_idx, overlaps_sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "partitions": {
                    "value": "tf.cast(idx[:, 0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "aidx_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[find_best_aidx_per_image(el) for el in unstacked_aidx_array]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseTensor_72": {
                "variable": {
                    "value": "aidx",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "aidx_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([find_best_aidx_per_image(el) for el in unstacked_aidx_array], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_ops.bipartite_match(el, num_valid_rows=-1.0)[0] for el in unstacked_dst_mtxs], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "record['image/object/bbox/xmin'].dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_91": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "flat_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_98": {
                "variable": {
                    "value": "dst_mtxs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reshape(tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N]), tf.shape(flat_overlaps)) <= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_distances(anchor_box_centers, dataset_box_centers, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "compute_distances(anchor_box_centers, dataset_box_centers, N=N, M=M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - flat_overlaps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_partition_103": {
                "variable": {
                    "value": "unstacked_dst_mtxs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dst_mtxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.reshape(tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N]), tf.shape(flat_overlaps)) <= 0, flat_dists, 1.0 - flat_overlaps)",
                            "Call"
                        ]
                    ]
                },
                "partitions": {
                    "value": "tf.cast(idx[:, 0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_partitions": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dynamic_partition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "aidx_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_ops.bipartite_match(el, num_valid_rows=-1.0)[0] for el in unstacked_dst_mtxs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseTensor_107": {
                "variable": {
                    "value": "aidx",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "aidx_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([find_best_aidx_per_image(el) for el in unstacked_aidx_array], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_ops.bipartite_match(el, num_valid_rows=-1.0)[0] for el in unstacked_dst_mtxs], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "record['image/object/bbox/xmin'].dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "els_used",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(aidx_slice)[:1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "els_used",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([tf.expand_dims(aidx_slice[0, 0], 0), els_used], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(aidx_slice)[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "idx[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "aidx_elimination",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(overlaps_sorted_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(max_overlaps, axis=1), [1, pre_N])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(flat_overlaps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_126": {
                "values": {
                    "value": "[tf.expand_dims(aidx_slice[0, 0], 0), els_used]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "aidx_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "while_loop_140": {
                "cond": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda i, N, els_used: i < tf.shape(N)[0]",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda i, N, els_used: [i + 1, tf.where(tf.equal(N, els_used[i - 1]), neg_ones, N), els_used + tf.sparse_to_dense(i, tf.shape(N)[:1], tf.gather(N[i, :], tf.reduce_min(tf.where(tf.logical_and(tf.not_equal(N[i, :], -1), tf.not_equal(N[i, :], els_used[i - 1]))))))]",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, N, els_used]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_64": {
                "input": {
                    "value": "tf.expand_dims(max_overlaps, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pre_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "overlaps_sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(flat_overlaps, axis=1, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_99": {
                "input": {
                    "value": "tf.expand_dims(max_overlaps, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, pre_N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "flat_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ],
                        [
                            "batch_iou(anchor_box_tens, dataset_box_tens, N=N, M=M)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_126": {
                "input": {
                    "value": "aidx_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_131": {
                "condition": {
                    "value": "tf.equal(N, els_used[i - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "neg_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.ones_like(aidx_slice)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aidx_slice",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(flat_overlaps, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(flat_overlaps, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(flat_overlaps, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(flat_overlaps, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "aidx_slice",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "aidx_slice[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_130": {
                "input": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aidx_slice",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_131": {
                "x": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aidx_slice",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "els_used[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_to_dense_133": {
                "sparse_indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.shape(N)[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "tf.gather(N[i, :], tf.reduce_min(tf.where(tf.logical_and(tf.not_equal(N[i, :], -1), tf.not_equal(N[i, :], els_used[i - 1])))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_134": {
                "params": {
                    "value": "N[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reduce_min(tf.where(tf.logical_and(tf.not_equal(N[i, :], -1), tf.not_equal(N[i, :], els_used[i - 1]))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aidx_slice",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_min_135": {
                "input_tensor": {
                    "value": "tf.where(tf.logical_and(tf.not_equal(N[i, :], -1), tf.not_equal(N[i, :], els_used[i - 1])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_136": {
                "condition": {
                    "value": "tf.logical_and(tf.not_equal(N[i, :], -1), tf.not_equal(N[i, :], els_used[i - 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_137": {
                "x": {
                    "value": "tf.not_equal(N[i, :], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.not_equal(N[i, :], els_used[i - 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_138": {
                "x": {
                    "value": "N[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_139": {
                "x": {
                    "value": "N[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "els_used[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/ms_coco.py": {
        "tensorflow": {
            "run_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "COCO_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_126": {
                "graph": {
                    "value": "t_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_49": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'coco_train.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc['BASE_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_train.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc['PREPROCESSED_DATA_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_train.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "mc.TRAIN_EPOCHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle_buffer_size": {
                    "value": "13000 if mc.IS_TRAINING else 512",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sloppy_ordering": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_64": {
                "variable": {
                    "value": "dataset_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_eval_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'coco_val.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc['BASE_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_val.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc['PREPROCESSED_DATA_DIR'], 'preprocessed_' + mc.DATASET_NAME.lower() + '_val.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_final_batch": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/pascal_voc.py": {
        "tensorflow": {
            "name_scope_21": {
                "name": {
                    "value": "PASCAL_VOC_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_56": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'pascal_voc_train.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc.PREPROCESSED_DATA_DIR, 'preprocessed_pascal_voc_train.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc.TRAIN_DIR, 'preprocessed_pascal_voc_train.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle_buffer_size": {
                    "value": "12000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sloppy_ordering": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "make_batched_features_dataset_67": {
                "variable": {
                    "value": "dataset_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "dataset_eval_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(mc.DATA_PATH, 'pascal_voc_val.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc.PREPROCESSED_DATA_DIR, 'preprocessed_pascal_voc_val.record')",
                            "Call"
                        ],
                        [
                            "os.path.join(mc.TRAIN_DIR, 'preprocessed_pascal_voc_val.record')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imdb.get_keys_to_features()",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reader_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parser_num_threads": {
                    "value": "mc.NUM_THREADS / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets/nn_skeleton.py": {
        "tensorflow": {
            "get_collection_19": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_63": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(self.aidx.indices[:, 0], dtype=tf.int64), self.aidx.values]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_89": {
                "variable": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones_like(self.aidx.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_271": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_324": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_330": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "mc.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "mc.DECAY_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "mc.LR_DECAY_FACTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_788": {
                "variable": {
                    "value": "detection_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(util.bbox_transform_inv([self.det_boxes['xmins'], self.det_boxes['ymins'], self.det_boxes['xmaxs'], self.det_boxes['ymaxs']]))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_24": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_64": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_76": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "self.pred_class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(tf.reshape(preds[:, :, :, :num_class_probs], [-1, mc.CLASSES]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "self.pred_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(preds[:, :, :, num_class_probs:num_confidence_scores], [mc.BATCH_SIZE, mc.ANCHORS])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_confidence_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "self.pred_box_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preds[:, :, :, num_confidence_scores:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(self.box_input['image/object/bbox/xmin'].values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_242": {
                "variable": {
                    "value": "self._ious",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "mini_ious_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tensor_iou({'xmin': tf.cast(tf.gather_nd(xmins, self.paired_aidx_values), tf.float32), 'ymin': tf.cast(tf.gather_nd(ymins, self.paired_aidx_values), tf.float32), 'xmax': tf.cast(tf.gather_nd(xmaxs, self.paired_aidx_values), tf.float32), 'ymax': tf.cast(tf.gather_nd(ymaxs, self.paired_aidx_values), tf.float32)}, {'xmin': tf.cast(self.box_input['image/object/bbox/xmin'].values, tf.float32), 'ymin': tf.cast(self.box_input['image/object/bbox/ymin'].values, tf.float32), 'xmax': tf.cast(self.box_input['image/object/bbox/xmax'].values, tf.float32), 'ymax': tf.cast(self.box_input['image/object/bbox/ymax'].values, tf.float32)})",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_251": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "final_class_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_258": {
                "variable": {
                    "value": "self.det_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.pred_class_probs, tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1]), name='final_class_prob')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_259": {
                "variable": {
                    "value": "self.det_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.pred_class_probs, tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1]), name='final_class_prob')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "class_idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_276": {
                "variable": {
                    "value": "classes_sparse_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.paired_aidx_values, tf.expand_dims(tf.cast(self.labels.values, dtype=tf.int64), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_279": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "classes_sparse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.paired_aidx_values, tf.expand_dims(tf.cast(self.labels.values, dtype=tf.int64), axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tf.reshape(tf.ones_like(self.labels.values, dtype=tf.float32), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truediv_282": {
                "variable": {
                    "value": "self.class_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((one_hot_labels * -tf.log(self.pred_class_probs + mc.EPSILON) + (1.0 - one_hot_labels) * -tf.log(1 - self.pred_class_probs + mc.EPSILON)) * tf.expand_dims(input_mask, axis=-1) * mc.LOSS_COEF_CLASS)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "class_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_293": {
                "variable": {
                    "value": "self.conf_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(self._ious - self.pred_conf) * (input_mask * tf.constant(mc.LOSS_COEF_CONF_POS, tf.float32) / self.num_objects + (1.0 - input_mask) * tf.constant(mc.LOSS_COEF_CONF_NEG, tf.float32) / tf.cast(tf.constant(mc.ANCHORS) - tf.cast(self.num_objects, dtype=tf.int32), dtype=tf.float32)), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "confidence_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_306": {
                "variable": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pred_box_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_308": {
                "variable": {
                    "value": "_delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_309": {
                "variable": {
                    "value": "_delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_310": {
                "variable": {
                    "value": "_delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "delta_w",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_311": {
                "variable": {
                    "value": "_delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "delta_h",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_312": {
                "variable": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mc.LOSS_COEF_BBOX * tf.square(tf.stack([self.box_delta_input['dx'].values - _delta_x, self.box_delta_input['dy'].values - _delta_y, self.box_delta_input['dw'].values - _delta_w, self.box_delta_input['dh'].values - _delta_h])))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_336": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(mc.LEARNING_RATE, self.global_step, mc.DECAY_STEPS, mc.LR_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_340": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(mc.LEARNING_RATE, self.global_step, mc.DECAY_STEPS, mc.LR_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "mc.OPTIMIZER['MOMENTUM']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_360": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_367": {
                "variable": {
                    "value": "bounding_boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymin']), tf.float32) / tf.constant(mc.IMAGE_HEIGHT, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmin']), tf.float32) / tf.constant(mc.IMAGE_WIDTH, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymax']), tf.float32) / tf.constant(mc.IMAGE_HEIGHT, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmax']), tf.float32) / tf.constant(mc.IMAGE_WIDTH, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_381": {
                "variable": {
                    "value": "ground_truth_drawn",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.reverse(self.image_input + tf.expand_dims(tf.constant(mc.BGR_MEANS, dtype=tf.float32), axis=0), axis=[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bounding_boxes1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymin']), tf.float32) / tf.constant(mc.IMAGE_HEIGHT, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmin']), tf.float32) / tf.constant(mc.IMAGE_WIDTH, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymax']), tf.float32) / tf.constant(mc.IMAGE_HEIGHT, tf.float32), tf.cast(tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmax']), tf.float32) / tf.constant(mc.IMAGE_WIDTH, tf.float32)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_407": {
                "variable": {
                    "value": "_max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(_lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_408": {
                "variable": {
                    "value": "_sparse_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "_sparse_indices_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "bounding_boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _ymins), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _xmins), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _ymaxs), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _xmaxs)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_421": {
                "variable": {
                    "value": "self.all_boxes_drawn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "images": {
                    "value": "ground_truth_drawn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.reverse(self.image_input + tf.expand_dims(tf.constant(mc.BGR_MEANS, dtype=tf.float32), axis=0), axis=[-1]), bounding_boxes1)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bounding_boxes2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _ymins), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _xmins), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _ymaxs), tf.sparse_to_dense(_sparse_indices, [mc.BATCH_SIZE, _max_len], _xmaxs)], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_423": {
                "variable": {
                    "value": "self.viz_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_detection_results",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.all_boxes_drawn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_427": {
                "variable": {
                    "value": "cls_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "detected_cls_idx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([cls_idx for cls_idx in self.cls_idx_per_img], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_428": {
                "variable": {
                    "value": "self.viz_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.viz_op, cls_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_430": {
                "variable": {
                    "value": "cls_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ground_truth_cls_idx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([tf.boolean_mask(self.labels.values, tf.equal(self.labels.indices[:, 0], tf.constant(i, dtype=tf.int64))) for i in range(mc.BATCH_SIZE)], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_433": {
                "variable": {
                    "value": "self.viz_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.viz_op, cls_summary, self.filter_summaries]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_505": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernels', shape=[size, size, int(channels), filters], wd=mc.WEIGHT_DECAY, initializer=kernel_init, trainable=not freeze)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_508": {
                "variable": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('biases', [filters], bias_init, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [hiddens], bias_init)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_541": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_641": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(inputs, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('biases', [filters], bias_init, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [hiddens], bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_63": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_device(name, shape, initializer, trainable)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_90": {
                "input": {
                    "value": "self.aidx.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "interpret_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "bbox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_151": {
                "variable": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pred_box_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_159": {
                "variable": {
                    "value": "box_center_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_x + delta_x * anchor_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_161": {
                "variable": {
                    "value": "box_center_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_y + delta_y * anchor_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_cy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_163": {
                "variable": {
                    "value": "box_width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_w * util.safe_exp(delta_w, mc.EXP_THRESH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_width",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_166": {
                "variable": {
                    "value": "box_height",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_h * util.safe_exp(delta_h, mc.EXP_THRESH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_height",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_186": {
                "variable": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, xmins)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mc.IMAGE_WIDTH - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_xmin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_190": {
                "variable": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, ymins)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mc.IMAGE_HEIGHT - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_ymin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_194": {
                "variable": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_xmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_198": {
                "variable": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_ymax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "IOU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "class_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_290": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.class_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "confidence_score_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_302": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.conf_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_303": {
                "name": {
                    "value": "mean iou",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(self._ious) / self.num_objects",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "bounding_box_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_321": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_324": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_342": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(mc.LEARNING_RATE, self.global_step, mc.DECAY_STEPS, mc.LR_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "mc.OPTIMIZER['BETA1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta2": {
                    "value": "mc.OPTIMIZER['BETA2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "clip_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_353": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_device(name, shape, initializer, trainable)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_359": {
                "control_inputs": {
                    "value": "[apply_gradient_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_365": {
                "name": {
                    "value": "viz_graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_401": {
                "variable": {
                    "value": "_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ymins[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_485": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(cw[layer_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "cw[layer_name][0]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(kernel_val, (1, 0))",
                            "Call"
                        ],
                        [
                            "np.reshape(np.transpose(np.reshape(kernel_val, (hiddens, input_shape[3], input_shape[1], input_shape[2])), (2, 3, 1, 0)), (dim, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_486": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_540": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_586": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_625": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(cw[layer_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "cw[layer_name][0]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(kernel_val, (1, 0))",
                            "Call"
                        ],
                        [
                            "np.reshape(np.transpose(np.reshape(kernel_val, (hiddens, input_shape[3], input_shape[1], input_shape[2])), (2, 3, 1, 0)), (dim, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_626": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_643": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(inputs, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs, 'relu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_661": {
                "name": {
                    "value": "filter_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_668": {
                "variable": {
                    "value": "unstacked_order",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(self.det_probs, axis=1, direction='ASCENDING')[:mc.BATCH_SIZE, :-mc.TOP_N_DETECTION - 1:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_670": {
                "variable": {
                    "value": "unstacked_det_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.det_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_674": {
                "variable": {
                    "value": "unstacked_cls_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.det_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_676": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "unstacked_ordered_cls_idx",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(unstacked_ordered_cls_idx, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_756": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_idx_per_img_before_plot_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(cls_idx_per_img_before_plot_prob, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_761": {
                "inputs": {
                    "value": "[s1, s2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_772": {
                "name_or_scope": {
                    "value": "activation_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_773": {
                "name": {
                    "value": "'activation_summary/' + layer_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_775": {
                "name": {
                    "value": "activation_summary/ + layer_name + /sparsity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_777": {
                "name": {
                    "value": "activation_summary/ + layer_name + /average",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_779": {
                "name": {
                    "value": "activation_summary/ + layer_name + /max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_781": {
                "name": {
                    "value": "activation_summary/ + layer_name + /min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_789": {
                "values": {
                    "value": "util.bbox_transform_inv([self.det_boxes['xmins'], self.det_boxes['ymins'], self.det_boxes['xmaxs'], self.det_boxes['ymaxs']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "self.aidx.indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "logits": {
                    "value": "tf.reshape(preds[:, :, :, :num_class_probs], [-1, mc.CLASSES])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "preds[:, :, :, num_class_probs:num_confidence_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_147": {
                "input": {
                    "value": "self.box_input['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "stretching",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "trimming",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_210": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['xmin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['xmin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "xmin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_211": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['ymin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['ymin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "ymin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_212": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['xmax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['xmax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "xmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_213": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['ymax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['ymax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "ymax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_215": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax - xmin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_216": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymax - ymin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_217": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, xmax - xmin, name='inter_w')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, ymax - ymin, name='inter_h')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_220": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['xmax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box1['xmin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_221": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1['ymax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box1['ymin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_222": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box2['xmax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['xmin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_223": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box2['ymax']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2['ymin']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w1 * h1 + w2 * h2 - intersection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_227": {
                "x": {
                    "value": "tf.cast(intersection, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "union + tf.constant(mc.EPSILON, dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "tensor": {
                    "value": "self.pred_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_261": {
                "params": {
                    "value": "self.det_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "tf.ones_like(self.labels.values, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_283": {
                "input_tensor": {
                    "value": "(one_hot_labels * -tf.log(self.pred_class_probs + mc.EPSILON) + (1.0 - one_hot_labels) * -tf.log(1 - self.pred_class_probs + mc.EPSILON)) * tf.expand_dims(input_mask, axis=-1) * mc.LOSS_COEF_CLASS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_294": {
                "input_tensor": {
                    "value": "tf.square(self._ious - self.pred_conf) * (input_mask * tf.constant(mc.LOSS_COEF_CONF_POS, tf.float32) / self.num_objects + (1.0 - input_mask) * tf.constant(mc.LOSS_COEF_CONF_NEG, tf.float32) / tf.cast(tf.constant(mc.ANCHORS) - tf.cast(self.num_objects, dtype=tf.int32), dtype=tf.float32))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_313": {
                "input_tensor": {
                    "value": "mc.LOSS_COEF_BBOX * tf.square(tf.stack([self.box_delta_input['dx'].values - _delta_x, self.box_delta_input['dy'].values - _delta_y, self.box_delta_input['dw'].values - _delta_w, self.box_delta_input['dh'].values - _delta_h]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_357": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reverse_382": {
                "tensor": {
                    "value": "self.image_input + tf.expand_dims(tf.constant(mc.BGR_MEANS, dtype=tf.float32), axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_407": {
                "values": {
                    "value": "_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_409": {
                "values": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, ymins), mc.IMAGE_HEIGHT - 1.0, name='bbox_ymin')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_409": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_410": {
                "values": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, xmins), mc.IMAGE_WIDTH - 1.0, name='bbox_xmin')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_410": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_411": {
                "values": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs), 0.0, name='bbox_ymax')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_411": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_412": {
                "values": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs), 0.0, name='bbox_xmax')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_412": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_427": {
                "values": {
                    "value": "[cls_idx for cls_idx in self.cls_idx_per_img]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_431": {
                "values": {
                    "value": "[tf.boolean_mask(self.labels.values, tf.equal(self.labels.indices[:, 0], tf.constant(i, dtype=tf.int64))) for i in range(mc.BATCH_SIZE)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_489": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_493": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_495": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_512": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "mc.LEAKY_COEF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_514": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_629": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_631": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_633": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_641": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, hiddens], wd=mc.WEIGHT_DECAY, initializer=kernel_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_664": {
                "name": {
                    "value": "probability_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_685": {
                "name": {
                    "value": "NMS_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_735": {
                "variable": {
                    "value": "_final_probs_per_img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(unstacked_probs_per_cls[c], selected_indices_per_cls[c]) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "_final_cls_idx_per_img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.fill(tf.shape(selected_indices_per_cls[c]), c) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zero_fraction_776": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_778": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_780": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_782": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "preds[:, :, :, :num_class_probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_187": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, xmins), mc.IMAGE_WIDTH - 1.0, name='bbox_xmin')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_191": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, ymins), mc.IMAGE_HEIGHT - 1.0, name='bbox_ymin')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_195": {
                "x": {
                    "value": "mc.IMAGE_WIDTH - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs), 0.0, name='bbox_xmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_199": {
                "x": {
                    "value": "mc.IMAGE_HEIGHT - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs), 0.0, name='bbox_ymax')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_209": {
                "name": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_219": {
                "name": {
                    "value": "union",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_227": {
                "x": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(w, h, name='intersection')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_231": {
                "x": {
                    "value": "tf.gather_nd(xmins, self.paired_aidx_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_232": {
                "x": {
                    "value": "tf.gather_nd(ymins, self.paired_aidx_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_233": {
                "x": {
                    "value": "tf.gather_nd(xmaxs, self.paired_aidx_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_234": {
                "x": {
                    "value": "tf.gather_nd(ymaxs, self.paired_aidx_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_235": {
                "x": {
                    "value": "self.box_input['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_236": {
                "x": {
                    "value": "self.box_input['image/object/bbox/ymin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_237": {
                "x": {
                    "value": "self.box_input['image/object/bbox/xmax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_238": {
                "x": {
                    "value": "self.box_input['image/object/bbox/ymax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_276": {
                "input": {
                    "value": "tf.cast(self.labels.values, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_280": {
                "input": {
                    "value": "self.labels.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_303": {
                "input_tensor": {
                    "value": "self._ious",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_348": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "mc.MAX_GRAD_NORM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_404": {
                "values": {
                    "value": "[tf.fill(tf.reshape(_len, [1]), i), tf.range(_len)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_to_dense_414": {
                "sparse_indices": {
                    "value": "_sparse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(_sparse_indices_per_image, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[mc.BATCH_SIZE, _max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "_ymins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(ymins, axis=0) / tf.constant(mc.IMAGE_HEIGHT, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sparse_to_dense_415": {
                "sparse_indices": {
                    "value": "_sparse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(_sparse_indices_per_image, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[mc.BATCH_SIZE, _max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "_xmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(xmins, axis=0) / tf.constant(mc.IMAGE_WIDTH, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sparse_to_dense_416": {
                "sparse_indices": {
                    "value": "_sparse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(_sparse_indices_per_image, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[mc.BATCH_SIZE, _max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "_ymaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(ymaxs, axis=0) / tf.constant(mc.IMAGE_HEIGHT, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sparse_to_dense_417": {
                "sparse_indices": {
                    "value": "_sparse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(_sparse_indices_per_image, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[mc.BATCH_SIZE, _max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "_xmaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(xmaxs, axis=0) / tf.constant(mc.IMAGE_WIDTH, tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argsort_665": {
                "values": {
                    "value": "self.det_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "direction": {
                    "value": "ASCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_671": {
                "params": {
                    "value": "unstacked_det_probs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "unstacked_order[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_675": {
                "params": {
                    "value": "unstacked_cls_idx[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "unstacked_order[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_676": {
                "values": {
                    "value": "unstacked_ordered_cls_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(unstacked_cls_idx[i], unstacked_order[i], axis=-1) for i in range(mc.BATCH_SIZE)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_678": {
                "value": {
                    "value": "self.det_boxes[tens_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_756": {
                "values": {
                    "value": "cls_idx_per_img_before_plot_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_757": {
                "name": {
                    "value": "cls_probs_bef_p_p_0",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([sc[0] for sc in cls_probs_per_img_before_plot_prob], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_758": {
                "name": {
                    "value": "cls_probs_bef_p_p_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([sc[1] for sc in cls_probs_per_img_before_plot_prob], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_759": {
                "name": {
                    "value": "cls_probs_bef_p_p_2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat([sc[2] for sc in cls_probs_per_img_before_plot_prob], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "mc.EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_231": {
                "params": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, xmins), mc.IMAGE_WIDTH - 1.0, name='bbox_xmin')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_232": {
                "params": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(0.0, ymins), mc.IMAGE_HEIGHT - 1.0, name='bbox_ymin')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_233": {
                "params": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs), 0.0, name='bbox_xmax')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_234": {
                "params": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs), 0.0, name='bbox_ymax')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.paired_aidx_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_276": {
                "x": {
                    "value": "self.labels.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_295": {
                "x": {
                    "value": "self._ious - self.pred_conf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_313": {
                "x": {
                    "value": "tf.stack([self.box_delta_input['dx'].values - _delta_x, self.box_delta_input['dy'].values - _delta_y, self.box_delta_input['dw'].values - _delta_w, self.box_delta_input['dh'].values - _delta_h])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_368": {
                "x": {
                    "value": "tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymin'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_370": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_371": {
                "x": {
                    "value": "tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmin'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_373": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_374": {
                "x": {
                    "value": "tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/ymax'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_376": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_377": {
                "x": {
                    "value": "tf.sparse_tensor_to_dense(self.box_input['image/object/bbox/xmax'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_379": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_384": {
                "input": {
                    "value": "tf.constant(mc.BGR_MEANS, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_431": {
                "tensor": {
                    "value": "self.labels.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.equal(self.labels.indices[:, 0], tf.constant(i, dtype=tf.int64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_679": {
                "params": {
                    "value": "unstacked_boxes[tens_name][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "unstacked_order[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_693": {
                "x": {
                    "value": "unstacked_ordered_cls_idx[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(mc.CLASSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_726": {
                "values": {
                    "value": "[tf.gather(ymins_per_cls[c], selected_indices_per_cls[c]) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_728": {
                "values": {
                    "value": "[tf.gather(xmins_per_cls[c], selected_indices_per_cls[c]) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_730": {
                "values": {
                    "value": "[tf.gather(ymaxs_per_cls[c], selected_indices_per_cls[c]) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_732": {
                "values": {
                    "value": "[tf.gather(xmaxs_per_cls[c], selected_indices_per_cls[c]) for c in range(mc.CLASSES)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_757": {
                "values": {
                    "value": "[sc[0] for sc in cls_probs_per_img_before_plot_prob]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_758": {
                "values": {
                    "value": "[sc[1] for sc in cls_probs_per_img_before_plot_prob]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_759": {
                "values": {
                    "value": "[sc[2] for sc in cls_probs_per_img_before_plot_prob]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.input_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_313": {
                "values": {
                    "value": "[self.box_delta_input['dx'].values - _delta_x, self.box_delta_input['dy'].values - _delta_y, self.box_delta_input['dw'].values - _delta_w, self.box_delta_input['dh'].values - _delta_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_384": {
                "value": {
                    "value": "mc.BGR_MEANS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_404": {
                "dims": {
                    "value": "tf.reshape(_len, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(mc.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "range(mc.BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_431": {
                "x": {
                    "value": "self.labels.indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(i, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_701": {
                "tensor": {
                    "value": "tf.boolean_mask(unstacked_ordered_boxes['ymins'][i], class_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_704": {
                "tensor": {
                    "value": "tf.boolean_mask(unstacked_ordered_boxes['xmins'][i], class_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_707": {
                "tensor": {
                    "value": "tf.boolean_mask(unstacked_ordered_boxes['ymaxs'][i], class_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_710": {
                "tensor": {
                    "value": "tf.boolean_mask(unstacked_ordered_boxes['xmaxs'][i], class_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_713": {
                "tensor": {
                    "value": "tf.boolean_mask(unstacked_probs[i], class_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_716": {
                "tensor": {
                    "value": "tf.image.non_max_suppression(boxes=tf.stack([ymins_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmins_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32), ymaxs_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmaxs_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32)], axis=1), scores=unstacked_probs_per_cls[c], max_output_size=mc.TOP_N_DETECTION, iou_threshold=mc.NMS_THRESH)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_735": {
                "params": {
                    "value": "unstacked_probs_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_737": {
                "params": {
                    "value": "unstacked_probs_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "fill_740": {
                "dims": {
                    "value": "tf.shape(selected_indices_per_cls[c])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(mc.CLASSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_299": {
                "x": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "tensor": {
                    "value": "_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.size(ymins[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_431": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(mc.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "range(mc.BATCH_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_701": {
                "tensor": {
                    "value": "unstacked_ordered_boxes['ymins'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_mask_per_image[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_704": {
                "tensor": {
                    "value": "unstacked_ordered_boxes['xmins'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_mask_per_image[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_707": {
                "tensor": {
                    "value": "unstacked_ordered_boxes['ymaxs'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_mask_per_image[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_710": {
                "tensor": {
                    "value": "unstacked_ordered_boxes['xmaxs'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_mask_per_image[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "boolean_mask_713": {
                "tensor": {
                    "value": "unstacked_probs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_mask_per_image[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "non_max_suppression_716": {
                "boxes": {
                    "value": "tf.stack([ymins_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmins_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32), ymaxs_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmaxs_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scores": {
                    "value": "unstacked_probs_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "mc.TOP_N_DETECTION",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "mc.NMS_THRESH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_726": {
                "params": {
                    "value": "ymins_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_728": {
                "params": {
                    "value": "xmins_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_730": {
                "params": {
                    "value": "ymaxs_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_732": {
                "params": {
                    "value": "xmaxs_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_740": {
                "input": {
                    "value": "selected_indices_per_cls[c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_296": {
                "value": {
                    "value": "mc.LOSS_COEF_CONF_POS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_298": {
                "value": {
                    "value": "mc.LOSS_COEF_CONF_NEG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_284": {
                "x": {
                    "value": "self.pred_class_probs + mc.EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_285": {
                "x": {
                    "value": "1 - self.pred_class_probs + mc.EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_299": {
                "value": {
                    "value": "mc.ANCHORS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_717": {
                "values": {
                    "value": "[ymins_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmins_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32), ymaxs_per_cls[c] / tf.constant(mc.IMAGE_HEIGHT, tf.float32), xmaxs_per_cls[c] / tf.constant(mc.IMAGE_WIDTH, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_717": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_718": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_719": {
                "value": {
                    "value": "mc.IMAGE_HEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_720": {
                "value": {
                    "value": "mc.IMAGE_WIDTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets/resnet50_convDet.py": {
        "tensorflow": {
            "dropout_124": {
                "variable": {
                    "value": "dropout4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(res4e + branch2, 'relu')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_17": {
                "device_name": {
                    "value": "/job:localhost/replica:0/task:0/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_33": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "conv2_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "res2a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "res2b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res2a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "res2c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res2b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "conv3_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "res3a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "res3b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "res3c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "res3d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3c + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "conv4_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "res4a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "res4b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "res4c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "res4d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4c + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "res4e",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4d + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4e + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "res + layer_name + _branch2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "res2a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "res2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "res2c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "res3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "res3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "res3c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "res3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "res4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "res4b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "res4c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "res4d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "res4e",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "res4f",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets/squeezeDet.py": {
        "tensorflow": {
            "dropout_72": {
                "variable": {
                    "value": "self.dropout11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.fire11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop11",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_104": {
                "values": {
                    "value": "[ex1x1, ex3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '/concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_16": {
                "device_name": {
                    "value": "/job:localhost/replica:0/task:0/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_32": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets/squeezeDetPlus.py": {
        "tensorflow": {
            "dropout_67": {
                "variable": {
                    "value": "self.dropout11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.fire11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop11",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_99": {
                "values": {
                    "value": "[ex1x1, ex3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '/concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_8": {
                "device_name": {
                    "value": "/job:localhost/replica:0/task:0/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_22": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nets/vgg16_convDet.py": {
        "tensorflow": {
            "dropout_83": {
                "variable": {
                    "value": "dropout5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv_layer('conv5_3', conv5_2, filters=512, size=3, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_18": {
                "device_name": {
                    "value": "/job:localhost/replica:0/task:0/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_34": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/supervisor/evaluator.py": {
        "tensorflow": {
            "Session_29": {
                "variable": {
                    "value": "eval_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "eval_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_50": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "mc['TRAIN_DIR']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Graph_126": {
                "variable": {
                    "value": "eval_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_39": {
                "variable": {
                    "value": "eval_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "eval_mc['EVAL_DIR']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "graph": {
                    "value": "eval_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "100000000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "eval_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_36": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.merge_all(), eval_model.viz_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_38": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.merge_all()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_29": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/supervisor/trainer.py": {
        "tensorflow": {
            "get_checkpoint_state_50": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "mc['ckpt_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_52": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "mc['TRAIN_DIR']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_56": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_66": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredTrainingSession_81": {
                "variable": {
                    "value": "train_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "master": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "mc['TRAIN_DIR']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "tf.train.Scaffold(init_op=tf.global_variables_initializer() if mc.LOAD_PRETRAINED_MODEL else None, summary_op=summary_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "hooks": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "chief_only_hooks": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "save_summaries_steps": {
                    "value": "mc['SUMMARY_STEP']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                },
                "stop_grace_period_secs": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_wait_secs": {
                    "value": "7200",
                    "type": "int",
                    "possible_values": []
                },
                "save_checkpoint_steps": {
                    "value": "mc['checkpoint_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FileWriter_96": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "mc['TRAIN_DIR']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "graph": {
                    "value": "train_sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_60": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_61": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_70": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.merge_all(), model.viz_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_72": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.merge_all()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_variables_75": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "train_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "new_var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var_name for var_name in var_list if np.any([layer_name + '/' in str(var_name) for layer_name in mc.LAYERS_TO_LOAD])]",
                            "ListComp"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Scaffold_85": {
                "init_op": {
                    "value": "tf.global_variables_initializer() if mc.LOAD_PRETRAINED_MODEL else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.merge([tf.summary.merge_all(), model.viz_op])",
                            "Call"
                        ],
                        [
                            "tf.summary.merge([tf.summary.merge_all()])",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/tf_util.py": {
        "tensorflow": {
            "maximum_38": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmin1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['xmin']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(xmin2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "xmin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_42": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmax1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['xmax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(xmax2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "xmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(0, dtype=xmax.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax - xmin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_47": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymin1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['ymin']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(ymin2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ymin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymax1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['ymax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(ymax2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ymax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(0, dtype=ymax.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ymax - ymin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.constant(0, dtype=xmax.dtype), xmax - xmin, name='inter_w')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.constant(0, dtype=ymax.dtype), ymax - ymin, name='inter_h')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_57": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmax1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['xmax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "xmin1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['xmin']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_58": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymax1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['ymax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ymin1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1['ymin']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_59": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xmax2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['xmax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "xmin2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['xmin']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ymax2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['ymax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ymin2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['ymin']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(w1 * h1, 0) + tf.expand_dims(w2 * h2, 1) - intersection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_64": {
                "x": {
                    "value": "tf.cast(intersection, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(w1 * h1, 0) + tf.expand_dims(w2 * h2, 1) - intersection, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_86": {
                "variable": {
                    "value": "dx2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(box_centers2['x'], 1) - box_centers1['x']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_87": {
                "variable": {
                    "value": "dy2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(box_centers2['y'], 1) - box_centers1['y']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_88": {
                "variable": {
                    "value": "dw2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(box_centers2['w'], 1) - box_centers1['w']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_89": {
                "variable": {
                    "value": "dh2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(box_centers2['h'], 1) - box_centers1['h']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SparseTensor_116": {
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.gather_nd(tens, idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.shape(tens, out_type=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "union",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(w, h, name='intersection')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "box_distances",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_116": {
                "params": {
                    "value": "tens",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_117": {
                "input": {
                    "value": "tens",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "input": {
                    "value": "xmin2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['xmin']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "xmax2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['xmax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xmax.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "ymin2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['ymin']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "ymax2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes2['ymax'] + 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ymax.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "box_centers2['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "box_centers2['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "box_centers2['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "box_centers2['h']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "input": {
                    "value": "w2 * h2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/util.py": {
        "tensorflow": {
            "to_float_256": {
                "variable": {
                    "value": "lin_region",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lin_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w > thresh",
                            "Compare"
                        ]
                    ]
                }
            },
            "exp_259": {
                "variable": {
                    "value": "exp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(lin_bool, tf.zeros_like(w), w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "bbox_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "bbox_transform_inv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "safe_exponential",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_259": {
                "condition": {
                    "value": "lin_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w > thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xmax - xmin",
                            "BinOp"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_259": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xmax - xmin",
                            "BinOp"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/utils_test.py": {
        "tensorflow": {
            "Session_40": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "boxes1[tens_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "boxes2[tens_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "constant_69": {
                "value": {
                    "value": "box_centers1['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "box_centers1['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_77": {
                "value": {
                    "value": "box_centers2['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "box_centers2['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_83": {
                "value": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3000",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}