{
    "vertex_pred/image_encoder.py": {
        "tensorflow": {
            "VGG16_13": {
                "variable": {
                    "value": "VGG16",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.input_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_21": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "edges",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "vertices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_45": {
                "variable": {
                    "value": "self.vertex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "first_vertex",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_47": {
                "variable": {
                    "value": "self.image_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "image_rep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_54": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_57": {
                "variable": {
                    "value": "self.init_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=weight_init)",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(H, W, c_in, c_out).astype(np.float32) * np.sqrt(6.0 / (c_in + c_out))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([c_out]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_81": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=input_tensor, filter=kernel, padding='SAME', strides=(1, 1, 1, 1), name=name)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.fused_block, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=bias_init)",
                            "Call"
                        ],
                        [
                            "tf.Variable(initial_value=bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_99": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(self.input_image, self.VGG16_weights[0], self.VGG16_weights[1], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_1, self.VGG16_weights[4], self.VGG16_weights[5], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_2, self.VGG16_weights[8], self.VGG16_weights[9], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_3, self.VGG16_weights[14], self.VGG16_weights[15], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_4, self.VGG16_weights[20], self.VGG16_weights[21], 'conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool_1, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.representation, filters=32, padding='same', kernel_size=[3, 3], name='conv_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "drop_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "relu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[2], self.VGG16_weights[3], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[6], self.VGG16_weights[7], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[10], self.VGG16_weights[11], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[16], self.VGG16_weights[17], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[22], self.VGG16_weights[23], 'conv_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_3, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_113": {
                "variable": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_116": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(self.input_image, self.VGG16_weights[0], self.VGG16_weights[1], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_1, self.VGG16_weights[4], self.VGG16_weights[5], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_2, self.VGG16_weights[8], self.VGG16_weights[9], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_3, self.VGG16_weights[14], self.VGG16_weights[15], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_4, self.VGG16_weights[20], self.VGG16_weights[21], 'conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool_1, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.representation, filters=32, padding='same', kernel_size=[3, 3], name='conv_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_141": {
                "variable": {
                    "value": "drop_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "relu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[2], self.VGG16_weights[3], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[6], self.VGG16_weights[7], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[10], self.VGG16_weights[11], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[16], self.VGG16_weights[17], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[22], self.VGG16_weights[23], 'conv_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_3, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_154": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_2, self.prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(self.input_image, self.VGG16_weights[0], self.VGG16_weights[1], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_1, self.VGG16_weights[4], self.VGG16_weights[5], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_2, self.VGG16_weights[8], self.VGG16_weights[9], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_3, self.VGG16_weights[14], self.VGG16_weights[15], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_4, self.VGG16_weights[20], self.VGG16_weights[21], 'conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool_1, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.representation, filters=32, padding='same', kernel_size=[3, 3], name='conv_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "drop_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "relu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[2], self.VGG16_weights[3], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[6], self.VGG16_weights[7], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[10], self.VGG16_weights[11], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[16], self.VGG16_weights[17], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[22], self.VGG16_weights[23], 'conv_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_3, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_189": {
                "variable": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_195": {
                "variable": {
                    "value": "relu_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[12], self.VGG16_weights[13], 'conv_3')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[18], self.VGG16_weights[19], 'conv_3')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[24], self.VGG16_weights[25], 'conv_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_4, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "drop_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_202": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(gnorm_3, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_3, self.prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_223": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(self.input_image, self.VGG16_weights[0], self.VGG16_weights[1], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_1, self.VGG16_weights[4], self.VGG16_weights[5], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_2, self.VGG16_weights[8], self.VGG16_weights[9], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_3, self.VGG16_weights[14], self.VGG16_weights[15], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_4, self.VGG16_weights[20], self.VGG16_weights[21], 'conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool_1, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.representation, filters=32, padding='same', kernel_size=[3, 3], name='conv_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_227": {
                "variable": {
                    "value": "drop_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_233": {
                "variable": {
                    "value": "relu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[2], self.VGG16_weights[3], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[6], self.VGG16_weights[7], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[10], self.VGG16_weights[11], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[16], self.VGG16_weights[17], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[22], self.VGG16_weights[23], 'conv_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_3, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_237": {
                "variable": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_245": {
                "variable": {
                    "value": "relu_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "gnorm_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_266": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(self.input_image, self.VGG16_weights[0], self.VGG16_weights[1], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_1, self.VGG16_weights[4], self.VGG16_weights[5], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_2, self.VGG16_weights[8], self.VGG16_weights[9], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_3, self.VGG16_weights[14], self.VGG16_weights[15], 'conv_1')",
                            "Call"
                        ],
                        [
                            "self.conv2d(self.block_4, self.VGG16_weights[20], self.VGG16_weights[21], 'conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=pool_1, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.representation, filters=32, padding='same', kernel_size=[3, 3], name='conv_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_270": {
                "variable": {
                    "value": "drop_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_276": {
                "variable": {
                    "value": "relu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[2], self.VGG16_weights[3], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[6], self.VGG16_weights[7], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[10], self.VGG16_weights[11], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[16], self.VGG16_weights[17], 'conv_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_1, self.VGG16_weights[22], self.VGG16_weights[23], 'conv_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_3, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "drop_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_2)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_286": {
                "variable": {
                    "value": "relu_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[12], self.VGG16_weights[13], 'conv_3')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[18], self.VGG16_weights[19], 'conv_3')",
                            "Call"
                        ],
                        [
                            "self.conv2d(drop_2, self.VGG16_weights[24], self.VGG16_weights[25], 'conv_3')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=self.block_4, filters=128, padding='same', kernel_size=[3, 3], activation=tf.nn.relu, name='conv_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_290": {
                "variable": {
                    "value": "drop_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gnorm_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_3)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_293": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(gnorm_3, self.prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(gnorm_3, self.prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_312": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_313": {
                "variable": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(drop_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(drop_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(drop_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(drop_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=self.block_2, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_319": {
                "variable": {
                    "value": "conv_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.block_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_325": {
                "variable": {
                    "value": "conv_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.block_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "variable": {
                    "value": "conv_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "resize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(images=self.block_5, size=[28, 28])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_338": {
                "variable": {
                    "value": "fused_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_1, conv_2, conv_3, conv_4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_355": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.fused_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_374": {
                "variable": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_381": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "gnorm_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(relu_1)",
                            "Call"
                        ],
                        [
                            "GroupNormalization(groups=32, axis=-1, epsilon=0.1)(conv_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_385": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.Flatten()(relu_1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_387": {
                "variable": {
                    "value": "E_plus_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flat, E]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_389": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "E_plus_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([flat, E], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_392": {
                "variable": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=E_plus_flat, units=784, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_395": {
                "variable": {
                    "value": "vertex_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "vertex_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(V, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_46": {
                "input": {
                    "value": "self.out_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vertices_hat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(H, W, c_in, c_out).astype(np.float32) * np.sqrt(6.0 / (c_in + c_out))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([c_out]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "block_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_93": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "block_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_131": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "block_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_169": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "block_4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_217": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "block_5",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_260": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "concatenate",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_309": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "representation",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_353": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "all_vertices",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=E_plus_flat, units=784, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_loss_50": {
                "labels": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.edges_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_loss_51": {
                "labels": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.vertices_hat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vertex_pred/test.py": {
        "tensorflow": {
            "reset_default_graph_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vertex_pred/training_image_encoder.py": {
        "tensorflow": {
            "Saver_69": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}