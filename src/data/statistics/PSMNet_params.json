{
    "Test_img.py": {
        "torch": {
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stackhourglass(args.maxdisp)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ],
                        [
                            "basic(args.maxdisp)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgL, imgR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(disp)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_104": {
                "variable": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgL.cuda()",
                            "Call"
                        ],
                        [
                            "infer_transform(imgL_o)",
                            "Call"
                        ],
                        [
                            "F.pad(imgL, (0, right_pad, top_pad, 0)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_105": {
                "variable": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgR.cuda()",
                            "Call"
                        ],
                        [
                            "infer_transform(imgR_o)",
                            "Call"
                        ],
                        [
                            "F.pad(imgR, (0, right_pad, top_pad, 0)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/KITTILoader.py": {
        "torch": {}
    },
    "dataloader/KITTI_submission_loader.py": {
        "torch": {}
    },
    "dataloader/KITTI_submission_loader2012.py": {
        "torch": {}
    },
    "dataloader/KITTIloader2012.py": {
        "torch": {}
    },
    "dataloader/KITTIloader2015.py": {
        "torch": {}
    },
    "dataloader/SecenFlowLoader.py": {
        "torch": {}
    },
    "dataloader/listflowfile.py": {
        "torch": {}
    },
    "dataloader/preprocess.py": {
        "torch": {
            "randperm_164": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DA.myImageFloder(all_left_img, all_right_img, all_left_disp, True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DA.myImageFloder(test_left_img, test_right_img, test_left_disp, False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stackhourglass(args.maxdisp)",
                            "Call"
                        ],
                        [
                            "basic(args.maxdisp)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_65": {
                "variable": {
                    "value": "pretrain_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_122": {
                "variable": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(imgL, (0, right_pad, top_pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_123": {
                "variable": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(imgR, (0, right_pad, top_pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(output1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(output2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(output3, 1)",
                            "Call"
                        ],
                        [
                            "model(imgL, imgR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(output3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(output3, 1)",
                            "Call"
                        ],
                        [
                            "model(imgL, imgR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(output3)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "disp_true[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'test_loss': total_test_loss / len(TestImgLoader)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savefilename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.savemodel + '/checkpoint_' + str(epoch) + '.tar'",
                            "BinOp"
                        ],
                        [
                            "args.savemodel + 'testinformation.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgL, imgR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_93": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "disp_true[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.state_dict(), 'train_loss': total_train_loss / len(TrainImgLoader)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savefilename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.savemodel + '/checkpoint_' + str(epoch) + '.tar'",
                            "BinOp"
                        ],
                        [
                            "args.savemodel + 'testinformation.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_89": {
                "input": {
                    "value": "output2[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "disp_true[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/basic.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.dres0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(64, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.dres1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.dres2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.dres3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.dres4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_84": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(refimg_fea.size()[0], refimg_fea.size()[1] * 2, self.maxdisp / 4, refimg_fea.size()[2], refimg_fea.size()[3]).zero_(), volatile=not self.training).cuda()",
                            "Call"
                        ],
                        [
                            "cost.contiguous()",
                            "Call"
                        ],
                        [
                            "self.classify(cost0)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, left.size()[2], left.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(refimg_fea.size()[0], refimg_fea.size()[1] * 2, self.maxdisp / 4, refimg_fea.size()[2], refimg_fea.size()[3]).zero_(), volatile=not self.training).cuda()",
                            "Call"
                        ],
                        [
                            "cost.contiguous()",
                            "Call"
                        ],
                        [
                            "self.classify(cost0)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(refimg_fea.size()[0], refimg_fea.size()[1] * 2, self.maxdisp / 4, refimg_fea.size()[2], refimg_fea.size()[3]).zero_(), volatile=not self.training).cuda()",
                            "Call"
                        ],
                        [
                            "cost.contiguous()",
                            "Call"
                        ],
                        [
                            "self.classify(cost0)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_40": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/stackhourglass.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(inplanes, inplanes * 2, kernel_size=3, stride=2, pad=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(inplanes * 2, inplanes * 2, kernel_size=3, stride=2, pad=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(inplanes * 2, inplanes * 2, kernel_size=3, stride=1, pad=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(inplanes * 2, inplanes * 2, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(inplanes * 2, inplanes, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.dres0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(64, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.dres1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.classif1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.classif2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.classif3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn_3d(32, 32, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_149": {
                "variable": {
                    "value": "cost3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif3(out3) + cost2",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost3, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost3, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, left.size()[2], left.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "cost3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif3(out3) + cost2",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost3, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "pred3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif3(out3) + cost2",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost3, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre + postsqu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(pre + postsqu, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(pre, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "post",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(out) + presqu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "post",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(out) + pre",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_138": {
                "variable": {
                    "value": "cost1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif1(out1)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost1, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, left.size()[2], left.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_139": {
                "variable": {
                    "value": "cost2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif2(out2) + cost1",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost2, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.maxdisp, left.size()[2], left.size()[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "cost1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif1(out1)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost1, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif1(out1)",
                            "Call"
                        ],
                        [
                            "F.upsample(cost1, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "cost2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif2(out2) + cost1",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost2, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classif2(out2) + cost1",
                            "BinOp"
                        ],
                        [
                            "F.upsample(cost2, [self.maxdisp, left.size()[2], left.size()[3]], mode='trilinear')",
                            "Call"
                        ],
                        [
                            "torch.squeeze(cost2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_25": {
                "in_channels": {
                    "value": "inplanes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "num_features": {
                    "value": "inplanes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_28": {
                "in_channels": {
                    "value": "inplanes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_29": {
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_76": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_84": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/submodule.py": {
        "torch": {
            "Sequential_12": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=dilation if dilation > 1 else pad, dilation=dilation, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, padding=pad, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn(inplanes, planes, 3, stride, pad, dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_48": {
                "variable": {
                    "value": "self.disp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * self.disp.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.firstconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn(3, 32, 3, 2, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((64, 64), stride=(64, 64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((32, 32), stride=(32, 32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((16, 16), stride=(16, 16))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.branch4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((8, 8), stride=(8, 8))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.lastconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn(320, 128, 3, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "upsample_115": {
                "variable": {
                    "value": "output_branch1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_branch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch1(output_skip)",
                            "Call"
                        ],
                        [
                            "F.upsample(output_branch1, (output_skip.size()[2], output_skip.size()[3]), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_skip.size()[2], output_skip.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_118": {
                "variable": {
                    "value": "output_branch2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_branch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch2(output_skip)",
                            "Call"
                        ],
                        [
                            "F.upsample(output_branch2, (output_skip.size()[2], output_skip.size()[3]), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_skip.size()[2], output_skip.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_121": {
                "variable": {
                    "value": "output_branch3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_branch3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3(output_skip)",
                            "Call"
                        ],
                        [
                            "F.upsample(output_branch3, (output_skip.size()[2], output_skip.size()[3]), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_skip.size()[2], output_skip.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_124": {
                "variable": {
                    "value": "output_branch4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_branch4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch4(output_skip)",
                            "Call"
                        ],
                        [
                            "F.upsample(output_branch4, (output_skip.size()[2], output_skip.size()[3]), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_skip.size()[2], output_skip.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "output_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_raw, output_skip, output_branch4, output_branch3, output_branch2, output_branch1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation if dilation > 1 else pad",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "kernel_size": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_78": {
                "kernel_size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "kernel_size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "submission.py": {
        "torch": {
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stackhourglass(args.maxdisp)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ],
                        [
                            "basic(args.maxdisp)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_99": {
                "variable": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgL.cuda()",
                            "Call"
                        ],
                        [
                            "infer_transform(imgL_o)",
                            "Call"
                        ],
                        [
                            "F.pad(imgL, (0, right_pad, top_pad, 0)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "imgL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_100": {
                "variable": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgR.cuda()",
                            "Call"
                        ],
                        [
                            "infer_transform(imgR_o)",
                            "Call"
                        ],
                        [
                            "F.pad(imgR, (0, right_pad, top_pad, 0)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, right_pad, top_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "imgR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgL, imgR)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(output).data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/preprocess.py": {
        "torch": {
            "randperm_164": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}