{
    "demo/predictor.py": {
        "torch": {
            "device_132": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "self.palette",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_148": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_259": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_259": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_334": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "1 / masks_per_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(masks_per_dim * height, masks_per_dim * width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_342": {
                "variable": {
                    "value": "masks_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks_per_dim ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/build.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_43": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "Generator_46": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_48": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_50": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_221": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_226": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_361": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_175": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_179": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_225": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "compute_on_dataset(model, data_loader, device)",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_28": {
                "variable": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "interpolate_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_20": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_22": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_106": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "inner_block_module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "layer_block_module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_channels, out_channels, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "inner_block_module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "layer_block_module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "input": {
                    "value": "p6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_43": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_196": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu__256": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__260": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__269": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__288": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/detector/multi_scale_wrapper.py": {
        "torch": {
            "interpolate_40": {
                "input": {
                    "value": "images.tensors[:, :, :image_size[0], :image_size[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resizer.get_size(image_size[::-1])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/detector/retinanet.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_95": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "empty_58": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match_quality_matrix.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_90": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_119": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_85": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_133": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_137": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_123": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j + no_background",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_139": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_144": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_104": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS * resolution ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES - 1",
                            "BinOp"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES - 1",
                            "BinOp"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES - 1",
                            "BinOp"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES - 1",
                            "BinOp"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_mask[0, 0]",
                            "Subscript"
                        ],
                        [
                            "Image.fromarray(mask.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "mask.resize((w, h), resample=Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "np.array(mask, copy=False)",
                            "Call"
                        ],
                        [
                            "np.array(mask > thresh, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask * 255).to(torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "stack_44": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_119": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_127": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_43": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "cat_67": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_244": {
                "ndarray": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/free_anchor_loss.py": {
        "torch": {
            "sigmoid_94": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(box_cls_flattened, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_180": {
                "variable": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(box_prob, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_207": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * logits).sum(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(bag_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "logits ** gamma * F.binary_cross_entropy(logits, torch.zeros_like(logits), reduction='none')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_157": {
                "variable": {
                    "value": "(_, matched)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxlist_iou(targets_, anchors_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pre_anchor_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_161": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob_[matched]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels_.view(-1, 1, 1).repeat(1, self.pre_anchor_topk, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_170": {
                "variable": {
                    "value": "matched_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-retinanet_regression_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_198": {
                "condition": {
                    "value": "smooth_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs_val < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 / beta * val ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "abs_val - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_198": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_207": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * logits).sum(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_121": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(len(labels_)).type_as(labels_), labels_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_124": {
                "variable": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.arange(len(labels_)).type_as(labels_), labels_], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.sparse.sum(object_cls_box_prob, dim=0).to_dense()).t_()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "object_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((object_box_iou - t1) / (t2 - t1)).clamp(min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_134": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sparse.sum(object_cls_box_prob, dim=0).to_dense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "positive_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_212": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros_like(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_grad_enabled_103": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors_.bbox.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_147": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.flip([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "nonzero_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(labels_.unsqueeze(dim=-1) == indices[0], object_box_prob[:, indices[1]], torch.tensor([0]).type_as(object_box_prob)).max(dim=0).values",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(anchors_.bbox.size(0), self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_121": {
                "start": {
                    "value": "len(labels_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_141": {
                "condition": {
                    "value": "labels_.unsqueeze(dim=-1) == indices[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "object_box_prob[:, indices[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0]).type_as(object_box_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_141": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices, object_box_prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_165": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "inds_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_95": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_175": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_93": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_94": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_132": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet.py": {
        "torch": {
            "Conv2d_62": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "*cls_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_43": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GroupNorm_56": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet_infer.py": {
        "torch": {
            "kthvalue_197": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_202": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_202": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_184": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80
                            ],
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/retinanet_loss.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "scaled_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "cropped_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_79": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_80": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_112": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_121": {
                "input": {
                    "value": "wh_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh_inter / (wh1[:, None] + wh2 - wh_inter)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "as_tensor_59": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_111": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_49": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "variable"
                        ],
                        [
                            "cached_f",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_96": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "empty_113": {
                "variable": {
                    "value": "data_to_communicate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_122": {
                "tensor": {
                    "value": "data_to_communicate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(256, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir, file_template.format(rank))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_50": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.tensor(1, device='cuda')",
                            "Call"
                        ],
                        [
                            "torch.ByteTensor(storage).to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(world_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir, file_template.format(r))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "nms_recall/inference_for_NR.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "with_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "with_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(with_overlaps).numpy()",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(with_overlaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "without_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "without_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(without_overlaps).numpy()",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(without_overlaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_116": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "[iouThrs, nms_iou_recalls]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_folder, 'iou_recalls.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_initialized_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nms_recall/without_nms_postprocessor.py": {
        "torch": {
            "kthvalue_264": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_269": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_269": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_251": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80
                            ],
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data_samplers.py": {
        "torch": {
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tools/eval_NR.py": {
        "torch": {
            "set_device_86": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/multi_scale_test.py": {
        "torch": {
            "set_device_39": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_net.py": {
        "torch": {
            "set_device_43": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_138": {
                "device": {
                    "value": "args.local_rank % torch.cuda.device_count()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}