{
    "Nets.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numOut / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_201": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_211": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nFeat / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_244": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nFeat / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "numIn",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "numOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "nFeat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "roads/iterative/iterative_roads_local_mask.py": {
        "torch": {
            "from_numpy_120": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_221": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_146": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "roads/patch/bifurcations_toolbox_roads.py": {
        "torch": {
            "from_numpy_504": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.flip(image, flipCode=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 3), np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_505": {
                "ndarray": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample['gt']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((h, w, 1), np.float32)",
                            "Call"
                        ],
                        [
                            "make_gt(img_crop, output_points, (patch_size, patch_size), self.sigma)",
                            "Call"
                        ],
                        [
                            "np.zeros((patch_size, patch_size))",
                            "Call"
                        ],
                        [
                            "make_gt(img_crop, output_points, (patch_size, patch_size), self.sigma)",
                            "Call"
                        ],
                        [
                            "np.zeros((patch_size, patch_size))",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt, flipCode=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 1), np.float32)",
                            "Call"
                        ],
                        [
                            "gt.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "roads/patch/generate_gt_val_roads.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tbroads.ToolDataset(train=resultsOnTraining, inputRes=p['inputRes'], outputRes=p['outputRes'], sigma=float(p['outputRes'][0]) / p['g_size'], db_root_dir=db_root_dir, transform=composed_transforms_test, save_vertices_indxs=save_vertices_indxs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "roads/patch/test_road_patches.py": {
        "torch": {
            "load_41": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_49": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(os.path.join(db_root_dir, 'img_%02d_patch_%02d_img.png' % (ii + 1, jj + 1)))",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 3))",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "roads/patch/train_road_patches.py": {
        "torch": {
            "MSELoss_57": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tbroads.ToolDataset(train=True, inputRes=p['inputRes'], outputRes=p['outputRes'], sigma=float(p['outputRes'][0]) / p['g_size'], db_root_dir=db_root_dir, transform=composed_transforms, save_vertices_indxs=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "p['trainBatch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_53": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, modelName + '_epoch-' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(os.path.join(val_dir, 'img_%02d_patch_%02d_img.png' % (ii + 1, jj + 1)))",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 3))",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(os.path.join(val_dir, 'img_%02d_patch_%02d_gt.png' % (ii + 1, jj + 1)))",
                            "Call"
                        ],
                        [
                            "np.array(gt)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 1), np.float32)",
                            "Call"
                        ],
                        [
                            "gt.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gt)",
                            "Call"
                        ],
                        [
                            "Variable(gt)",
                            "Call"
                        ],
                        [
                            "gt.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vessels/iterative/iterative_graph_creation_no_mask_offset.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_203": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_70": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "vessels/iterative/visualization/visualization_iterative_graph.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_113": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "load_70": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "vessels/iterative/visualization/visualization_iterative_local_mask_vessels.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_crop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[y_tmp:y_tmp + patch_size, x_tmp:x_tmp + patch_size, :]",
                            "Subscript"
                        ],
                        [
                            "img_crop.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_crop)",
                            "Call"
                        ],
                        [
                            "img_crop.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_115": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "load_72": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "vessels/patch/bifurcations_toolbox.py": {
        "torch": {
            "from_numpy_665": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.flip(image, flipCode=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 3), np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_666": {
                "ndarray": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample['gt']",
                            "Subscript"
                        ],
                        [
                            "np.zeros((h, w, 1), np.float32)",
                            "Call"
                        ],
                        [
                            "make_gt(img_crop, output_points, (patch_size, patch_size), self.sigma)",
                            "Call"
                        ],
                        [
                            "make_gt(img_crop, output_points, (patch_size, patch_size), self.sigma)",
                            "Call"
                        ],
                        [
                            "cv2.flip(gt, flipCode=1)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 1), np.float32)",
                            "Call"
                        ],
                        [
                            "gt.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vessels/patch/generate_gt_test.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tb.ToolDataset(train=resultsOnTraining, inputRes=p['inputRes'], outputRes=p['outputRes'], sigma=float(p['outputRes'][0]) / p['g_size'], db_root_dir=db_root_dir, transform=composed_transforms_test, gt_masks=p['GTmasks'], junctions=junctions, connected=connected, from_same_vessel=from_same_vessel, bifurcations_allowed=bifurcations_allowed, save_vertices_indxs=save_vertices_indxs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vessels/patch/test_hg.py": {
        "torch": {
            "load_67": {
                "f": {
                    "value": "os.path.join(model_dir, os.path.join(model_dir, modelName + '_epoch-' + str(epoch) + '.pth'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_device_75": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(os.path.join(db_root_dir, 'img_%02d_patch_%02d_img.png' % (ii + 1, jj + 1)))",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((h, w, 3))",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vessels/patch/train_hg.py": {
        "torch": {
            "MSELoss_57": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tb.ToolDataset(train=True, inputRes=p['inputRes'], outputRes=p['outputRes'], sigma=float(p['outputRes'][0]) / p['g_size'], db_root_dir=db_root_dir, transform=composed_transforms, gt_masks=p['GTmasks'], junctions=junctions, connected=connected, from_same_vessel=from_same_vessel, bifurcations_allowed=bifurcations_allowed, save_vertices_indxs=save_vertices_indxs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "p['trainBatch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "db_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tb.ToolDataset(train=False, inputRes=p['inputRes'], outputRes=p['outputRes'], sigma=float(p['outputRes'][0]) / p['g_size'], db_root_dir=db_root_dir, transform=composed_transforms_test, gt_masks=p['GTmasks'], junctions=junctions, connected=connected, from_same_vessel=from_same_vessel, bifurcations_allowed=bifurcations_allowed, save_vertices_indxs=save_vertices_indxs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "testBatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_53": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['SGE_GPU'])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_146": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, modelName + '_epoch-' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}