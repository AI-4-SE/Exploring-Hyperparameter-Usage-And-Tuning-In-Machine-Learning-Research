{
    "Src/Algorithms/Agent.py": {
        "torch": {}
    },
    "Src/Algorithms/Extrapolator.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "x_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(max_len, max_len + delta).reshape([-1, 1]) / const",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "phi_x_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_basis(x_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_65": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_68": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_xt.mm(diag).mm(phi_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(k).reshape([1, k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_43": {
                "variable": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones([1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(k)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Algorithms/NS_utils.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_74": {
                "variable": {
                    "value": "log_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ],
                        [
                            "self.forward(state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "self.action_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.action_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.high - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_123": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(action_mean, requires_grad=False) * self.config.gauss_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_134": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.fc_mean(state)) * self.action_diff + self.action_low",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self.fc_mean(state)) * self.action_diff + self.action_low",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "input": {
                    "value": "self.fc_var(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "logp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(action).view(-1).data.numpy().sum(axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_99": {
                "input": {
                    "value": "self.fc_mean(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "input": {
                    "value": "self.fc_mean(state)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Algorithms/OFPG.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor(state, dtype=float32, requires_grad=False, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "self.state_features.forward(state.view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "pi_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_pi.view(B, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pi_a / beta).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(rho, 0, self.config.importance_clip)",
                            "Call"
                        ],
                        [
                            "rho * mask",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.config.importance_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "log_pi_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi * returns",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_92": {
                "input": {
                    "value": "log_pi_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(log_pi * returns, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_100": {
                "variable": {
                    "value": "pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_all.view(B, H, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "pi_all * log_pi_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Algorithms/ONPG.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor(state, dtype=float32, requires_grad=False, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "self.state_features.forward(state.view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "pi_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_pi.view(B, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pi_a / beta).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(rho, 0, self.config.importance_clip)",
                            "Call"
                        ],
                        [
                            "rho * mask",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.config.importance_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "log_pi_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi * returns",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_91": {
                "input": {
                    "value": "log_pi_return",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(log_pi * returns, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_99": {
                "variable": {
                    "value": "pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_all.view(B, H, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_96": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "pi_all * log_pi_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Algorithms/ProOLS.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor(state, dtype=float32, requires_grad=False, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "self.state_features.forward(state.view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_75": {
                "variable": {
                    "value": "pi_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_pi.view(B, H)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pi_a / beta).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(rho, 0, self.config.importance_clip)",
                            "Call"
                        ],
                        [
                            "rho * mask",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.config.importance_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "log_pi_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi * returns",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "del_extrapolator",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.extrapolator.derivatives(id)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "del_extrapolator * log_pi_return",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_111": {
                "variable": {
                    "value": "pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_all.view(B, H, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "pi_all * log_pi_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Algorithms/ProWLS.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor(state, dtype=float32, requires_grad=False, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "self.state_features.forward(state.view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "rho_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(log_pi, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_81": {
                "variable": {
                    "value": "rho_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rho_num / rho_denom",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(rho, 0, self.config.importance_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.config.importance_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "total_return",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "log_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_pi.view(B, H)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_all.view(B, H, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "pi_all * log_pi_all",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Src/Utils/Basis.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "self.state_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.env.observation_space.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.state_high",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "config.env.observation_space.high",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.dummy_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.dummy_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.preprocess(state)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.basis_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_83": {
                "variable": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_89": {
                "variable": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basis * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(list(itertools.product(coeff, repeat=dim))).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(1, order + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Src/Utils/Policy.py": {
        "torch": {}
    },
    "Src/Utils/utils.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_171": {},
            "save_198": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(episode_count) + 'checkpoint.path.rar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(buffer_size, max_horizon, state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "stype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float32",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(buffer_size, max_horizon, action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "atype",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_284": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(buffer_size, max_horizon)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(buffer_size, max_horizon)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(buffer_size, max_horizon)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "self.s[pos][step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.stype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "self.a[pos][step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.atype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "self.beta[pos][step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "self.r[pos][step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "r1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "self.mask[pos][step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(episode_count) + 'checkpoint.path.rar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__113": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_121": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(episode_count) + 'checkpoint.path.rar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_165": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Src/config.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}