{
    "causalml/dataset/classification.py": {
        "sklearn": {
            "make_classification_114": {
                "variable": {
                    "value": "(X1, Y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples * len(treatment_name)",
                            "BinOp"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_classification_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "n_classification_informative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "n_classification_redundant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_repeated": {
                    "value": "n_classification_repeated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "[1 - positive_class_proportion, positive_class_proportion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "make_classification_170": {
                "variable": {
                    "value": "(X_increase, Y_increase)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples * len(treatment_name)",
                            "BinOp"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_uplift_increase_dict[treatment_key_i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'treatment1': 2",
                            "Method Argument"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "n_uplift_increase_dict[treatment_key_i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'treatment1': 2",
                            "Method Argument"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "[1 - adjust_class_proportion, adjust_class_proportion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "make_classification_210": {
                "variable": {
                    "value": "(X_decrease, Y_decrease)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples * len(treatment_name)",
                            "BinOp"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_uplift_decrease_dict[treatment_key_i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'treatment1': 0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "n_uplift_decrease_dict[treatment_key_i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'treatment1': 0",
                            "Method Argument"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "[1 - adjust_class_proportion, adjust_class_proportion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/dataset/synthetic.py": {
        "sklearn": {
            "train_test_split_343": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val, w_train, w_val, tau_train, tau_val, b_train, b_val, e_train, e_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_5": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "valid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "auc_646": {
                "x": {
                    "value": "cumlift.index.values / 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cumlift[learner].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/feature_selection/filters.py": {
        "sklearn": {
            "SimpleImputer_451": {
                "variable": {
                    "value": "data[feature_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "np.nan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strategy": {
                    "value": "null_impute",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "causalml/features.py": {
        "sklearn": {}
    },
    "causalml/inference/iv/drivlearner.py": {
        "sklearn": {
            "KFold_123": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "causalml/inference/meta/drlearner.py": {
        "sklearn": {
            "KFold_111": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "causalml/inference/meta/explainer.py": {
        "sklearn": {
            "train_test_split_118": {
                "variable": {
                    "value": "(self.X_train, self.X_test, self.tau_train, self.tau_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permutation_importance_178": {
                "estimator": {
                    "value": "perm_estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.models_tau[group]",
                            "Subscript"
                        ]
                    ]
                },
                "X": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.tau_test[:, idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/meta/rlearner.py": {
        "sklearn": {
            "KFold_74": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_val_predict_124": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ],
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_val_predict_607": {
                "variable": {
                    "value": "yhat",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ],
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_val_predict_465": {
                "estimator": {
                    "value": "self.model_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ],
                        [
                            "convert_pd_to_np(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "method": {
                    "value": "predict_proba",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "train_test_split_641": {
                "variable": {
                    "value": "(X_train_filt, X_test_filt, y_train_filt, y_test_filt, yhat_train_filt, yhat_test_filt, w_train, w_test, p_train_filt, p_test_filt, sample_weight_train_filt, sample_weight_test_filt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "yhat_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_4": {
                    "value": "p_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_5": {
                    "value": "sample_weight_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/meta/slearner.py": {
        "sklearn": {
            "DummyRegressor_63": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/meta/tlearner.py": {
        "sklearn": {
            "MLPRegressor_422": {
                "hidden_layer_sizes": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/meta/tmle.py": {
        "sklearn": {
            "MinMaxScaler_57": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalml/match.py": {
        "sklearn": {
            "check_random_state_116": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_140": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NearestNeighbors_152": {
                "variable": {
                    "value": "matching_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/metrics/classification.py": {
        "sklearn": {
            "log_loss_22": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/metrics/regression.py": {
        "sklearn": {}
    },
    "causalml/optimize/policylearner.py": {
        "sklearn": {
            "KFold_47": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientBoostingRegressor_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalml/optimize/unit_selection.py": {
        "sklearn": {
            "clone_143": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.learner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_156": {
                "variable": {
                    "value": "trt_learner",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.learner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_157": {
                "variable": {
                    "value": "ctr_learner",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.learner",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/propensity.py": {
        "sklearn": {
            "LogisticRegressionCV_96": {
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "train_test_split_144": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "stop_val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_85": {
                "n_splits": {
                    "value": "self.model_kwargs.pop('n_fold') if 'n_fold' in self.model_kwargs else 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.model_kwargs.get('random_state', 42)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_69": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "propensity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_counterfactual_unit_selection.py": {
        "sklearn": {
            "train_test_split_23": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogisticRegressionCV_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ivlearner.py": {
        "sklearn": {
            "LinearRegression_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_meta_learners.py": {
        "sklearn": {
            "train_test_split_683": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_728": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_773": {
                "variable": {
                    "value": "propensity_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_777": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_844": {
                "variable": {
                    "value": "propensity_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_848": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_895": {
                "variable": {
                    "value": "propensity_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_899": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LinearRegression_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_535": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_730": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_995": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_963": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_970": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_975": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_980": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_985": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sensitivity.py": {
        "sklearn": {
            "LinearRegression_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_uplift_trees.py": {
        "sklearn": {
            "train_test_split_26": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_97": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_177": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_value_optimization.py": {
        "sklearn": {
            "train_test_split_22": {
                "variable": {
                    "value": "(df_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogisticRegression_57": {
                "variable": {
                    "value": "proba_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/tf/dragonnet.py": {
        "tensorflow": {
            "Input_74": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_138": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(input_dim,), name='input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "concat_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Concatenate(1)([y0_predictions, y1_predictions, t_predictions, epsilons])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_77": {
                "units": {
                    "value": "self.neurons_per_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_82": {
                "units": {
                    "value": "self.neurons_per_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_87": {
                "units": {
                    "value": "self.neurons_per_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_93": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "int(self.neurons_per_layer / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_101": {
                "units": {
                    "value": "int(self.neurons_per_layer / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "units": {
                    "value": "int(self.neurons_per_layer / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_113": {
                "units": {
                    "value": "int(self.neurons_per_layer / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "y0_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_126": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(self.reg_l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "y1_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_135": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TerminateOnNaN_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "EarlyStopping_175": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_176": {
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.verbose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TerminateOnNaN_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "EarlyStopping_200": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_201": {
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "self.verbose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_170": {
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_216": {
                "lr": {
                    "value": "sgd_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/tf/utils.py": {
        "tensorflow": {
            "reduce_sum_22": {
                "variable": {
                    "value": "losst",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K.binary_crossentropy(t_true, t_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "variable": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1.0 - t_true) * tf.square(y_true - y0_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t_true * tf.square(y_true - y1_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_accuracy_82": {
                "y_true": {
                    "value": "t_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "t_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "(t_pred + 0.001) / 1.002",
                            "BinOp"
                        ],
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "(t_pred + 0.01) / 1.02",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_98": {
                "x": {
                    "value": "tf.reduce_mean(epsilons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "variable": {
                    "value": "targeted_regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_true - y_pert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_crossentropy_22": {
                "y_true": {
                    "value": "t_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ],
                        [
                            "concat_true[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "t_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "(t_pred + 0.001) / 1.002",
                            "BinOp"
                        ],
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "concat_pred[:, 2]",
                            "Subscript"
                        ],
                        [
                            "(t_pred + 0.01) / 1.02",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_98": {
                "input_tensor": {
                    "value": "epsilons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_pred[:, 3]",
                            "Subscript"
                        ],
                        [
                            "concat_pred[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_45": {
                "x": {
                    "value": "y_true - y0_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_46": {
                "x": {
                    "value": "y_true - y1_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_134": {
                "x": {
                    "value": "y_true - y_pert",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "causalml/inference/nn/cevae.py": {
        "torch": {
            "tensor_101": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_cevae.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "treatment",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}