{
    "baselines/attack/CW/Add_Cluster.py": {
        "sklearn": {
            "DBSCAN_101": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "min_number",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cross_entropy_35": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_39": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i, :, idx[i]] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_42": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "clusters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._init_centers(ori_data, target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(clusters).float().cuda()",
                            "Call"
                        ],
                        [
                            "clusters.view(B, self.num_add * self.cl_num_p, 3)",
                            "Call"
                        ],
                        [
                            "clusters.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.attack_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "dist_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "cat_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ori_data, adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_197": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_168": {
                "*size": {
                    "value": "(B, 3, self.num_add * self.cl_num_p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "current_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((B,)) * self.init_weight",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/attack/CW/Add_Objects.py": {
        "sklearn": {
            "DBSCAN_118": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "Constant"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "min_number",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cross_entropy_37": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_41": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i, :, idx[i]] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_44": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosval",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosval",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cosval, zeros, sinval, zeros, ones, zeros, -sinval, zeros, cosval]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_180": {
                "variable": {
                    "value": "rot_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cri_points[i].detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(points, [1, 0])",
                            "Call"
                        ],
                        [
                            "points[filter_idx]",
                            "Subscript"
                        ],
                        [
                            "points.view(batch * self.num_add, self.obj_num_p, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rot_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([cosval, zeros, sinval, zeros, ones, zeros, -sinval, zeros, cosval], dim=-1).view(batch * self.num_add, 3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_214": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._init_centers(ori_data, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "angles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, self.num_add, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "objects",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.tile(self.object_pc, (B, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(objects).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_245": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_objects, adv_shifts, adv_angles]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.attack_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "dist_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_161": {
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_161": {
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "cat_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ori_data, adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_278": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_239": {
                "input": {
                    "value": "adv_angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles.detach().clone()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(adv_angles).float().cuda() * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_229": {
                "*size": {
                    "value": "(B, self.num_add, self.obj_num_p, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_233": {
                "*size": {
                    "value": "(B, self.num_add, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "ndarray": {
                    "value": "current_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((B,)) * self.init_weight",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/defense/SOR.py": {
        "torch": {
            "sum_35": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_44": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().double()",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/defense/pn_utils.py": {
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points.clone().detach()",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "input": {
                    "value": "distance",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "np.ones((N,)) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/defense/repulsion_loss.py": {
        "torch": {
            "sum_46": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grouped_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(grouped_points ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(dist2, torch.tensor(self.eps).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(grouped_points ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(dist2, torch.tensor(self.eps).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_49": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(dist / self.h) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "uniform_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uniform_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.radius - dist) * weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(uniform_loss, dim=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/opt_defense.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_78": {
                "variable": {
                    "value": "centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.stack([pc[i][idx[i]] for i in range(B)], dim=0).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.clamp(points + noise, min=-0.5 * args.padding_scale, max=0.5 * args.padding_scale)",
                            "Call"
                        ],
                        [
                            "init_points(batch_proc_pc)",
                            "Call"
                        ],
                        [
                            "optimize_points(points, z, c, rep_weight=args.rep_weight, iterations=args.iterations, printing=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pc + sor_pc[i]",
                            "BinOp"
                        ],
                        [
                            "scaled_centered_pc[idx]",
                            "Subscript"
                        ],
                        [
                            "scaled_centered_pc",
                            "Name"
                        ],
                        [
                            "sor_process(pc)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_142": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "torch_all_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_centered_pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "centered_pc / scale * padding_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "torch_all_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[opt_points]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "cfg['test']['model_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc[i:i + batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_pc).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_169": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i][idx[i]] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_175": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.5 * args.padding_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5 * args.padding_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_213": {
                "variable": {
                    "value": "occ_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator.model.decode(opt_points, c).logits",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "occ_threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones((B, K)).float().cuda() * args.threshold",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "occ_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(occ_value, occ_threshold, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.mean(occ_loss)",
                            "Call"
                        ],
                        [
                            "occ_loss * K",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "rep_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(points ** 2, dim=2) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_167": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "pc.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(B, args.sample_npoint)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "rep_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).float().cuda()",
                            "Call"
                        ],
                        [
                            "repulsion_loss(opt_points)",
                            "Call"
                        ],
                        [
                            "torch.mean(rep_loss)",
                            "Call"
                        ],
                        [
                            "rep_loss * rep_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_284": {
                "variable": {
                    "value": "batch_proc_sel_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_pc[1] for one_pc in batch_proc_pc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_174": {
                "input": {
                    "value": "points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.stack([pc[i][idx[i]] for i in range(B)], dim=0).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.clamp(points + noise, min=-0.5 * args.padding_scale, max=0.5 * args.padding_scale)",
                            "Call"
                        ],
                        [
                            "init_points(batch_proc_pc)",
                            "Call"
                        ],
                        [
                            "optimize_points(points, z, c, rep_weight=args.rep_weight, iterations=args.iterations, printing=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_204": {
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "batch_proc_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_pc[0] for one_pc in batch_proc_pc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_162": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(one_pc)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.sample_npoint,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_236": {
                "input": {
                    "value": "occ_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator.model.decode(opt_points, c).logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/setup.py": {
        "torch": {}
    },
    "ConvONet/src/common.py": {
        "torch": {
            "gather_105": {
                "variable": {
                    "value": "points_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points2.view(batch_size, 1, T, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_12_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx_nn_12.view(batch_size, -1, 1).expand_as(points1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_109": {
                "variable": {
                    "value": "points_21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points1.view(batch_size, T, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_21_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx_nn_21.view(batch_size, -1, 1).expand_as(points2)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_155": {
                "variable": {
                    "value": "pxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_156": {
                "variable": {
                    "value": "pys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_157": {
                "variable": {
                    "value": "pzs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pxs, pys, pzs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "Rt_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_new, t_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remainder_412": {
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([pxs, pys, pzs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.remainder(p, self.s) / self.s",
                            "BinOp"
                        ],
                        [
                            "self.pe(p)",
                            "Call"
                        ],
                        [
                            "2.0 * p - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat(out, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_436": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_437": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/src/conv_onet/config.py": {
        "torch": {
            "Embedding_64": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "c_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['model']['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/src/conv_onet/generation.py": {
        "torch": {
            "split_342": {
                "variable": {
                    "value": "p_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "occ_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "occ_hats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_448": {
                "variable": {
                    "value": "vertices_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vertices",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "vertices / np.array([n_x - 1, n_y - 1, n_z - 1])",
                            "BinOp"
                        ],
                        [
                            "vertices * mc_unit + bb_min",
                            "BinOp"
                        ],
                        [
                            "box_size * (vertices - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(vertices)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_485": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v0.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_491": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_504": {
                "variable": {
                    "value": "face_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_v1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "face_vertex[:, 1, :] - face_vertex[:, 0, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "face_v2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "face_vertex[:, 2, :] - face_vertex[:, 1, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_507": {
                "variable": {
                    "value": "face_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.decode(face_point.unsqueeze(0), c).logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "pp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "pp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_459": {
                "input": {
                    "value": "ni",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-vi.grad",
                            "UnaryOp"
                        ],
                        [
                            "ni / torch.norm(ni, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ni.squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_76": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_162": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_510": {
                "outputs": {
                    "value": "[face_value.sum()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[face_point]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/src/conv_onet/models/__init__.py": {
        "torch": {
            "Bernoulli_76": {
                "variable": {
                    "value": "p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder(p, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_63": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/src/conv_onet/models/decoder.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_55": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_65": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_222": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grid_sample_154": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_154": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_159": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_264": {
                "tensor": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "p['p']",
                            "Subscript"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "self.map2local(p)",
                            "Call"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_45": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_136": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_231": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/src/encoder/pointnet.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ConvONet/src/encoder/pointnetpp.py": {
        "torch": {
            "arange_183": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_200": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_201": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_225": {
                "variable": {
                    "value": "group_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "new_xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_293": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_205": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (dists + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "interpolated_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_points(points2, idx) * weight.view(B, N, 3, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, interpolated_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "new_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([points1, interpolated_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv1d_60": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/src/encoder/unet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(from_up, from_down)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_36": {
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_255": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/src/encoder/unet3d.py": {
        "torch": {
            "Conv3d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "not ('g' in order or 'b' in order)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv3d_358": {
                "variable": {
                    "value": "final_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "encoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_433": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "decoders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3d_437": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "f_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_174": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_319": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_330": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, reso, reso, reso))",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "self.pooling(x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "self.upsampling(encoder_features=encoder_features, x=x)",
                            "Call"
                        ],
                        [
                            "self.joining(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.final_conv(x)",
                            "Call"
                        ],
                        [
                            "self.final_activation(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_176": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_222": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool3d_224": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(encoder_features, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_442": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_444": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_544": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_49": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_66": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm3d_70": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_72": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_544": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.non_linearity(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ConvONet/src/layers.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/defense/SOR.py": {
        "torch": {
            "sum_35": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_44": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().double()",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ONet/defense/pn_utils.py": {
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points.clone().detach()",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "input": {
                    "value": "distance",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "np.ones((N,)) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ONet/defense/repulsion_loss.py": {
        "torch": {
            "sum_46": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grouped_points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(grouped_points ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(dist2, torch.tensor(self.eps).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(grouped_points ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.max(dist2, torch.tensor(self.eps).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_49": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(dist / self.h) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "uniform_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uniform_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.radius - dist) * weight",
                            "BinOp"
                        ],
                        [
                            "torch.mean(uniform_loss, dim=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/common.py": {
        "torch": {
            "gather_104": {
                "variable": {
                    "value": "points_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points2.view(batch_size, 1, T, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_12_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx_nn_12.view(batch_size, -1, 1).expand_as(points1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_108": {
                "variable": {
                    "value": "points_21",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points1.view(batch_size, T, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_21_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx_nn_21.view(batch_size, -1, 1).expand_as(points2)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_167": {
                "variable": {
                    "value": "pxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_168": {
                "variable": {
                    "value": "pys",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_169": {
                "variable": {
                    "value": "pzs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pxs, pys, pzs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "Rt_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_new, t_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "scale_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0 / img_size, 0, -1], [0, 2.0 / img_size, -1], [0, 0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "K.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "K.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "K.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/encoder/pointnet.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/layers.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_88": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "variable": {
                    "value": "self.bn_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_132": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_134": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_135": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.fc_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_208": {
                "variable": {
                    "value": "self.conv_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_209": {
                "variable": {
                    "value": "self.conv_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.fc_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.fc_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_94": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_141": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_211": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_263": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_213": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_265": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_180": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[0.0, 0.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/onet/config.py": {
        "torch": {
            "Normal_87": {
                "variable": {
                    "value": "p0_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(z_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "c_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['model']['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "z_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg['model']['z_dim']",
                            "Subscript"
                        ],
                        [
                            "cfg['model']['z_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_89": {
                "*size": {
                    "value": "z_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg['model']['z_dim']",
                            "Subscript"
                        ],
                        [
                            "cfg['model']['z_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ONet/im2mesh/onet/generation.py": {
        "torch": {
            "split_146": {
                "variable": {
                    "value": "p_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "occ_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "occ_hats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_233": {
                "variable": {
                    "value": "vertices_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vertices",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "vertices / np.array([n_x - 1, n_y - 1, n_z - 1])",
                            "BinOp"
                        ],
                        [
                            "box_size * (vertices - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(vertices)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_271": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v0.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_290": {
                "variable": {
                    "value": "face_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_v1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "face_vertex[:, 1, :] - face_vertex[:, 0, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "face_v2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "face_vertex[:, 2, :] - face_vertex[:, 1, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_293": {
                "variable": {
                    "value": "face_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.decode(face_point.unsqueeze(0), z, c).logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_244": {
                "input": {
                    "value": "ni",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-vi.grad",
                            "UnaryOp"
                        ],
                        [
                            "ni / torch.norm(ni, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ni.squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_64": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_296": {
                "outputs": {
                    "value": "[face_value.sum()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[face_point]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/onet/models/__init__.py": {
        "torch": {
            "sum_81": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Bernoulli_111": {
                "variable": {
                    "value": "p_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder(p, z, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_129": {
                "variable": {
                    "value": "q_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self._device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(logstd_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_36": {
                "variable": {
                    "value": "p0_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_97": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "mean_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_127": {
                "variable": {
                    "value": "logstd_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.size(0)",
                            "Call"
                        ],
                        [
                            "p.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_129": {
                "input": {
                    "value": "logstd_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(batch_size, 0).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/onet/models/decoder.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_96": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_158": {
                "variable": {
                    "value": "self.conv_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CResnetBlockConv1d(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_164": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_202": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_203": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_204": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_205": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_206": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_207": {
                "variable": {
                    "value": "self.fc_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_216": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_272": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_279": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_281": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_50": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_113": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_221": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_286": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/onet/models/encoder_latent.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ONet/im2mesh/onet/models/legacy.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256 * 4 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_16": {
                "variable": {
                    "value": "self.convtrp_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_18": {
                "variable": {
                    "value": "self.convtrp_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_20": {
                "variable": {
                    "value": "self.convtrp_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_48": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([z, c], dim=1)",
                            "Call"
                        ],
                        [
                            "c",
                            "Name"
                        ],
                        [
                            "self.fc_in(net)",
                            "Call"
                        ],
                        [
                            "net.view(batch_size, 256, 4, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.convtrp_0(self.actvn(net))",
                            "Call"
                        ],
                        [
                            "self.convtrp_1(self.actvn(net))",
                            "Call"
                        ],
                        [
                            "self.convtrp_2(self.actvn(net))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(net, 2 * p.unsqueeze(1).unsqueeze(1), padding_mode='border')",
                            "Call"
                        ],
                        [
                            "net.squeeze(2).squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.fc_f(self.actvn(net))",
                            "Call"
                        ],
                        [
                            "net + net_p",
                            "BinOp"
                        ],
                        [
                            "net + net_z",
                            "BinOp"
                        ],
                        [
                            "net + net_c",
                            "BinOp"
                        ],
                        [
                            "self.block0(net)",
                            "Call"
                        ],
                        [
                            "self.block1(net)",
                            "Call"
                        ],
                        [
                            "self.fc_p1(p) + self.fc_p2(Ap)",
                            "BinOp"
                        ],
                        [
                            "net + net_z",
                            "BinOp"
                        ],
                        [
                            "net + net_c",
                            "BinOp"
                        ],
                        [
                            "self.block0(net)",
                            "Call"
                        ],
                        [
                            "self.block1(net)",
                            "Call"
                        ],
                        [
                            "self.block2(net)",
                            "Call"
                        ],
                        [
                            "self.block3(net)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "2 * p.unsqueeze(1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc_p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc_c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc_c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_105": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "2 * Ap2.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.fc_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ONet/opt_defense.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_78": {
                "variable": {
                    "value": "centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.stack([pc[i][idx[i]] for i in range(B)], dim=0).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.clamp(points + noise, min=-0.5 * args.padding_scale, max=0.5 * args.padding_scale)",
                            "Call"
                        ],
                        [
                            "init_points(batch_proc_pc)",
                            "Call"
                        ],
                        [
                            "optimize_points(points, z, c, rep_weight=args.rep_weight, iterations=args.iterations, printing=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pc + sor_pc[i]",
                            "BinOp"
                        ],
                        [
                            "scaled_centered_pc[idx]",
                            "Subscript"
                        ],
                        [
                            "scaled_centered_pc",
                            "Name"
                        ],
                        [
                            "sor_process(pc)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_142": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "torch_all_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_centered_pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "centered_pc / scale * padding_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "torch_all_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[opt_points]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "cfg['test']['model_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc[i:i + batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_pc).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_169": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i][idx[i]] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_175": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.5 * args.padding_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5 * args.padding_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_213": {
                "variable": {
                    "value": "occ_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator.model.decode(opt_points, z, c).logits",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "occ_threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones((B, K)).float().cuda() * args.threshold",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "occ_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(occ_value, occ_threshold, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.mean(occ_loss)",
                            "Call"
                        ],
                        [
                            "occ_loss * K",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "rep_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(points ** 2, dim=2) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_167": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "pc.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(B, args.sample_npoint)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "rep_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).float().cuda()",
                            "Call"
                        ],
                        [
                            "repulsion_loss(opt_points)",
                            "Call"
                        ],
                        [
                            "torch.mean(rep_loss)",
                            "Call"
                        ],
                        [
                            "rep_loss * rep_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_284": {
                "variable": {
                    "value": "batch_proc_sel_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_pc[1] for one_pc in batch_proc_pc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_174": {
                "input": {
                    "value": "points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.stack([pc[i][idx[i]] for i in range(B)], dim=0).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.clamp(points + noise, min=-0.5 * args.padding_scale, max=0.5 * args.padding_scale)",
                            "Call"
                        ],
                        [
                            "init_points(batch_proc_pc)",
                            "Call"
                        ],
                        [
                            "optimize_points(points, z, c, rep_weight=args.rep_weight, iterations=args.iterations, printing=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_204": {
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "batch_proc_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one_pc[0] for one_pc in batch_proc_pc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_162": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(one_pc)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.sample_npoint,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_236": {
                "input": {
                    "value": "occ_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator.model.decode(opt_points, z, c).logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ONet/remesh_defense.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pc + sor_pc[i]",
                            "BinOp"
                        ],
                        [
                            "scaled_centered_pc[idx]",
                            "Subscript"
                        ],
                        [
                            "scaled_centered_pc",
                            "Name"
                        ],
                        [
                            "pc[:, :3]",
                            "Subscript"
                        ],
                        [
                            "preprocess_pc(pc, num_points=args.input_npoint, padding_scale=padding_scale)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_points, 3), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "ori_pc[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "torch_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "cfg['test']['model_file']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "input_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc[i:i + batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_pc).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ONet/setup.py": {
        "torch": {}
    },
    "baselines/attack/CW/Add.py": {
        "torch": {
            "cross_entropy_32": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label.long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_36": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i, :, idx[i]] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_39": {
                "variable": {
                    "value": "critical_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.attack_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "dist_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "cat_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ori_data, adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_138": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input_pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(cat_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_109": {
                "*size": {
                    "value": "(B, 3, self.num_add)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "current_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((B,)) * self.init_weight",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/attack/CW/Perturb.py": {
        "torch": {
            "Adam_76": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.attack_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "dist_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(adv_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_108": {
                "variable": {
                    "value": "dist_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((adv_data - ori_data) ** 2, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "(B, 3, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "current_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((B,)) * self.init_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_108": {
                "input": {
                    "value": "(adv_data - ori_data) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/CW/kNN.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.attack_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "dist_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(adv_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(adv_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_138": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(adv_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(adv_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "(B, 3, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/FGM/FGM.py": {
        "torch": {
            "argmax_58": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "momentum_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_like_278": {
                "variable": {
                    "value": "init_perturbation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.float().cuda()",
                            "Call"
                        ],
                        [
                            "data.float().cuda().detach()",
                            "Call"
                        ],
                        [
                            "data - perturbation",
                            "BinOp"
                        ],
                        [
                            "data.float().cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.float().cuda().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_159": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_220": {
                "variable": {
                    "value": "grad_l1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data.transpose(1, 2).contiguous())",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(pc)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_133": {
                "*size": {
                    "value": "(B, 3, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_202": {
                "*size": {
                    "value": "(B, 3, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_220": {
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.grad.detach()",
                            "Call"
                        ],
                        [
                            "grad / (norm[:, None, None] + 1e-09)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/Saliency/Drop.py": {
        "torch": {
            "cross_entropy_40": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(input_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.long().cuda()",
                            "Call"
                        ],
                        [
                            "target.long().cuda().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_45": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(input_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(input_data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_78": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[j, :, idx[j]] for j in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "(data - center[:, :, None]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "(data - center[:, :, None]) * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "median_78": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.float().cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.stack([data[j, :, idx[j]] for j in range(B)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/util/adv_utils.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "real_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_targets * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_logits - real_logits + self.kappa",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_52": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "targets.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_32": {
                "input": {
                    "value": "(1.0 - one_hot_targets) * logits - one_hot_targets * 10000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/util/clip_utils.py": {
        "torch": {
            "clamp_28": {
                "variable": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_factor",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.budget / (norm + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(scale_factor, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.budget / (norm + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(scale_factor, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_factor",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.budget / (norm + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(scale_factor, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.budget / (norm + 1e-09)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(scale_factor, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "inner_diff_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff * normal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_90": {
                "variable": {
                    "value": "vng",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "diff",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "pc - ori_pc",
                            "BinOp"
                        ],
                        [
                            "diff * scale_factor[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "pc - ori_pc",
                            "BinOp"
                        ],
                        [
                            "diff * scale_factor[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "pc - ori_pc",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_94": {
                "variable": {
                    "value": "vref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vng",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cross(normal, diff, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "normal",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "vng ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "vref ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack/util/dist_utils.py": {
        "torch": {
            "sqrt_31": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((adv_pc - ori_pc) ** 2, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_150": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value * weight_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_228": {
                "variable": {
                    "value": "norm_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adv_pc[:, :, None, :, :] - adv_pc[:, :, :, None, :] + 1e-07",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "far_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "far_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(max_matrix, dim=2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(far_dist, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_102": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_153": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "(adv_pc - ori_pc) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_229": {
                "input": {
                    "value": "norm_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(delta_matrix, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_230": {
                "input": {
                    "value": "max_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(norm_matrix, dim=2)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_add_attack.py": {
        "torch": {
            "load_122": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_134": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_161": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_105": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_add_cluster_attack.py": {
        "torch": {
            "load_132": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_166": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_116": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_add_object_attack.py": {
        "torch": {
            "load_134": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_146": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_118": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_fgm_attack.py": {
        "torch": {
            "load_118": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_130": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_168": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_101": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_knn_attack.py": {
        "torch": {
            "load_115": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_148": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40NormalAttack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40NormalAttack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_98": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/targeted_perturb_attack.py": {
        "torch": {
            "load_117": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_129": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedSampler_148": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_set, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_100": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/attack_scripts/untargeted_drop_attack.py": {
        "torch": {
            "DataParallel_97": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DGCNN(args.emb_dims, args.k, output_channels=40)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "PointNetCls(k=40, feature_transform=args.feature_transform)",
                            "Call"
                        ],
                        [
                            "PointNet2ClsSsg(num_classes=40)",
                            "Call"
                        ],
                        [
                            "PointConvDensityClsSsg(num_classes=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_101": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/dataset/ModelNet40.py": {
        "torch": {}
    },
    "baselines/defend_npz.py": {
        "torch": {
            "from_numpy_48": {
                "ndarray": {
                    "value": "batch_pc",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "test_pc[batch_idx:batch_idx + batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(batch_pc)[..., :3]",
                            "Subscript"
                        ],
                        [
                            "batch_pc.float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_41": {
                "f": {
                    "value": "PU_NET_WEIGHT",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/DUP_Net/DUP_Net.py": {
        "torch": {
            "zeros_35": {
                "variable": {
                    "value": "proc_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, npoint, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.choice(N, npoint, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.random.choice(N, num, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.choice(N, npoint, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.random.choice(N, num, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "one_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[duplicated_pc, one_pc[idx]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "duplicated_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[duplicated_pc, one_pc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/DUP_Net/pu_modules.py": {
        "torch": {
            "ModuleList_87": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "interpolated_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_points(known_feats, idx) * weight.view(B, N, 3, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "new_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[unknow_feats, interpolated_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_49": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "self.mlp(new_feats)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_53": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "self.mlp(new_feats)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / (dists + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "weight / torch.sum(weight, dim=-1).view(B, N, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/DUP_Net/pu_net.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.FP_Modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.FC_Modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.pcd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SharedMLP([in_ch, 64], bn=use_bn)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz.transpose(1, 2).contiguous(), l_feats[1], *up_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "r_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "r_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(r_feats, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/DUP_Net/pu_utils.py": {
        "torch": {
            "arange_45": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "group_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, trans_features.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/defense/DUP_Net/pytorch_modules.py": {
        "torch": {
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/drop_points/SOR.py": {
        "torch": {
            "sum_35": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_43": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-neg_value[..., 1:]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(value, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "pc.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().double()",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/defense/drop_points/SRS.py": {
        "torch": {
            "stack_32": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc[i][torch.from_numpy(idx[i]).long().to(pc.device)] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "idx[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/hybrid_train.py": {
        "torch": {
            "DataParallel_206": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DGCNN(args.emb_dims, args.k, output_channels=40)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "PointNetCls(k=40, feature_transform=args.feature_transform)",
                            "Call"
                        ],
                        [
                            "PointNet2ClsSsg(num_classes=40)",
                            "Call"
                        ],
                        [
                            "PointConvDensityClsSsg(num_classes=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_209": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_211": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Hybrid(args.ori_data, args.def_data, num_points=args.num_points, normalize=True, partition='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "ori_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ori_test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Hybrid(args.ori_data, args.def_data, num_points=args.num_points, normalize=True, partition='test', subset='ori')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "def_test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "def_test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Hybrid(args.ori_data, args.def_data, num_points=args.num_points, normalize=True, partition='test', subset='def')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "best_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(logs_dir, 'BEST_model{}_acc_{:.4f}.pth'.format(best_def_epoch, best_def_acc))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_150": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logs_dir, 'model{}_acc_{:.4f}_loss_{:.4f}_lr_{:.6f}.pth'.format(epoch, def_acc, all_loss_save.avg, get_lr(opt)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "fea_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_87": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/inference.py": {
        "torch": {
            "DataParallel_181": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DGCNN(args.emb_dims, args.k, output_channels=40)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "PointNetCls(k=40, feature_transform=args.feature_transform)",
                            "Call"
                        ],
                        [
                            "PointNet2ClsSsg(num_classes=40)",
                            "Call"
                        ],
                        [
                            "PointConvDensityClsSsg(num_classes=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ModelNet40Attack(args.data_root, num_points=args.num_points, normalize=args.normalize_pc)",
                            "Call"
                        ],
                        [
                            "ModelNet40(args.data_root, num_points=args.num_points, normalize=args.normalize_pc, partition='test', augmentation=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_185": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_187": {
                "f": {
                    "value": "BEST_WEIGHTS[args.model]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/model/dgcnn.py": {
        "torch": {
            "sum_9": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_120": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_121": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.linear1(x), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.linear2(x), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_126": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_8": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.linear1(x), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.linear2(x), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_24": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, self.emb_dims, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.emb_dims * 2, 512, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, self.emb_dims, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_68": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "self.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_89": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/model/pointconv.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "group_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_114": {
                "variable": {
                    "value": "(_, group_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sqrdists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(xyz, xyz)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_249": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_280": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_281": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_290": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_322": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_326": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * grouped_density.permute(0, 3, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_338": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_386": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_390": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * grouped_density.permute(0, 3, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_406": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_407": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_409": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_410": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_30": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "B",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_208": {
                "input": {
                    "value": "-sqrdists / (2.0 * bandwidth * bandwidth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_318": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_381": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_76": {
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv1d_221": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_222": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_227": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_228": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "density_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xyz_density.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale) + 0.5",
                            "BinOp"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "self.densitynet(xyz_density)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_419": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_420": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_225": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_226": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_284": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_285": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_342": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_237": {
                "input": {
                    "value": "density_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xyz_density.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale) + 0.5",
                            "BinOp"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "self.densitynet(xyz_density)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/model/pointnet.py": {
        "torch": {
            "mean_203": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(torch.bmm(trans, trans.transpose(2, 1) - I), dim=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "iden",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1, 0, 0, 0, 1, 0, 0, 0, 1]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_139": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 128, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 1024, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512, 256)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(3, 64, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 128, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 1024, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_125": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_127": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fstn(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_177": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_200": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_203": {
                "input": {
                    "value": "torch.bmm(trans, trans.transpose(2, 1) - I)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_154": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.k, self.k)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans_feat)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_204": {
                "input": {
                    "value": "trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stn(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans.transpose(2, 1) - I",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_17": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_113": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_118": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_121": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_174": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "np.eye(self.k).flatten().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/model/pointnet2.py": {
        "torch": {
            "arange_47": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "group_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "new_xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_204": {
                "variable": {
                    "value": "self.bn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_points_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_261": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_262": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_322": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_323": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_325": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_326": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_351": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_352": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_353": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_354": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_355": {
                "variable": {
                    "value": "self.drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_27": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "convs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "bns",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_296": {
                "variable": {
                    "value": "interpolated_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_points(points2, idx) * weight.view(B, N, 3, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, interpolated_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_308": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "distance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_192": {
                "input": {
                    "value": "new_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.max(grouped_points, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([points1, interpolated_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_240": {
                "variable": {
                    "value": "grouped_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "grouped_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(grouped_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_335": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_336": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_364": {
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_365": {
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_163": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "max_250": {
                "input": {
                    "value": "grouped_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "index_points(points, idx)",
                            "Call"
                        ],
                        [
                            "index_points(points, group_idx)",
                            "Call"
                        ],
                        [
                            "torch.cat([grouped_points, grouped_xyz], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "grouped_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(grouped_points)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_265": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_266": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_295": {
                "input": {
                    "value": "weight",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / dists",
                            "BinOp"
                        ],
                        [
                            "weight / torch.sum(weight, dim=-1).view(B, N, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel + 3",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_211": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/train.py": {
        "torch": {
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DGCNN(args.emb_dims, args.k, output_channels=40)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "PointNetCls(k=40, feature_transform=args.feature_transform)",
                            "Call"
                        ],
                        [
                            "PointNet2ClsSsg(num_classes=40)",
                            "Call"
                        ],
                        [
                            "PointConvDensityClsSsg(num_classes=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_200": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40(args.data_root, num_points=args.num_points, normalize=True, partition='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40(args.data_root, num_points=args.num_points, normalize=True, partition='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "best_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "copy.deepcopy(model.state_dict())",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(logs_dir, 'BEST_model{}_acc_{:.4f}.pth'.format(best_acc_epoch, best_test_acc))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_140": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logs_dir, 'model{}_acc_{:.4f}_loss_{:.4f}_lr_{:.6f}.pth'.format(epoch, acc, all_loss_save.avg, get_lr(opt)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "fea_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_63": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/util/pointnet_utils.py": {
        "torch": {
            "arange_27": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_46": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_75": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "points.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch, num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "points - torch.mean(points, dim=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ],
                        [
                            "points - np.mean(points, axis=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_86": {
                "input": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum((xyz - centroid) ** 2, -1)",
                            "Call"
                        ],
                        [
                            "torch.sum(points ** 2, dim=2) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.sqrt(torch.sum(points ** 2, dim=1)), dim=0)[0]",
                            "Subscript"
                        ],
                        [
                            "np.max(np.sqrt(np.sum(points ** 2, axis=1)), 0)",
                            "Call"
                        ],
                        [
                            "np.sum((xyz - centroid[None, :]) ** 2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "torch.isnan(points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_95": {
                "input": {
                    "value": "torch.sqrt(torch.sum(points ** 2, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "torch.isnan(points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "distance",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ],
                        [
                            "np.ones((N,)) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_88": {
                "input": {
                    "value": "points",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "points - torch.mean(points, dim=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ],
                        [
                            "points - np.mean(points, axis=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_94": {
                "input": {
                    "value": "points",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "points - torch.mean(points, dim=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ],
                        [
                            "points - np.mean(points, axis=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "input": {
                    "value": "torch.sum(points ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_97": {
                "input": {
                    "value": "points",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "points / max_dist[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "points - torch.mean(points, dim=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ],
                        [
                            "points - np.mean(points, axis=0)[None, :]",
                            "BinOp"
                        ],
                        [
                            "points / dist",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_95": {
                "input": {
                    "value": "points ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/util/set_distance.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_18": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_19": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_20": {
                "variable": {
                    "value": "zz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "diag_ind_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_26": {
                "variable": {
                    "value": "diag_ind_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_46": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_47": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_48": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_65": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_66": {
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "mins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/util/utils.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.from_numpy(t).to(device) for t in tensor]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(tensor).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scatter_26": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_28": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_32": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_11": {
                "ndarray": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}