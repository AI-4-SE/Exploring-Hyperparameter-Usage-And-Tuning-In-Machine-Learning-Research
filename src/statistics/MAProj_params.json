{
    "algo/bicnet/bicnet_agent.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.a_lr",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.c_lr",
                    "possible_values": []
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "obs",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "state_batches",
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "action_batches",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "reward_batches",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "reward_batches",
                    "possible_values": []
                },
                "input": {
                    "value": "self.config.batch_size",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_agents",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "next_state_batches",
                    "possible_values": []
                }
            },
            "Tensor_126": {
                "variable": {
                    "value": "done_batches",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "done_batches",
                    "possible_values": []
                },
                "input": {
                    "value": "self.config.batch_size",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_agents",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "actor",
                    "possible_values": []
                },
                "f": {
                    "value": "model_actor_path",
                    "possible_values": [
                        [
                            "'./trained_model/' + str(self.config.algo) + '/actor_' + str(self.config.model_episode) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_50": {
                "variable": {
                    "value": "critic",
                    "possible_values": []
                },
                "f": {
                    "value": "model_critic_path",
                    "possible_values": [
                        [
                            "'./trained_model/' + str(self.config.algo) + '/critic_' + str(self.config.model_episode) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__138": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "clip_grad_norm__149": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "save_57": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./trained_model/ + str(self.config.algo) + /actor_ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./trained_model/ + str(self.config.algo) + /critic_ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "MSELoss_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "algo/bicnet/network.py": {
        "torch": {
            "cat_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_s)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_n, a_n)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_n)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.dense1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "s_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.dense2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.dense3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.dense4",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "a_dim",
                    "possible_values": []
                }
            },
            "LSTM_121": {
                "variable": {
                    "value": "self.lstm",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_fisrt",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.norm1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "s_dim",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "variable": {
                    "value": "self.norm2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "variable": {
                    "value": "self.norm3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "variable": {
                    "value": "self.norm4",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": []
                }
            }
        }
    },
    "algo/commnet/commnet_agent.py": {
        "torch": {
            "Adam_33": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.a_lr",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.a_lr",
                    "possible_values": []
                }
            },
            "Tensor_71": {
                "variable": {
                    "value": "obs",
                    "possible_values": []
                }
            },
            "is_available_119": {
                "variable": {
                    "value": "self.use_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "state_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.states",
                    "possible_values": []
                }
            },
            "stack_130": {
                "variable": {
                    "value": "action_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.actions",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "reward_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.rewards",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "non_final_next_states",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.next_states",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "actor",
                    "possible_values": []
                },
                "f": {
                    "value": "model_actor_path",
                    "possible_values": [
                        [
                            "'./trained_model/' + str(self.config.algo) + '/actor_' + str(self.config.model_episode) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_58": {
                "variable": {
                    "value": "critic",
                    "possible_values": []
                },
                "f": {
                    "value": "model_critic_path",
                    "possible_values": [
                        [
                            "'./trained_model/' + str(self.config.algo) + '/critic_' + str(self.config.model_episode) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__157": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./trained_model/ + str(self.config.algo) + /actor_ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "./trained_model/ + str(self.config.algo) + /critic_ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "MSELoss_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "algo/commnet/network.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.encoding",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_shape",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.f_obs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "GRUCell_16": {
                "variable": {
                    "value": "self.f_comm",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.decoding0",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.decoding",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_actions",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "obs_encoding",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoding(obs.view(size0 * self.n_agents, self.input_shape))",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoding0(h)",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoding(weights)",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.encoding",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_shape",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.f_obs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "GRUCell_67": {
                "variable": {
                    "value": "self.f_comm",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.decoding",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_hidden_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obs, act)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "obs_encoding",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encoding(x.view(size0 * self.n_agents, self.input_shape))",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "h_out",
                            "Name"
                        ],
                        [
                            "h.reshape(-1, self.n_agents, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "self.f_comm(c, h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "h_out",
                            "Name"
                        ],
                        [
                            "h.reshape(-1, self.n_agents, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "self.f_comm(c, h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.rnn_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "h_out",
                            "Name"
                        ],
                        [
                            "h.reshape(-1, self.n_agents, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "self.f_comm(c, h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "h_out",
                            "Name"
                        ],
                        [
                            "h.reshape(-1, self.n_agents, self.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "self.f_comm(c, h)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.rnn_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_38": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                }
            },
            "eye_89": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                }
            }
        }
    },
    "algo/ma_main.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "obs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(state)",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "obs_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(next_state)",
                    "possible_values": []
                }
            }
        }
    },
    "algo/maddpg/maddpg_agent.py": {
        "torch": {
            "is_available_47": {
                "variable": {
                    "value": "self.use_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "obs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(state)",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "actions",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_actions",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "state_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.states",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "action_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.actions",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "reward_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.rewards",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "non_final_next_states",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s for s in batch.next_states if s is not None]",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "non_final_next_actions",
                    "possible_values": []
                },
                "tensors": {
                    "value": "non_final_next_actions",
                    "possible_values": [
                        [
                            "[self.actors_target[i](non_final_next_states[:, i, :]) for i in range(self.n_agents)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(non_final_next_actions)",
                            "Call"
                        ],
                        [
                            "non_final_next_actions.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "target_Q",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "variable": {
                    "value": "act",
                    "possible_values": []
                },
                "input": {
                    "value": "act",
                    "possible_values": [
                        [
                            "self.actors[i](sb.unsqueeze(0)).squeeze()",
                            "Call"
                        ],
                        [
                            "act + torch.from_numpy(np.random.randn(2) * self.var[i]).type(FloatTensor)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(act, -1.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "params": {
                    "value": "x.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "params": {
                    "value": "x.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "self.actors[i]",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model/maddpg/actor[ + str(i) + ] + _ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "self.critics[i]",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model/maddpg/critic[ + str(i) + ] + _ + str(episode) + .pth",
                    "possible_values": []
                }
            },
            "clip_grad_norm__150": {
                "parameters": {
                    "value": "self.critics[agent].parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__165": {
                "parameters": {
                    "value": "self.actors[agent].parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__166": {
                "parameters": {
                    "value": "self.critics[agent].parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "actor",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model/maddpg/actor[ + str(idx) + ]_ + str(self.args.model_episode) + .pth",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "critic",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model/maddpg/critic[ + str(idx) + ]_ + str(self.args.model_episode) + .pth",
                    "possible_values": []
                }
            },
            "MSELoss_148": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "np.random.randn(2) * self.var[i]",
                    "possible_values": []
                }
            }
        }
    },
    "algo/maddpg/network.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.FC1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_dim",
                    "possible_values": [
                        [
                            "self.dim_observation * n_agent",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.FC2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 + act_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.FC3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.FC4",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FC1(obs)",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "combined",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, acts]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FC2(combined)",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.FC1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_observation",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.FC2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.FC3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_action",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FC1(obs)",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FC2(result)",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "self.FC3(result)",
                    "possible_values": []
                }
            },
            "relu_24": {
                "input": {
                    "value": "self.FC3(result)",
                    "possible_values": []
                }
            }
        }
    },
    "algo/utils.py": {
        "torch": {
            "is_available_5": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_5": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "from_numpy_8": {
                "ndarray": {
                    "value": "np_array",
                    "possible_values": []
                }
            }
        }
    }
}