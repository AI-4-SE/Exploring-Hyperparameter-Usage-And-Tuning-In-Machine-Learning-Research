{
    "core/model.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_c, 64, kernel_size=3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if opts.dataset.name == 'omniglot' else 3",
                            "IfExp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_227": {
                "variable": {
                    "value": "random_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opts.fsl.n_way[0] * opts.fsl.k_shot[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if opts.dataset.name == 'omniglot' else 3",
                            "IfExp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opts.data.im_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "opts.data.im_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_503": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nonzero(torch.eq(support_y, entry)) for entry in query_y]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opts.fsl.n_way[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_511": {
                "variable": {
                    "value": "target_support",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.opts.fsl.n_way[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_511": {
                "variable": {
                    "value": "target_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_549": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding_score(v, query, n_way, query_sz)",
                            "Call"
                        ],
                        [
                            "self.fc(_out).view(query_sz, n_way, k_shot)",
                            "Call"
                        ],
                        [
                            "-F.pairwise_distance(support_xf, query_xf, p=2)",
                            "UnaryOp"
                        ],
                        [
                            "score.view(query_sz, n_way, k_shot)",
                            "Call"
                        ],
                        [
                            "torch.sum(score, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_443": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(_input_P)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_xf_ori",
                            "variable"
                        ],
                        [
                            "self.reshaper(query_xf_ori)",
                            "Call"
                        ],
                        [
                            "self.reshaper(query_xf_ori)",
                            "Call"
                        ],
                        [
                            "self.reshaper(query_xf_ori)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, P)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(_input_P)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_481": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_485": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_embedding_score(v, query, n_way, query_sz)",
                            "Call"
                        ],
                        [
                            "self.fc(_out).view(query_sz, n_way, k_shot)",
                            "Call"
                        ],
                        [
                            "-F.pairwise_distance(support_xf, query_xf, p=2)",
                            "UnaryOp"
                        ],
                        [
                            "score.view(query_sz, n_way, k_shot)",
                            "Call"
                        ],
                        [
                            "torch.sum(score, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.nonzero(torch.eq(support_y, entry)) for entry in query_y])",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_485": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_491": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.nonzero(torch.eq(support_y, entry)) for entry in query_y])",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_491": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_491": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_532": {
                "variable": {
                    "value": "embed_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[support_xf_ori, query_xf_ori]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if opts.dataset.name == 'omniglot' else 3",
                            "IfExp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_70": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.additional_repnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_c, input_c, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_445": {
                "variable": {
                    "value": "mp_modified",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.main_component(support_xf_reshape)",
                            "Call"
                        ],
                        [
                            "torch.mean(mp.view(n_way, k_shot, mp.size(1), mp.size(2), mp.size(2)), dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(_input_P)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_449": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_xf_ori",
                            "variable"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "v.view(n_way, -1, v.size(1), v.size(2), v.size(2)).sum(1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, P)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "v.view(n_way, -1, v.size(1), v.size(2), v.size(3))",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, mp_modified.unsqueeze(1)).view(support_sz, v.size(2), v.size(3), v.size(3))",
                            "Call"
                        ],
                        [
                            "mp_modified",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(_input_P)",
                            "Call"
                        ],
                        [
                            "F.softmax(P, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.reshaper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._make_layer(Bottleneck, out_size * 2, 3, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.main_component",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._make_layer(Bottleneck, out_size * 2, 3, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._make_layer(Bottleneck, out_size * 2, 3, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_308": {
                "variable": {
                    "value": "_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_input, _input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_input_c, _half)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_400": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_436": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mp.view(n_way, k_shot, mp.size(1), mp.size(2), mp.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_453": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_xf_ori",
                            "variable"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "v.view(n_way, -1, v.size(1), v.size(2), v.size(2)).sum(1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, P)",
                            "Call"
                        ],
                        [
                            "self.reshaper(support_xf_ori)",
                            "Call"
                        ],
                        [
                            "v.view(n_way, -1, v.size(1), v.size(2), v.size(3))",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, mp_modified.unsqueeze(1)).view(support_sz, v.size(2), v.size(3), v.size(3))",
                            "Call"
                        ],
                        [
                            "mp_modified",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "mp_modified.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_487": {
                "tensors": {
                    "value": "[total_loss, loss, sinkhorn_loss, loss_discri]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_487": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_504": {
                "input": {
                    "value": "torch.eq(support_y, entry)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_545": {
                "x1": {
                    "value": "support_xf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_xf_ori.view(support_xf_ori.size(0), -1)",
                            "Call"
                        ],
                        [
                            "support_xf.unsqueeze(0).expand(query_sz, -1, -1).contiguous().view(-1, feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "query_xf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_xf_ori.view(query_xf_ori.size(0), -1)",
                            "Call"
                        ],
                        [
                            "query_xf.unsqueeze(1).expand(-1, n_way * k_shot, -1).contiguous().view(-1, feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_embedding.size(1)",
                            "Call"
                        ],
                        [
                            "2 * _input.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_embedding.size(1)",
                            "Call"
                        ],
                        [
                            "2 * _input.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_243": {
                "num_features": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_embedding.size(1)",
                            "Call"
                        ],
                        [
                            "2 * _input.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.relation1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_c, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "self.relation2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_333": {
                "variable": {
                    "value": "_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_input, _input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.fc_input_c, _half)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_504": {
                "input": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_y[0, ::self.opts.fsl.k_shot[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "entry",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "in_features": {
                    "value": "self.fc_input_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ],
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_315": {
                "num_features": {
                    "value": "_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ],
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_316": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "in_features": {
                    "value": "_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ],
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_embedding.size(1)",
                            "Call"
                        ],
                        [
                            "2 * _input.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_323": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_325": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_328": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_339": {
                "in_features": {
                    "value": "self.fc_input_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ],
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "_half",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ],
                        [
                            "int(self.fc_input_c / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/workflow.py": {
        "torch": {
            "zeros_12": {
                "variable": {
                    "value": "support_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way * k_shot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way * k_shot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "query_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way * k_query",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_way * k_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_21": {
                "variable": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "file_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model_weights, 'lr': new_lr, 'epoch': epoch, 'iter': step, 'val_acc': accuracy, 'options': opts}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "opts.io.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/data_loader.py": {
        "torch": {
            "DataLoader_126": {
                "dataset": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.train.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "dataset": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.test.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/mini_imagenet.py": {
        "torch": {
            "from_numpy_166": {
                "ndarray": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([self.img2label[item[:9]] for cls in self.support_x_batch[index] for item in cls])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([self.img2label[item[:9]] for sublist in self.query_x_batch[index] for item in sublist])",
                            "Call"
                        ],
                        [
                            "query_y[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/tierImagenet.py": {
        "torch": {
            "from_numpy_111": {
                "ndarray": {
                    "value": "support_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(self.support_y_batch[index])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "query_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(self.query_y_batch[index])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_60": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay, momentum=opts.train.momentum)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay, momentum=opts.train.momentum, alpha=0.9, centered=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "opts.train.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opts.train.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opts.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_62": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay, momentum=opts.train.momentum)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(net.parameters(), lr=opts.train.lr, weight_decay=opts.train.weight_decay, momentum=opts.train.momentum, alpha=0.9, centered=True)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "opts.train.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opts.train.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opts.train.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tools/general_utils.py": {
        "torch": {
            "sort_184": {
                "variable": {
                    "value": "(label, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_y[batchidx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_185": {
                "variable": {
                    "value": "img_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "support_x[batchidx].clone()",
                            "Call"
                        ],
                        [
                            "im_map_back(img_support, std, mean)",
                            "Call"
                        ],
                        [
                            "torch.index_select(img_support, dim=0, index=indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "all_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_width * n_way",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*img_support[0].size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.io.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_198": {
                "input": {
                    "value": "query_pred[batchidx][idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "label[row * k_shot]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_208": {
                "input": {
                    "value": "query_y[batchidx][idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "label[row * k_shot]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}