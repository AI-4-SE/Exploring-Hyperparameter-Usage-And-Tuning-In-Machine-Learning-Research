{
    "kernels.py": {
        "sklearn": {
            "GaussianMixture_189": {
                "variable": {
                    "value": "GMM",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "dynamic_partition_78": {
                "variable": {
                    "value": "X_train_partitioned",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "partitions": {
                    "value": "mask_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(X)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_partition_79": {
                "variable": {
                    "value": "X_test_partitioned",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X2 / self.lengthscale",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "partitions": {
                    "value": "mask_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(X2)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "mask_pre_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(1 - mask_test, 1 - mask_train, axes=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "mask_post_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(mask_test, mask_train, axes=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[X2.shape[0], X.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_92": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([X2.shape[0], X.shape[0]], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_pre_2d), tf.reshape(K_pre, shape=[-1]))",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_post_2d), tf.reshape(K_post, shape=[-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(mask_pre_2d)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(K_pre, shape=[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_93": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([X2.shape[0], X.shape[0]], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_pre_2d), tf.reshape(K_pre, shape=[-1]))",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_post_2d), tf.reshape(K_post, shape=[-1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(mask_post_2d)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.reshape(K_post, shape=[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dynamic_partition_102": {
                "variable": {
                    "value": "X_partitioned",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "partitions": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_function(X)",
                            "Call"
                        ]
                    ]
                },
                "num_partitions": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_231": {
                "variable": {
                    "value": "exp_term",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2.0 * np.pi ** 2 * tau_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_235": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X2 / self.lengthscale",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_236": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.frequency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.frequency, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(freq, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "freq * (f - f2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_239": {
                "variable": {
                    "value": "cos_term",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(freq * (f - f2), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_252": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_260": {
                "variable": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "X[:, self.forcing_variable] >= self.x0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "self.split_function(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([X2.shape[0], X.shape[0]], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_pre_2d), tf.reshape(K_pre, shape=[-1]))",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(K, tf.where(mask_post_2d), tf.reshape(K_post, shape=[-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_103": {
                "values": {
                    "value": "[self.kernels[0].K_diag(X_partitioned[0]), self.kernels[1].K_diag(X_partitioned[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_214": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_244": {
                "dims": {
                    "value": "tf.shape(X)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.squeeze(self.mixture_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_84": {
                "a": {
                    "value": "1 - mask_test",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "1 - mask_train",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_87": {
                "a": {
                    "value": "mask_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(X2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mask_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask(X)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_92": {
                "condition": {
                    "value": "mask_pre_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(tf.tensordot(1 - mask_test, 1 - mask_train, axes=0), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "K_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernels[0].K(X_test_partitioned[0], X_train_partitioned[0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_93": {
                "condition": {
                    "value": "mask_post_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.dtypes.cast(tf.tensordot(mask_test, mask_train, axes=0), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "K_post",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernels[1].K(X_test_partitioned[1], X_train_partitioned[1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_244": {
                "input": {
                    "value": "self.mixture_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_252": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_260": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X2 / self.lengthscale",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_261": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "X2 / self.lengthscale",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "tensor": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X2), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_244": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_255": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscale",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "tensor": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/Major depressive disorder/major_depression.py": {
        "tensorflow": {}
    },
    "test_cases/its_2d.py": {
        "tensorflow": {}
    },
    "test_cases/mogp_vgp.py": {
        "tensorflow": {}
    },
    "test_cases/multivariate/independent_kernels_MOGP.py": {
        "tensorflow": {}
    },
    "test_cases/multivariate/rd_migp.py": {
        "tensorflow": {
            "cast_33": {
                "x": {
                    "value": "X[:, 0] ** 2 + X[:, 1] ** 2 <= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "a + b * X[:, 0] >= X[:, 1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "np.logical_or(X[:, 0] - 0.5 < 0.5, X[:, 1] - 0.5 < 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_cases/multivariate/rd_mogp.py": {
        "tensorflow": {}
    },
    "test_cases/partially_shared_MOGP.py": {
        "tensorflow": {}
    },
    "test_cases/rd_2d.py": {
        "tensorflow": {}
    },
    "test_cases/rd_covariates.py": {
        "tensorflow": {}
    },
    "test_cases/univariate/its_1d.py": {
        "tensorflow": {}
    },
    "test_cases/univariate/its_1d_counterfactual.py": {
        "tensorflow": {}
    },
    "test_cases/univariate/rd_1d.py": {
        "tensorflow": {}
    }
}