{
    "Python/esp_utils.py": {
        "sklearn": {
            "r2_score_440": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "Yp.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TF/esp_tf_utils.py": {
        "tensorflow": {
            "constant_61": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "N_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_62": {
                "variable": {
                    "value": "one_hot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "vect - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(N_classes, name='C')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_68": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[Nfeat, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[Nlab, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_395": {
                "variable": {
                    "value": "betan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parameters['beta' + str(L)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "betan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_399": {
                "variable": {
                    "value": "an",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache_act['a' + str(L - 1)]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(an, name='an')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "an",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_400": {
                "variable": {
                    "value": "hn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache_linear['h' + str(L - 1)]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(hn, name='hn')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_415": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_416": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_419": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_424": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning, global_step, 500, 0.9)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_464": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "variable": {
                    "value": "one_hot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(vect - 1, C, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_hot_matrix, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_random_seed_124": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_133": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stbeta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_initializer_138": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "parameters[w + str(l)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'w' + str(l)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layers[l], layers[l - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "parameters[b + str(l)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'b' + str(l)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layers[l], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "parameters[beta + str(l)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'beta' + str(l)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layers[l], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(stddev=stbeta)",
                            "Call"
                        ],
                        [
                            "tf.ones_initializer()",
                            "Call"
                        ],
                        [
                            "tf.global_variables_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "multiply_167": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "betan * zn[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.sigmoid_cross_entropy(logits=logits, multi_class_labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "fl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[i]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d1 * d2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_297": {
                "variable": {
                    "value": "dg_i",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "flat_grads[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "par",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "tensor": {
                    "value": "hess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "hessian(grads, tvars)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_361": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_404": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_438": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache_act['a' + str(L - 1)]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(an, name='an')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_448": {
                "variable": {
                    "value": "Yp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache_act['a' + str(L - 1)]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(an, name='an')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_449": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(Yp, tf.equal(Y, 1.0)), 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(beta, h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_243": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "zn[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_270": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flattened, fl]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_453": {
                "input_tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "x": {
                    "value": "tf.multiply(beta, h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_173": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "a": {
                    "value": "parameters['w' + str(l)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "a_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "cache_act['a' + str(l)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_240": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(betan * zn[1])",
                            "Call"
                        ]
                    ]
                },
                "multi_class_labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_449": {
                "x": {
                    "value": "tf.equal(Yp, tf.equal(Y, 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_458": {
                "variable": {
                    "value": "Yp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "betan * hn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_459": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(Yp)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_460": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_170": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "input_tensor": {
                    "value": "tf.squared_difference(out, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_449": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squared_difference_453": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_mean(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_454": {
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(an, Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(Y, tf.reduce_mean(Y)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_244": {
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(zn[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_454": {
                "input_tensor": {
                    "value": "tf.squared_difference(an, Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_459": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_460": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(Yp), tf.argmax(Y))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squared_difference_454": {
                "x": {
                    "value": "an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache_act['a' + str(L - 1)]",
                            "Subscript"
                        ],
                        [
                            "tf.identity(an, name='an')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[Nlab, None], dtype='float64')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TF/mnist_esp.py": {
        "tensorflow": {}
    }
}