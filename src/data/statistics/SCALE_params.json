{
    "chamferdist/chamferdist/ChamferDistance.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "dist1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "idx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "idx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "chamferdist/example.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "pc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_12": {
                "variable": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "chamferdist/setup.py": {
        "torch": {}
    },
    "lib/dataset.py": {
        "torch": {
            "tensor_53": {
                "data": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "dd['posmap{}'.format(self.img_size)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_34": {
                "input": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "dd['body_verts']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "dd['scan_n']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "dd['scan_pc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "len(scan_n)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/losses.py": {
        "torch": {
            "gather_21": {
                "variable": {
                    "value": "target_normals_chosen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "nearest_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nearest_idx.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ],
                        [
                            "nearest_idx.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_39": {
                "variable": {
                    "value": "target_colors_chosen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "nearest_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nearest_idx.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ],
                        [
                            "nearest_idx.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_26": {
                "variable": {
                    "value": "lnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_normals_chosen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(target_normals, dim=1, index=nearest_idx)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l1_loss_29": {
                "variable": {
                    "value": "lnormal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_normals_chosen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(target_normals, dim=1, index=nearest_idx)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l1_loss_51": {
                "variable": {
                    "value": "lcolor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_colors_chosen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(target_colors, dim=1, index=nearest_idx)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l1_loss_56": {
                "variable": {
                    "value": "lcolor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_colors_chosen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(target_colors, dim=1, index=nearest_idx)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_11": {
                "input": {
                    "value": "scan2model",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/modules.py": {
        "torch": {
            "Conv1d_19": {
                "variable": {
                    "value": "self.conv_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "f_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "variable": {
                    "value": "self.conv_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "f_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_190": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_191": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_192": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_193": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_194": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize + in_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_195": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_196": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_197": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_199": {
                "variable": {
                    "value": "self.conv6N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_200": {
                "variable": {
                    "value": "self.conv7N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_201": {
                "variable": {
                    "value": "self.conv8N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_203": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_204": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_205": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_206": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_208": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_209": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_210": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_212": {
                "variable": {
                    "value": "self.bn6N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_213": {
                "variable": {
                    "value": "self.bn7N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_244": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_245": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_246": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_247": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_248": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize + in_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_249": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_250": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_251": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_253": {
                "variable": {
                    "value": "self.conv6N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_254": {
                "variable": {
                    "value": "self.conv7N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_255": {
                "variable": {
                    "value": "self.conv8N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_257": {
                "variable": {
                    "value": "self.conv6T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_258": {
                "variable": {
                    "value": "self.conv7T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_259": {
                "variable": {
                    "value": "self.conv8T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_261": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_262": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_263": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_264": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_266": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_267": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_268": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_270": {
                "variable": {
                    "value": "self.bn6N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_271": {
                "variable": {
                    "value": "self.bn7N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_273": {
                "variable": {
                    "value": "self.bn6T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_274": {
                "variable": {
                    "value": "self.bn7T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_277": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_83": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "f_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_87": {
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_118": {
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "[x, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "[x, x4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/network.py": {
        "torch": {
            "cat_78": {
                "tensors": {
                    "value": "[pix_feature, uv_loc, pq_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/train_eval_funcs.py": {
        "torch": {
            "matmul_59": {
                "variable": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transf_mtx_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ],
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_res.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_res).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pred_res.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_res).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transf_mtx_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ],
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "s2m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s2m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(s2m)",
                            "Call"
                        ],
                        [
                            "s2m.mean(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_87": {
                "variable": {
                    "value": "target_points_chosen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "nearest_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_closest_gt.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ],
                        [
                            "idx_closest_gt.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_89": {
                "variable": {
                    "value": "m2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff * closest_target_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_90": {
                "variable": {
                    "value": "m2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "rgl_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_res ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "rgl_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(lat_vec_batch, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transf_mtx_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ],
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_res.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_res).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pred_res.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_res).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "pred_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transf_mtx_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ],
                        [
                            "gen_transf_mtx_full_uv(body_verts, flist_uv)",
                            "Call"
                        ],
                        [
                            "transf_mtx_map.expand(N_subsample, -1, -1, -1, -1, -1).permute([1, 2, 3, 0, 4, 5])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_172": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_173": {
                "variable": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "pred_normals.permute([0, 2, 3, 4, 1]).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(transf_mtx_map, pred_normals).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(pred_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, N_subsample, 3)[:, valid_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "pred_normals.reshape(bs, -1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_192": {
                "variable": {
                    "value": "target_points_chosen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "nearest_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_closest_gt.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ],
                        [
                            "idx_closest_gt.expand(3, -1, -1).permute([1, 2, 0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_194": {
                "variable": {
                    "value": "m2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff * closest_target_normals",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "m2s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m2s ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_197": {
                "variable": {
                    "value": "rgl_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_res ** 2).reshape(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "rgl_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(lat_vec_batch, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_93": {
                "input": {
                    "value": "lat_vec_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lat_vecs(torch.tensor(0).cuda()).expand(bs, -1)",
                            "Call"
                        ],
                        [
                            "lat_vecs.expand(bs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_203": {
                "input": {
                    "value": "m2s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(pc_diff * closest_target_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(m2s ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff * closest_target_normals, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(m2s ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_204": {
                "input": {
                    "value": "s2m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(s2m)",
                            "Call"
                        ],
                        [
                            "s2m.mean(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_205": {
                "input": {
                    "value": "lnormal",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "rgl_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(pred_res ** 2)",
                            "Call"
                        ],
                        [
                            "torch.mean((pred_res ** 2).reshape(bs, -1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_198": {
                "input": {
                    "value": "lat_vec_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lat_vecs(torch.tensor(0).cuda()).expand(bs, -1)",
                            "Call"
                        ],
                        [
                            "lat_vecs.expand(bs, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils_io.py": {
        "torch": {
            "rand_8": {
                "variable": {
                    "value": "PATCH_COLOR_DEF",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 798, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_15": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.where(~torch.isnan(img[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "uv_mask_faceid",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv_mask_faceid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(join(PROJECT_DIR, 'assets', 'uv_masks', 'uv_mask{}_with_faceid_{}.npy'.format(posmap_size, body_model))).reshape(posmap_size, posmap_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(uv_mask_faceid).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "flist",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_faces.astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "points_idx_from_posmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_idx_from_posmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(join(PROJECT_DIR, 'assets', 'uv_masks', 'idx_smpl_posmap{}_uniformverts_retrieval.npy'.format(posmap_size)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points_idx_from_posmap).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "full_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filepath",
                            "Name"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "{'epoch': epoch, 'latent_codes': all_latents}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(filepath)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_245": {
                "obj": {
                    "value": "vertex_normal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertex_normal.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "vertex_normal / normal_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_15": {
                "condition": {
                    "value": "~torch.isnan(img[0])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_15": {
                "input": {
                    "value": "img[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "posmap_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "posmap_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils_model.py": {
        "torch": {
            "cross_23": {
                "variable": {
                    "value": "ww_raw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "uu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v2 - v1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v3 - v1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "variable": {
                    "value": "ww",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ww_raw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cross(uu, vv, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "transf_mtx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[uu, vv, ww]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([linspace, linspace])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "rand_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_53": {
                "variable": {
                    "value": "linspace",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.npoints ** 0.5) if N is None else int(N ** 0.5)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "linspace_95": {
                "variable": {
                    "value": "freq_bands",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2.0 ** 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0 ** max_freq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "N_freqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "[fn(inputs) for fn in self.embed_fns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[fn(coords) for fn in self.embed_fns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_25": {
                "input": {
                    "value": "vv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v3 - v1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_25": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Identity_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_144": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_freqs - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.num_freqs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_55": {
                "start": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_93": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_freq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kwargs['max_freq_log2']",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "N_freqs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_56": {
                "*tensors": {
                    "value": "[linspace, linspace]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "lat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': args.lr}, {'params': lat_vecs.parameters(), 'lr': args.lr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CloDataSet(root_dir=data_root, split='test', sample_spacing=args.data_spacing, img_size=args.img_size, scan_npoints=args.scan_npoints)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "ckpt_loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(ckpt_dir, checkpoints[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CloDataSet(root_dir=data_root, split='train', sample_spacing=args.data_spacing, img_size=args.img_size, scan_npoints=args.scan_npoints)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CloDataSet(root_dir=data_root, split='val', sample_spacing=args.data_spacing, img_size=args.img_size, scan_npoints=args.scan_npoints)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_127": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "join(PROJECT_DIR, 'tb_logs/{}/{}'.format(date.today().strftime('%m%d'), exp_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_104": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}