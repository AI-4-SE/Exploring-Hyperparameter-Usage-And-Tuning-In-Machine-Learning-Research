{
    "carla/data/catalog/catalog.py": {
        "sklearn": {}
    },
    "carla/data/catalog/csv_catalog.py": {
        "sklearn": {
            "train_test_split_49": {
                "variable": {
                    "value": "(train_raw, test_raw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "carla/data/causal_model/synthethic_data.py": {
        "sklearn": {
            "train_test_split_120": {
                "variable": {
                    "value": "(train_raw, test_raw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "carla/data/pipelining/steps.py": {
        "sklearn": {}
    },
    "carla/data/pipelining/transformers.py": {
        "sklearn": {
            "MinMaxScaler_21": {
                "variable": {
                    "value": "fitted_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_48": {
                "variable": {
                    "value": "fitted_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "handle_unknown": {
                    "value": "error",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_23": {
                "variable": {
                    "value": "fitted_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_52": {
                "variable": {
                    "value": "fitted_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "drop": {
                    "value": "if_binary",
                    "type": "str",
                    "possible_values": []
                },
                "handle_unknown": {
                    "value": "error",
                    "type": "str",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FunctionTransformer_25": {
                "variable": {
                    "value": "fitted_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "inverse_func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "FunctionTransformer_56": {
                "variable": {
                    "value": "fitted_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "inverse_func": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "carla/evaluation/catalog/ynn.py": {
        "sklearn": {
            "NearestNeighbors_34": {
                "variable": {
                    "value": "nbrs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/train_model.py": {
        "sklearn": {
            "RandomForestClassifier_120": {
                "variable": {
                    "value": "random_forest_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "n_estimators",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "max_depth",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_188": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "x.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "self.Y_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataFrameDataset(x_train, y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataFrameDataset(x_test, y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_212": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.one_hot(labels, num_classes=2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_227": {
                "input": {
                    "value": "torch.argmax(outputs, axis=1) == torch.argmax(labels, axis=1).float()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_216": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_228": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs.float())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_229": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device).type(torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.one_hot(labels, num_classes=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/trees.py": {
        "sklearn": {},
        "tensorflow": {
            "sigmoid_16": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x * sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * 2",
                            "BinOp"
                        ],
                        [
                            "[sum(leaf_nodes[c_i]) for c_i in range(n_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "correct_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(feat_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_99": {
                "variable": {
                    "value": "incorrect_class",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(feat_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[class_0, class_1]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_146": {
                "variable": {
                    "value": "expits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temperature * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_148": {
                "variable": {
                    "value": "expits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temperature[:, None] * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "feat_input[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_150": {
                "input_tensor": {
                    "value": "expits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(temperature * logits)",
                            "Call"
                        ],
                        [
                            "tf.exp(temperature[:, None] * logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/autoencoder/training.py": {
        "sklearn": {
            "train_test_split_10": {
                "variable": {
                    "value": "(xtrain, xtest, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_dataset.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_label_data.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/causal_recourse/model.py": {
        "sklearn": {}
    },
    "carla/recourse_methods/catalog/face/library/face_method.py": {
        "sklearn": {
            "kneighbors_graph_277": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors_list",
                            "variable"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "radius_neighbors_graph_279": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "radius": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbors_list",
                            "variable"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/feature_tweak/model.py": {
        "sklearn": {}
    },
    "carla/recourse_methods/catalog/focus/model.py": {
        "sklearn": {},
        "tensorflow": {
            "boolean_mask_49": {
                "variable": {
                    "value": "filtered_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_scatter_nd_add_63": {
                "variable": {
                    "value": "hinge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zero_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_input, n_class))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[:, None]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.where(mask_vector)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "updates": {
                    "value": "filtered_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn(filtered_input, sigma, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_53": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(sigma, mask_vector)",
                            "Call"
                        ],
                        [
                            "np.full(len(factuals), self.sigma_val)",
                            "Call"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "boolean_mask_55": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(temperature, mask_vector)",
                            "Call"
                        ],
                        [
                            "np.full(len(factuals), self.temp_val)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_vector",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "checked_hyperparams['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "merge_default_parameters(hyperparams, self._DEFAULT_HYPERPARAMS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "original_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.get_ordered_features(factuals)",
                            "Call"
                        ],
                        [
                            "original_input.to_numpy()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "perturbed_features",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "class_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "class_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(original_input), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tf.constant(class_index, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_173": {
                "variable": {
                    "value": "example_range",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.arange(len(original_input), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "example_class_index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(example_range, class_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_249": {
                "variable": {
                    "value": "pf",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[best_perturb]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_141": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "checked_hyperparams['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "merge_default_parameters(hyperparams, self._DEFAULT_HYPERPARAMS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_nd_197": {
                "variable": {
                    "value": "approx_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "p_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_filter_hinge_loss(self.n_class, indicator, perturbed, sigma, temperature, self._prob_from_input)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "example_class_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack((example_range, class_index), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prediction_loss + distance_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_188": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_215": {
                "ref": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=original_input, name='perturbed_features', trainable=True)",
                            "Call"
                        ],
                        [
                            "perturbed",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.math.minimum(1, tf.math.maximum(0, perturbed))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_216": {
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.maximum(0, perturbed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_216": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value=original_input, name='perturbed_features', trainable=True)",
                            "Call"
                        ],
                        [
                            "perturbed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_xgboost.py": {
        "sklearn": {}
    },
    "carla/models/catalog/ANN_TF/model_ann.py": {
        "tensorflow": {
            "negative_11": {
                "x": {
                    "value": "tf.reduce_mean(loss, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_11": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7 * (target * tf.log(output)) + 0.3 * ((1 - target) * tf.log(1 - output))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_10": {
                "x": {
                    "value": "1 - output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/catalog.py": {
        "tensorflow": {},
        "torch": {
            "is_tensor_260": {
                "variable": {
                    "value": "tensor_output",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_ordered_features(x)",
                            "Call"
                        ],
                        [
                            "self.get_ordered_features(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_262": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/load_model.py": {
        "tensorflow": {
            "load_model_80": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'https://raw.githubusercontent.com/carla-recourse/cf-models/change-pytorch-models/models/{dataset}/{name}.{ext}'",
                            "JoinedStr"
                        ],
                        [
                            "cache_path",
                            "variable"
                        ]
                    ]
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_model_138": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "cache_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(get_models_home(models_home), dataset, os.path.basename(full_path))",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ]
                    ]
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_78": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'https://raw.githubusercontent.com/carla-recourse/cf-models/change-pytorch-models/models/{dataset}/{name}.{ext}'",
                            "JoinedStr"
                        ],
                        [
                            "cache_path",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_136": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(get_models_home(models_home), dataset, os.path.basename(full_path))",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "save_195": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(full_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.load_model(full_path, compile=False)",
                            "Call"
                        ],
                        [
                            "joblib.load(full_path)",
                            "Call"
                        ],
                        [
                            "joblib.load(full_path)",
                            "Call"
                        ],
                        [
                            "torch.load(cache_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.load_model(cache_path, compile=False)",
                            "Call"
                        ],
                        [
                            "joblib.load(cache_path)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(get_models_home(models_home), dataset, os.path.basename(full_path))",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ],
                        [
                            "os.path.join(get_models_home(models_home), data_name, f'{save_name}.{ext}')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/autoencoder/losses/losses.py": {
        "tensorflow": {
            "mean_squared_error_14": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "csvae.forward(x, y)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "MultivariateNormal_38": {
                "variable": {
                    "value": "w_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "w_mu_encoder.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.diag(w_logvar_encoder.flatten().exp())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_41": {
                "variable": {
                    "value": "w_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "w_mu_prior.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.diag(w_logvar_prior.flatten().exp())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_46": {
                "variable": {
                    "value": "z_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.diag(z_logvar.flatten().exp())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_49": {
                "variable": {
                    "value": "z_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(csvae.z_dim * z_mu.size()[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(csvae.z_dim * z_mu.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "variable": {
                    "value": "class_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train.clone()",
                            "Call"
                        ],
                        [
                            "y.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_39": {
                "input": {
                    "value": "w_logvar_encoder.flatten().exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_42": {
                "input": {
                    "value": "w_logvar_prior.flatten().exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_47": {
                "input": {
                    "value": "z_logvar.flatten().exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "csvae.z_dim * z_mu.size()[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_51": {
                "n": {
                    "value": "csvae.z_dim * z_mu.size()[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_62": {
                "condition": {
                    "value": "class_label == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-torch.log(y_pred[:, 1])",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-torch.log(y_pred[:, 0])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "y_pred[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/autoencoder/models/autoencoder.py": {
        "tensorflow": {
            "disable_eager_execution_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/autoencoder/models/csvae.py": {
        "tensorflow": {
            "disable_eager_execution_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.encoder_xy_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_encoder_xy_to_w",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.mu_xy_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_xy_to_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.logvar_xy_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_xy_to_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "lst_encoder_x_to_z[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.encoder_x_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_encoder_x_to_z",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.mu_x_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_x_to_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.logvar_x_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_x_to_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "lst_encoder_y_to_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._labels_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.encoder_y_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_encoder_y_to_w",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.mu_y_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_y_to_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.logvar_y_to_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_y_to_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.decoder_zw_to_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_decoder_zw_to_x",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.mu_zw_to_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.decoder_zw_to_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.logvar_zw_to_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.decoder_zw_to_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "lst_decoder_z_to_y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim + np.sum(~mutable_mask)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.decoder_z_to_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_decoder_z_to_y",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "zw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x_immutable]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "zw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, w_encoder]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_165": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list(zip(x_train, y_prob_train))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "opt_without_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_without_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for (name, param) in self.named_parameters() if 'decoder_z_to_y' not in name]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "opt_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for (name, param) in self.named_parameters() if 'decoder_z_to_y' in name]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_path, 'csvae_{}_{}.{}'.format(self._data_name, self._input_dim, 'pt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._labels_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_279": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_path, 'csvae_{}_{}.{}'.format(self._data_name, input_shape, 'pt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "layers[i - 1] + self._labels_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "layers[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "layers[i + 1] + w_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "layers[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/autoencoder/models/vae.py": {
        "tensorflow": {
            "disable_eager_execution_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self._mu_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self._log_var_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*lst_decoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.mu_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_79": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * log_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x_immutable]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "xtrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xtrain.values",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "lambda_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCELoss_129": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_path, '{}_{}.{}'.format(self._data_name, self._input_dim, 'pt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "layers[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "layers[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_path, '{}_{}.{}'.format(self._data_name, input_shape, 'pt'))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "layers[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "layers[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/cem/model.py": {
        "tensorflow": {
            "divide_146": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._global_step + tf.cast(3, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_153": {
                "variable": {
                    "value": "self._adv_updater",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_154": {
                "variable": {
                    "value": "self._adv_updater_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "self._Loss_L1Dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "L1_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_l_norm(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_209": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._hyperparams['init_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self._hyperparams['max_iterations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "power": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variables_initializer_224": {
                "variable": {
                    "value": "self._init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[self._global_step] + [self._adv_s] + [self._adv] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(self._hyperparams['init_learning_rate'], self._global_step, self._hyperparams['max_iterations'], 0, power=0.5)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_242": {
                "variable": {
                    "value": "loss_L2Dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l2_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_dist",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "loss_Attack",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._const * Loss_Attack",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_292": {
                "variable": {
                    "value": "self._orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_293": {
                "variable": {
                    "value": "self._adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_294": {
                "variable": {
                    "value": "self._adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_295": {
                "variable": {
                    "value": "self._target_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_298": {
                "variable": {
                    "value": "self._const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_299": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "self._assign_orig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, len(mlmodel.feature_input_order))",
                            "Tuple"
                        ],
                        [
                            "shape_batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_302": {
                "variable": {
                    "value": "self._assign_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, len(mlmodel.feature_input_order))",
                            "Tuple"
                        ],
                        [
                            "shape_batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "self._assign_adv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, len(mlmodel.feature_input_order))",
                            "Tuple"
                        ],
                        [
                            "shape_batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_304": {
                "variable": {
                    "value": "self._assign_target_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "self._assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_359": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(adv_s, beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(0.5, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_360": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(adv_s, beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(-0.5, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_373": {
                "variable": {
                    "value": "cond_greater",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.subtract(adv, orig), beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_378": {
                "variable": {
                    "value": "cond_less_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less_equal(tf.abs(tf.subtract(adv, orig)), beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_383": {
                "variable": {
                    "value": "cond_less",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.subtract(adv, orig), tf.negative(beta))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_312": {
                "input_tensor": {
                    "value": "target_label * label_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_317": {
                "input_tensor": {
                    "value": "(1 - target_label) * label_score - target_label * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_329": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "sign * nontarget_label_score - sign * target_label_score + self._kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_168": {
                "x": {
                    "value": "L1_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_l_norm(delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "multiply_207": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self._Loss_L1Dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "tf.square(delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_323": {
                "x": {
                    "value": "tf.norm(self._AE(delta) - delta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_350": {
                "x": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(self._global_step, self._global_step + tf.cast(3, tf.float32))",
                            "Call"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "assign_adv - adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_359": {
                "x": {
                    "value": "adv_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_s",
                            "Method Argument"
                        ],
                        [
                            "adv_s",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_359": {
                "x": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_360": {
                "x": {
                    "value": "adv_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_s",
                            "Method Argument"
                        ],
                        [
                            "adv_s",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_360": {
                "x": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_364": {
                "x": {
                    "value": "cond_less",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_conditions(adv_s, orig, beta)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.less(tf.subtract(adv, orig), tf.negative(beta)), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.add(adv_s, beta), tf.cast(-0.5, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_374": {
                "x": {
                    "value": "tf.subtract(adv, orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "less_equal_379": {
                "x": {
                    "value": "tf.abs(tf.subtract(adv, orig))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "less_384": {
                "x": {
                    "value": "tf.subtract(adv, orig)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.negative(beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_146": {
                "x": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_266": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._orig - self._adv",
                            "BinOp"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_266": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._orig - self._adv",
                            "BinOp"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ],
                        [
                            "delta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_323": {
                "tensor": {
                    "value": "self._AE(delta) - delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_340": {
                "x": {
                    "value": "cond_greater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_conditions(assign_adv_s, orig)",
                            "Call"
                        ],
                        [
                            "self._get_conditions(adv_s, orig, beta)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.subtract(adv, orig), beta), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_362": {
                "x": {
                    "value": "cond_greater",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_conditions(assign_adv_s, orig)",
                            "Call"
                        ],
                        [
                            "self._get_conditions(adv_s, orig, beta)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(tf.subtract(adv, orig), beta), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.subtract(adv_s, beta), tf.cast(0.5, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_363": {
                "x": {
                    "value": "cond_less_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_conditions(assign_adv_s, orig)",
                            "Call"
                        ],
                        [
                            "self._get_conditions(adv_s, orig, beta)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(adv, orig)), beta), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_374": {
                "x": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run([self._Loss_Overall, self._L2_L1_dist, self._ToEnforceLabel_Score, self._adv])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_379": {
                "x": {
                    "value": "tf.subtract(adv, orig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_384": {
                "x": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run([self._Loss_Overall, self._L2_L1_dist, self._ToEnforceLabel_Score, self._adv])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "negative_384": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyperparams['beta']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "global_variables_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_344": {
                "x": {
                    "value": "cond_less_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_conditions(assign_adv_s, orig)",
                            "Call"
                        ],
                        [
                            "self._get_conditions(adv_s, orig, beta)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.less_equal(tf.abs(tf.subtract(adv, orig)), beta), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_379": {
                "x": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run([self._Loss_Overall, self._L2_L1_dist, self._ToEnforceLabel_Score, self._adv])",
                            "Call"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ],
                        [
                            "orig",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/focus/distances.py": {
        "tensorflow": {
            "l2_normalize_30": {
                "variable": {
                    "value": "normalize_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_31": {
                "variable": {
                    "value": "normalize_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.cosine_distance(normalize_x1, normalize_x2, axis=ax, reduction=tf.compat.v1.losses.Reduction.NONE) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(dist)",
                            "Call"
                        ],
                        [
                            "tf.cast(dist, tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_42": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.cosine_distance(normalize_x1, normalize_x2, axis=ax, reduction=tf.compat.v1.losses.Reduction.NONE) + eps",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(dist)",
                            "Call"
                        ],
                        [
                            "tf.cast(dist, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "cosine_distance_33": {
                "labels": {
                    "value": "normalize_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "normalize_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(x2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.compat.v1.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - x2",
                            "BinOp"
                        ],
                        [
                            "x1 - x2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/run_experiment.py": {
        "tensorflow": {
            "Graph_216": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_218": {
                "variable": {
                    "value": "ann_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/test_autoencoder.py": {
        "tensorflow": {
            "Variable_101": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((1, 13))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((1, 13))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "test_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "test_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/test_cfmodel.py": {
        "tensorflow": {
            "Graph_126": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_165": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_128": {
                "variable": {
                    "value": "ann_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_167": {
                "variable": {
                    "value": "ann_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/ANN_TORCH/model_ann.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_36": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layer",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layers[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "hidden_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_of_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_of_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "hidden_layers[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layers[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "carla/models/catalog/Linear_TORCH/model_linear.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_of_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_of_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_25": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_46": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/causal_recourse/cost.py": {
        "torch": {
            "norm_57": {
                "input": {
                    "value": "torch.stack(deltas)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(action_set[key] - factual_instance[key]) / ranges[key] for key in action_set.keys()]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/cchvae/model.py": {
        "torch": {
            "from_numpy_176": {
                "variable": {
                    "value": "torch_fact",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "factual",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, torch_fact[:, ~self._generative_model.mutable_mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "torch_latent_neighbourhood",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_neighbourhood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hyper_sphere_coordindates(z_rep, high, low)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_234": {
                "ndarray": {
                    "value": "x_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "self._generative_model.decode(torch_latent_neighbourhood)",
                            "Call"
                        ],
                        [
                            "temp",
                            "variable"
                        ],
                        [
                            "reconstruct_encoding_constraints(x_ce, cat_features_indices, self._params['binary_cat_features'])",
                            "Call"
                        ],
                        [
                            "x_ce.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x_ce.clip(0, 1) if self._clamp else x_ce",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/AE_models/AE/fc_gauss_cat.py": {
        "torch": {
            "sum_58": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_123": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(latent_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(latent_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_127": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(latent_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/AE_models/AE/models.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*proposal_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*generative_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*proposal_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*generative_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/AE_models/AE/train.py": {
        "torch": {}
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/AE_models/AE/vae_training.py": {
        "torch": {
            "is_available_46": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/Clue_model/CLUE_counterfactuals.py": {
        "torch": {
            "Adam_225": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainable_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_238": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_vec.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "probs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "mu",
                            "variable"
                        ],
                        [
                            "probs",
                            "variable"
                        ],
                        [
                            "self.uncertainty_from_z()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "self.desired_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_317": {
                "variable": {
                    "value": "latent_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "self.z_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_317": {
                "variable": {
                    "value": "latent_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_242": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_vec.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "probs.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "mu",
                            "variable"
                        ],
                        [
                            "probs",
                            "variable"
                        ],
                        [
                            "self.uncertainty_from_z()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "self.desired_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/src/gauss_cat.py": {
        "torch": {
            "zeros_like_17": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_in / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_126": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "log_prob_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_prob_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_prob_vec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_66": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, cum_dims:cum_dims + dim].max(dim=1)[1]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(softmax_in / temperature, dim=1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, cum_dims:cum_dims + dim]",
                            "Subscript"
                        ],
                        [
                            "x[:, cum_dims:cum_dims + dim]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, cum_dims:cum_dims + dim]",
                            "Subscript"
                        ],
                        [
                            "x[:, cum_dims:cum_dims + dim]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_45": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(x_cat, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x_cat, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/src/layers.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(outer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.inner_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_11": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "outer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "outer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "inner_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, stored]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/src/probability.py": {
        "torch": {
            "softplus_77": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[:, d // 2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Normal_79": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[:, :d // 2]",
                            "Subscript"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(sigma_params)",
                            "Call"
                        ],
                        [
                            "sigma.clamp(min=min_sigma)",
                            "Call"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(params, -1)",
                            "Call"
                        ],
                        [
                            "params.clamp(min_prob)",
                            "Call"
                        ],
                        [
                            "params / params.sum(-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_105": {
                "variable": {
                    "value": "distr",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(params, -1)",
                            "Call"
                        ],
                        [
                            "params.clamp(min_prob)",
                            "Call"
                        ],
                        [
                            "params / params.sum(-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "loglike_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loglike_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loglike_terms, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "cvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vec, last_term)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_37": {
                "variable": {
                    "value": "base_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Call"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_151": {
                "input": {
                    "value": "((x_un - y_un) ** 2).sum() / y.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "input": {
                    "value": "marg_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sigma ** 2).mean(dim=0) + ((mu ** 2).mean(dim=0) - mu.mean(dim=0) ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_141": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(sigma_params)",
                            "Call"
                        ],
                        [
                            "sigma.clamp(min=min_sigma)",
                            "Call"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_161": {
                "input": {
                    "value": "loglike_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loglike_terms, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StickBreakingTransform_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_220": {
                "input": {
                    "value": "posterior_preds + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_224": {
                "input": {
                    "value": "probs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/src/radam.py": {
        "torch": {
            "zeros_like_46": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_47": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/library/clue_ml/src/utils.py": {
        "torch": {
            "zeros_135": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(y.shape[0], Nclass)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "yt_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yt, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_121": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "variable"
                        ],
                        [
                            "torch.from_numpy(v).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "v.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(v, volatile=volatile)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_109": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'lr': self.lr, 'model': self.model, 'optimizer': self.optimizer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_166": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - y",
                            "BinOp"
                        ],
                        [
                            "x - y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_166": {
                "input": {
                    "value": "1.0 / float(self.n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_166": {
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_203": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - y",
                            "BinOp"
                        ],
                        [
                            "x - y",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/clue/model.py": {
        "torch": {
            "is_available_146": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/crud/library/crud.py": {
        "torch": {
            "BCELoss_15": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cf_initialize - query_instance) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_49": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "target_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(np.array(target_class)).to(device)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, query_instance[:, ~csvae.mutable_mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "torch_counterfactuals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "counterfactuals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_113": {
                "variable": {
                    "value": "torch_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "RMSprop_55": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_82": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_102": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((factual.shape[0], 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "(cf, predicted.reshape((-1, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(cf, predicted.reshape((-1, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/catalog/revise/model.py": {
        "torch": {
            "DataLoader_160": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "df_fact.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_233": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_239": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cf_initialize - query_instance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, query_instance[:, ~self.vae.mutable_mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[z]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_181": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[z]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_201": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mlmodel.predict_proba(cf)[0]",
                            "Subscript"
                        ],
                        [
                            "self._mlmodel.predict_proba(cf_initialize)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "carla/recourse_methods/catalog/wachter/library/wachter.py": {
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y_target).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lambda_param",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x_new]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "feature_costs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature_costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(feature_costs).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_93": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_103": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_target[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "f_x_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x_new / (1 - f_x_new)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dist_134": {
                "input": {
                    "value": "x_new_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct_encoding_constraints(x_new, cat_feature_indices, binary_cat_features)",
                            "Call"
                        ],
                        [
                            "reconstruct_encoding_constraints(x_new, cat_feature_indices, binary_cat_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_136": {
                "input": {
                    "value": "feature_costs * (x_new_enc - x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "carla/recourse_methods/processing/counterfactuals.py": {
        "torch": {
            "round_98": {
                "variable": {
                    "value": "x_enc[:, pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x_enc[:, pos]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_mlmodel.py": {
        "torch": {
            "Tensor_157": {
                "variable": {
                    "value": "single_sample_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "samples_torch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_172": {
                "obj": {
                    "value": "single_prediction_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(single_sample_torch)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_183": {
                "obj": {
                    "value": "predictions_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(samples_torch)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_194": {
                "obj": {
                    "value": "single_predict_proba_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_proba(single_sample_torch)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_205": {
                "obj": {
                    "value": "predictions_proba_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_proba(samples_torch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}