{
    "prune.py": {
        "torch": {
            "zeros_136": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total + m.weight.data.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_145": {
                "variable": {
                    "value": "(sorted_bn, sorted_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "torch.zeros(total)",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i - 1]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i - 1]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i]['batch_normalize'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_333": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_333": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_315": {
                "obj": {
                    "value": "_pruned_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pruned_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "prune_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'prune.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module_def['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_utils.select_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_222": {
                "variable": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Merge_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_167": {
                "variable": {
                    "value": "(_, sorted_index_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "proned_module_defs[i][mask_before]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mask_before + proned_module_defs[conv_index]['mask'].clone().cpu().numpy().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_166": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(thresh).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_173": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(thresh).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_223": {
                "input": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Merge_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/models.py": {
        "torch": {
            "softmax_164": {
                "input": {
                    "value": "p[:, 5:85]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "io[..., 4:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "io[..., 4:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_234": {
                "variable": {
                    "value": "layer_outputs[layers[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_outputs[layers[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/prune.py": {
        "torch": {
            "zeros_137": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total + m.weight.data.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_146": {
                "variable": {
                    "value": "(sorted_bn, sorted_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "torch.zeros(total)",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(module_def['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i - 1]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i - 1]['batch_normalize'])",
                            "Call"
                        ],
                        [
                            "int(proned_module_defs[layer_i]['batch_normalize'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_334": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_334": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_316": {
                "obj": {
                    "value": "_pruned_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pruned_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "prune_weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'prune.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module_def['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_utils.select_device()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_223": {
                "variable": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Merge_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_168": {
                "variable": {
                    "value": "(_, sorted_index_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.weight.data.abs().clone()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "proned_module_defs[i][mask_before]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_before",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mask_before + proned_module_defs[conv_index]['mask'].clone().cpu().numpy().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_167": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(thresh).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_174": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(thresh).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_224": {
                "input": {
                    "value": "Merge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(Merge_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/test.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadImagesAndLabels(test_path, img_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "min([os.cpu_count(), batch_size, 16])",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/train.py": {
        "torch": {
            "MultiStepLR_162": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(pg0, lr=hyp['lr0'])",
                            "Call"
                        ],
                        [
                            "optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[round(opt.epochs * x) for x in [0.8, 0.9]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.31, 'cls': 42.4, 'cls_pw': 1.0, 'obj': 40.0, 'obj_pw': 1.0, 'iou_t': 0.213, 'lr0': 0.00261, 'lrf': -4.0, 'momentum': 0.949, 'weight_decay': 0.000489, 'fl_gamma': 0.5, 'hsv_h': 0.0103, 'hsv_s': 0.691, 'hsv_v': 0.433, 'degrees': 1.43, 'translate': 0.0663, 'scale': 0.11, 'shear': 0.384}",
                            "Dict"
                        ]
                    ]
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "hyp['lr0']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.31, 'cls': 42.4, 'cls_pw': 1.0, 'obj': 40.0, 'obj_pw': 1.0, 'iou_t': 0.213, 'lr0': 0.00261, 'lrf': -4.0, 'momentum': 0.949, 'weight_decay': 0.000489, 'fl_gamma': 0.5, 'hsv_h': 0.0103, 'hsv_s': 0.691, 'hsv_v': 0.433, 'degrees': 1.43, 'translate': 0.0663, 'scale': 0.11, 'shear': 0.384}",
                            "Dict"
                        ]
                    ]
                },
                "momentum": {
                    "value": "hyp['momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'giou': 3.31, 'cls': 42.4, 'cls_pw': 1.0, 'obj': 40.0, 'obj_pw': 1.0, 'iou_t': 0.213, 'lr0': 0.00261, 'lrf': -4.0, 'momentum': 0.949, 'weight_decay': 0.000489, 'fl_gamma': 0.5, 'hsv_h': 0.0103, 'hsv_s': 0.691, 'hsv_v': 0.433, 'degrees': 1.43, 'translate': 0.0663, 'scale': 0.11, 'shear': 0.384}",
                            "Dict"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_431": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/utils/adabound.py": {
        "torch": {
            "full_like_114": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_226": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_192": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_230": {
                "variable": {
                    "value": "decayed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "group['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_211": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "yolov3/utils/datasets.py": {
        "torch": {
            "zeros_486": {
                "variable": {
                    "value": "labels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nL, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_488": {
                "variable": {
                    "value": "labels_out[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.copy()",
                            "Call"
                        ],
                        [
                            "labels[ioa < 0.9]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_495": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), flags=cv2.INTER_AREA, borderValue=(128, 128, 128))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, interp=cv2.INTER_LINEAR)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_502": {
                "tensors": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[index]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, new_unpad, interpolation=interp)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)",
                            "Call"
                        ],
                        [
                            "cv2.warpAffine(img, M[:2], dsize=(width, height), flags=cv2.INTER_AREA, borderValue=(128, 128, 128))",
                            "Call"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "letterbox(img0, new_shape=self.img_size)[0]",
                            "Subscript"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "[letterbox(x, new_shape=self.img_size, interp=cv2.INTER_LINEAR)[0] for x in img0]",
                            "ListComp"
                        ],
                        [
                            "np.stack(img, 0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :, ::-1].transpose(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float16 if self.half else np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (int(w * r), int(h * r)), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(str(p))",
                            "Call"
                        ],
                        [
                            "load_image(self, index)",
                            "Call"
                        ],
                        [
                            "np.fliplr(img)",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1].transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.flipud(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_502": {
                "tensors": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/utils/torch_utils.py": {
        "torch": {
            "Parameter_93": {
                "variable": {
                    "value": "model.last_linear.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "model.last_linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_7": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_8": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_9": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_27": {
                "variable": {
                    "value": "ng",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cuda:0 if cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "fusedconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_55": {
                "variable": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.last_linear.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_device_properties_28": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(0, ng)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_56": {
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3/utils/utils.py": {
        "torch": {
            "set_printoptions_20": {
                "linewidth": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "precision": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "profile": {
                    "value": "long",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_317": {
                "variable": {
                    "value": "BCEcls",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "ft([h['cls_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_318": {
                "variable": {
                    "value": "BCEobj",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "ft([h['obj_pw']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_319": {
                "variable": {
                    "value": "BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_320": {
                "variable": {
                    "value": "CE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_581": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_588": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_690": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wh_iou(torch.Tensor(wh).T, torch.Tensor(x).T) for x in k]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.bincount(classes, minlength=nc)",
                            "Call"
                        ],
                        [
                            "np.hstack([gpi * ni - weights.sum() * 9, weights * 9]) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "1 / weights",
                            "BinOp"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ],
                        [
                            "1 / torch.Tensor(n)",
                            "BinOp"
                        ],
                        [
                            "dc[i, 4:5]",
                            "Subscript"
                        ],
                        [
                            "(f - f.min()) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_329": {
                "variable": {
                    "value": "tobj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_487": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred[:, :5], class_conf.unsqueeze(1), class_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_583": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "x.T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fitness(x)",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "sorted(glob.glob('results*.txt') + glob.glob('../../Downloads/results*.txt'))",
                            "Call"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ],
                        [
                            "'weights/last.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_597": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "x.T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "weights/backbone.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "x.T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_116": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "x.T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_278": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_339": {
                "variable": {
                    "value": "pxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "pbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pxy, torch.exp(ps[:, 2:4]) * anchor_vec[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_378": {
                "tensors": {
                    "value": "(lbox, lobj, lcls, loss)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_398": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wh_iou(x, gwh) for x in anchor_vec]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "det_max",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_783": {
                "input": {
                    "value": "torch.from_numpy(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_261": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_261": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_262": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_262": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_345": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ps[:, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_363": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_405": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(anchor_vec)",
                            "Call"
                        ],
                        [
                            "model.module.module_list[l].na",
                            "Attribute"
                        ],
                        [
                            "model.module_list[l].na",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "(gxy, gwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_471": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[i]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((pred[:, :5], class_conf.unsqueeze(1), class_pred), 1)",
                            "Call"
                        ],
                        [
                            "pred[(-pred[:, 4]).argsort()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_471": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_369": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_252": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_252": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_253": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_253": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_299": {
                "input": {
                    "value": "-loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_783": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]",
                            "List"
                        ],
                        [
                            "np.linspace(0, 1, 101)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "np.zeros(nc, dtype='int32')",
                            "Call"
                        ],
                        [
                            "x + np.bincount(labels[:, 0].astype('int32'), minlength=nc)",
                            "BinOp"
                        ],
                        [
                            "np.loadtxt(file, dtype=np.float32, ndmin=2)",
                            "Call"
                        ],
                        [
                            "np.unique(np.loadtxt('evolve.txt', ndmin=2), axis=0)",
                            "Call"
                        ],
                        [
                            "np.arange(-4.0, 4.0, 0.1)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('test.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.loadtxt('targets.txt', dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "x.T",
                            "Attribute"
                        ],
                        [
                            "np.loadtxt('evolve.txt', ndmin=2)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ],
                        [
                            "range(start, min(stop, n) if stop else n)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_340": {
                "input": {
                    "value": "ps[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_548": {
                "input": {
                    "value": "-iou ** 2 / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}