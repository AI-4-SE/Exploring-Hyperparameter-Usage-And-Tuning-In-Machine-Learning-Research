{
    "src/qrmine/mlqrmine.py": {
        "sklearn": {
            "StandardScaler_34": {
                "variable": {
                    "value": "self._sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_173": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self._X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self._y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_179": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KDTree_188": {
                "variable": {
                    "value": "kdt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self._X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KMeans_193": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneHotEncoder_225": {
                "variable": {
                    "value": "onehotencoder",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "train_test_split_232": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self._X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self._y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_246": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_184": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(self._X, self._y, test_size=0.25, random_state=0)",
                            "Call"
                        ],
                        [
                            "y_test.astype('int')",
                            "Call"
                        ],
                        [
                            "train_test_split(self._X, self._y, test_size=0.25, random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ],
                        [
                            "y_pred.astype('int')",
                            "Call"
                        ],
                        [
                            "self._classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_237": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(self._X, self._y, test_size=0.25, random_state=0)",
                            "Call"
                        ],
                        [
                            "y_test.astype('int')",
                            "Call"
                        ],
                        [
                            "train_test_split(self._X, self._y, test_size=0.25, random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(X_test)",
                            "Call"
                        ],
                        [
                            "y_pred.astype('int')",
                            "Call"
                        ],
                        [
                            "self._classifier.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Sequential_33": {
                "variable": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_150": {
                "units": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self._vnum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_151": {
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_152": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}