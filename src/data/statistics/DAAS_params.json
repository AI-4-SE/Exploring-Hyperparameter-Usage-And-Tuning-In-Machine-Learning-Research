{
    "cnn/MinEntropyLoss.py": {
        "torch": {
            "mul_59": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x < -1).float().cuda()",
                            "Call"
                        ],
                        [
                            "(x < 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.pow(x, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_60": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x >= -1).float().cuda() + (x < 1).float().cuda() - 1",
                            "BinOp"
                        ],
                        [
                            "(x >= 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ],
                        [
                            "t",
                            "variable"
                        ]
                    ]
                }
            },
            "mul_61": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x >= 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ],
                        [
                            "t",
                            "variable"
                        ]
                    ]
                }
            },
            "mul_70": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x < -1).float().cuda()",
                            "Call"
                        ],
                        [
                            "(x < 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ],
                        [
                            "t",
                            "variable"
                        ]
                    ]
                }
            },
            "mul_71": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x >= -1).float().cuda() + (x < 1).float().cuda() - 1",
                            "BinOp"
                        ],
                        [
                            "(x >= 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_22": {
                "variable": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(alpha[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "normal_entLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(Alpha_normal, torch.log(Alpha_normal)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "Alpha_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(alpha[1]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_25": {
                "variable": {
                    "value": "reduce_entLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(Alpha_reduce, torch.log(Alpha_reduce)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_26": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-normal_entLoss",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-reduce_entLoss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Beta.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Beta.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ],
                        [
                            "t",
                            "variable"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_23": {
                "input": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[0]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(Alpha_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_25": {
                "input": {
                    "value": "Alpha_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[1]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(Alpha_reduce)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.mul(Beta, torch.log(Beta)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "torch.mul(Beta, torch.log(Beta)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "torch.sum(Beta[Beta > 0]) - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_39": {
                "input": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "streng_func2(beta1[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ],
                        [
                            "streng_func2(beta2[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(Beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_42": {
                "input": {
                    "value": "torch.sum(Beta[Beta > 0]) - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_44": {
                "input": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "streng_func2(beta1[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ],
                        [
                            "streng_func2(beta2[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(Beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[0]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_25": {
                "input": {
                    "value": "Alpha_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[1]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "Beta[Beta > 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "Beta[Beta > 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "streng_func2(beta1[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ],
                        [
                            "streng_func2(beta2[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "Beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "streng_func2(beta1[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ],
                        [
                            "streng_func2(beta2[i - 3])",
                            "Call"
                        ],
                        [
                            "F.softmax(Beta.cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/architect.py": {
        "torch": {
            "cat_8": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.arch_parameters(), 'lr': 0}, {'params': self.model.beta_parameters(), 'lr': args.arch_lr_beta}]",
                    "type": "List",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_93": {
                "variable": {
                    "value": "grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_98": {
                "variable": {
                    "value": "grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_33": {
                "variable": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/model.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_143": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_199": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_93": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/model_search.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_108": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(self.alphas_reduce)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(self.alphas_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_148": {
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_149": {
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(2 + i)))",
                            "Call"
                        ],
                        [
                            "range(len(W[j]))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "streng_func2(self.beta_normal[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "input": {
                    "value": "streng_func2(self.beta_normal[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "input": {
                    "value": "streng_func2(self.beta_normal[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "input": {
                    "value": "streng_func2(self.beta_reduce[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_133": {
                "input": {
                    "value": "streng_func2(self.beta_reduce[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "input": {
                    "value": "streng_func2(self.beta_reduce[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_159": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_160": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_161": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_162": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_163": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_164": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "input": {
                    "value": "alphas_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.alphas_normal)",
                            "Call"
                        ],
                        [
                            "_sift_beta(self.beta_normal, alphas_normal)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "input": {
                    "value": "alphas_reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.alphas_reduce)",
                            "Call"
                        ],
                        [
                            "_sift_beta(self.beta_reduce, alphas_reduce)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/operations.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/test.py": {
        "torch": {}
    },
    "cnn/test_imagenet.py": {
        "torch": {}
    },
    "cnn/train.py": {
        "torch": {}
    },
    "cnn/train_imagenet.py": {
        "torch": {}
    },
    "cnn/train_search.py": {
        "torch": {}
    },
    "cnn/utils.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nas_bench201/MinEntropyLoss.py": {
        "torch": {
            "mul_36": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x < -1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.pow(x, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_37": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x >= -1).float().cuda() + (x < 1).float().cuda() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_38": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x >= 1).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(alpha[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "normal_entLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(Alpha_normal, torch.log(Alpha_normal)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * t",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_22": {
                "input": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[0]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(Alpha_normal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "Alpha_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(streng_func(alpha[0]).cuda(), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nas_bench201/architect.py": {
        "torch": {
            "cat_8": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_89": {
                "variable": {
                    "value": "grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_94": {
                "variable": {
                    "value": "grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_29": {
                "variable": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "grad_30": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nas_bench201/model_search.py": {
        "torch": {
            "randn_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.cells1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.cells2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.cells3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_120": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(self.alphas_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(self.alphas_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streng_func(self.alphas_normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_68": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_156": {
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((1 for i in range(self._steps) for n in range(1 + i)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nas_bench201/operations.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nas_bench201/train_search.py": {
        "torch": {}
    },
    "nas_bench201/utils.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}