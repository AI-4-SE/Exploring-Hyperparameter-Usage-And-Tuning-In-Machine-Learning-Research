{
    "network/NetRunner.py": {
        "tensorflow": {
            "Graph_127": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_216": {
                "variable": {
                    "value": "loss_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Loss_function",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_plot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_217": {
                "variable": {
                    "value": "lr_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_plot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_233": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_sum, lr_summ, acc_summ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_237": {
                "variable": {
                    "value": "img_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Original_Image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.in_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "hist_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.summary.histogram(tf.trainable_variables()[i].name[:-2] + '_train', tf.trainable_variables()[i]) for i in range(len(tf.trainable_variables()))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "merge_252": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "m_summs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[img_summ, gt_summ, pred_summ, hist_summ]",
                            "List"
                        ]
                    ]
                }
            },
            "FIFOQueue_144": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "self.data_size * self.num_epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "queue",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.training_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Mode_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.epoch_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Epoch_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.epoch_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Epoch_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "self.loss_plot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Epoch_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "self.learning_rate_plot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Epoch_learn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_158": {
                "variable": {
                    "value": "self.update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_167": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "self.accuracy_plot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Epoch_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "variable": {
                    "value": "self.graph_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "acc_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.summary.scalar('{:s}_Accuracy_label_{:d}'.format(self.accuracy_type[k], i), self.accuracy_plot[k][i]) for k in range(len(self.accuracy_type)) for i in range(self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "text_239": {
                "variable": {
                    "value": "gt_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Input_labels",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.as_string(tf.reshape(tf.argmax(self.gt_data, axis=1), [-1, self.batch_size]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "text_242": {
                "variable": {
                    "value": "pred_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Predicted_labels",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.as_string(tf.reshape(tf.argmax(self.pred_output, axis=1), [-1, self.batch_size]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self._in_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.img_size[0], self.img_size[1], self.img_size[2]]",
                            "List"
                        ],
                        [
                            "[None, self.img_size[0] * self.img_size[1] * self.img_size[2]]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Input_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self._gt_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "gt_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.num_classes]",
                            "List"
                        ],
                        [
                            "[None, self.img_size[0] * self.img_size[1] * self.img_size[2]]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "GT_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_177": {
                "name": {
                    "value": "mode_train",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.training_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_178": {
                "name": {
                    "value": "inputs_train",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.in_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_179": {
                "name": {
                    "value": "outputs_train",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pred_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_181": {
                "name": {
                    "value": "learn_rate",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_229": {
                "variable": {
                    "value": "acc_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{:s}_accuracy'.format(self.accuracy_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy_plot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self._in_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.img_size[0], self.img_size[1], self.img_size[2]]",
                            "List"
                        ],
                        [
                            "[None, self.img_size[0] * self.img_size[1] * self.img_size[2]]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "Input_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self._gt_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "gt_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.num_classes]",
                            "List"
                        ],
                        [
                            "[None, self.img_size[0] * self.img_size[1] * self.img_size[2]]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "GT_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_169": {
                "control_inputs": {
                    "value": "self.update_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_184": {
                "name": {
                    "value": "code_fc1",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.code_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_185": {
                "name": {
                    "value": "code_fc2",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.code_fc2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_186": {
                "name": {
                    "value": "code_fc3",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.code_fc3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_187": {
                "name": {
                    "value": "pred_autoenc",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.autoenc_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "variable": {
                    "value": "acc_summ",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{:s}_accuracy'.format(self.accuracy_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy_plot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_string_240": {
                "input": {
                    "value": "tf.reshape(tf.argmax(self.gt_data, axis=1), [-1, self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_string_242": {
                "input": {
                    "value": "tf.reshape(tf.argmax(self.pred_output, axis=1), [-1, self.batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_248": {
                "name": {
                    "value": "tf.trainable_variables()[i].name[:-2] + '_train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.trainable_variables()[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_220": {
                "name": {
                    "value": "'{:s}_Accuracy_label_{:d}'.format(self.accuracy_type[k], i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accuracy_plot[k][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "tensor": {
                    "value": "tf.argmax(self.gt_data, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "tensor": {
                    "value": "tf.argmax(self.pred_output, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_241": {
                "input": {
                    "value": "self.gt_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_243": {
                "input": {
                    "value": "self.pred_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/TrainRunner.py": {
        "tensorflow": {
            "reset_default_graph_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_53": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_56": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "self.gpu_load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_57": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=self.gpu_load)",
                            "Call"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_61": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'CPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_global_step_72": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.tr_path, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_81": {
                "variable": {
                    "value": "valid_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.tr_path, 'valid')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_71": {
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, log_device_placement=True, allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'CPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_233": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_252": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_151": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_209": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_161": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_219": {
                "device_name": {
                    "value": "/device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "network/wrappers/AutoEncoder_3l.py": {
        "tensorflow": {
            "dense_31": {
                "variable": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.nonlin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_1",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(X, units=128, activation=self.nonlin_f, name='enc_1', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.nonlin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_2",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_1, units=64, activation=self.nonlin_f, name='enc_2', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.nonlin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_3",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "pred_autoenc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_2, units=32, activation=self.nonlin_f, name='enc_3', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_45": {
                "variable": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_2, units=32, activation=self.nonlin_f, name='enc_3', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.nonlin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_3",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_3, units=128, activation=self.nonlin_f, name='dec_3', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.nonlin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_2",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(dec_3, units=256, activation=self.nonlin_f, name='dec_2', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "X.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_1",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_30": {
                "name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(enc_2, units=32, activation=self.nonlin_f, name='enc_3', kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/wrappers/NetworkBase.py": {
        "tensorflow": {
            "Variable_286": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape=[a, b], stddev=np.sqrt(2 / a))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_287": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(y_pred)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layer",
                            "Method Argument"
                        ],
                        [
                            "input_layer",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_scale * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv_' + name_postfix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_202": {
                "variable": {
                    "value": "batch_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_layer, filters=filter_scale * n_filters, kernel_size=filter_size, activation=None, padding=padding, name='conv_' + name_postfix, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=1234), kernel_regularizer=tf.keras.regularizers.l2(l=0.1))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(input_layer, filters=filter_scale * n_filters, kernel_size=filter_size, activation=None, padding='same', name='conv_' + name_postfix, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=1234), bias_initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "fused": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'batch_' + name_postfix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_222": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layer",
                            "Method Argument"
                        ],
                        [
                            "input_layer",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_scale * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_' + name_postfix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(seed=1234)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_246": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(net, ksize=pool_size, strides=stride_size, padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(net, ksize=pool_size, strides=stride_size, padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'s_conv_bn'",
                            "Method Argument"
                        ],
                        [
                            "'pooling'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_248": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(net, ksize=pool_size, strides=stride_size, padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(net, ksize=pool_size, strides=stride_size, padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'s_conv_bn'",
                            "Method Argument"
                        ],
                        [
                            "'pooling'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "name + name_postfix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_221": {
                "name": {
                    "value": "'s_conv_nonlin' + name_postfix",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_286": {
                "shape": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2 / a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "shape": {
                    "value": "[b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric.py": {
        "tensorflow": {
            "cast_46": {
                "variable": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "inse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(pre, truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "reduce_sum_49": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.add(pre, truth) >= 1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inse + smooth) / (union + smooth)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "inse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * y_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 * inse + smooth) / (l + r + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dice)",
                            "Call"
                        ],
                        [
                            "(2.0 * inse + smooth) / (l + r + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dice)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "inse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 * inse + smooth) / (l + r + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dice)",
                            "Call"
                        ],
                        [
                            "(2.0 * inse + smooth) / (l + r + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(dice)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "y_p_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "y_true_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "y_pred_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "aa_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "aa_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_true_flat - y_pred_flat) * (y_true_flat - y_pred_flat) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_164": {
                "variable": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.reduce_sum(aa_reshaped, axis=1), tf.float16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "input_tensor": {
                    "value": "0.5 * positive_cost + downweight * 0.5 * negative_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "y_true_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(y_true.shape[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "y_pred_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(y_true.shape[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=y_true, logits=y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hinge_loss_131": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_145": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "y_p_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_165": {
                "input_tensor": {
                    "value": "tf.cast(lst, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_pred, 1), tf.argmax(y_true, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_27": {
                "x": {
                    "value": "logits - margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_29": {
                "x": {
                    "value": "logits + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_48": {
                "x": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred > threshold, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true > threshold, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_49": {
                "x": {
                    "value": "tf.add(pre, truth) >= 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "tf.losses.softmax_cross_entropy(onehot_labels=y_true_flat, logits=y_pred_flat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_120": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_163": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_164": {
                "x": {
                    "value": "tf.reduce_sum(aa_reshaped, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.cast(tf.reduce_sum(aa_reshaped, axis=1), tf.float16))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_177": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_pred, 1), tf.argmax(y_true, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "tf.less(logits, margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "x": {
                    "value": "tf.greater(logits, -margin)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true, logits=y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "tf.losses.sparse_softmax_cross_entropy(labels=y_true, logits=y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_110": {
                "onehot_labels": {
                    "value": "y_true_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_true, [-1, int(y_true.shape[3])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_true, [-1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, [-1, int(y_true.shape[3])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_164": {
                "input_tensor": {
                    "value": "aa_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(aa_list, tf.shape(y_true))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_177": {
                "x": {
                    "value": "tf.argmax(y_pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_26": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_29": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-margin",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_49": {
                "x": {
                    "value": "pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred > threshold, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true > threshold, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_102": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_105": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_177": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}