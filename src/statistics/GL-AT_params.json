{
    "pytorch/evaluate.py": {
        "sklearn": {
            "average_precision_score_37": {
                "variable": {
                    "value": "average_precision",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "possible_values": [
                        [
                            "output_dict['target']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "clipwise_output",
                    "possible_values": [
                        [
                            "output_dict['prob']",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "roc_auc_score_40": {
                "variable": {
                    "value": "auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "possible_values": [
                        [
                            "output_dict['target']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "clipwise_output",
                    "possible_values": [
                        [
                            "output_dict['prob']",
                            "Subscript"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/main.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_193": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "AudioSetDataset(clip_samples=clip_samples, classes_num=classes_num)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "Sampler(indexes_hdf5_path=train_indexes_hdf5_path, batch_size=batch_size * 2 if 'mixup' in augmentation else batch_size, black_list_csv=black_list_csv)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "eval_bal_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "AudioSetDataset(clip_samples=clip_samples, classes_num=classes_num)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "eval_bal_sampler",
                    "possible_values": [
                        [
                            "EvaluateSampler(indexes_hdf5_path=eval_bal_indexes_hdf5_path, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "eval_test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "AudioSetDataset(clip_samples=clip_samples, classes_num=classes_num)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "eval_test_sampler",
                    "possible_values": [
                        [
                            "EvaluateSampler(indexes_hdf5_path=eval_test_indexes_hdf5_path, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_215": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_242": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num, N=N, length=length)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_231": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_checkpoint_path",
                    "possible_values": [
                        [
                            "os.path.join(workspace, 'checkpoints', filename, 'sample_rate={},window_size={},hop_size={},mel_bins={},fmin={},fmax={}'.format(sample_rate, window_size, hop_size, mel_bins, fmin, fmax), 'data_type={}'.format(data_type), model_type, 'loss_type={}'.format(loss_type), 'balanced={}'.format(balanced), 'augmentation={}'.format(augmentation), 'batch_size={}'.format(batch_size), '{}_iterations.pth'.format(resume_iteration))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_92": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "/data/dean/panns/audioset_tagging_cnn/pytorch/Wavegram_Logmel_Cnn14_mAP=0.439.pth",
                    "possible_values": []
                }
            },
            "device_count_241": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_296": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "torch.load(resume_checkpoint_path)",
                            "Call"
                        ],
                        [
                            "{'iteration': iteration, 'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'sampler': train_sampler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "os.path.join(checkpoints_dir, '{}_iterations.pth'.format(iteration))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/plot_statistics.py": {
        "sklearn": {
            "precision_recall_curve_1556": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:, k]",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "avg_prob[:, k]",
                    "possible_values": []
                }
            },
            "average_precision_score_1557": {
                "variable": {
                    "value": "avg_precision",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:, k]",
                    "possible_values": []
                },
                "y_score": {
                    "value": "avg_prob[:, k]",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "roc_curve_1558": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:, k]",
                    "possible_values": []
                },
                "y_score": {
                    "value": "avg_prob[:, k]",
                    "possible_values": []
                }
            },
            "roc_auc_score_1559": {
                "variable": {
                    "value": "auc",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y[:, k]",
                    "possible_values": []
                },
                "y_score": {
                    "value": "avg_prob[:, k]",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/finetune_template.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataParallel_94": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "Model(sample_rate, window_size, hop_size, mel_bins, fmin, fmax, classes_num, freeze_base)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc_transfer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": [
                        [
                            "config.classes_num",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_checkpoint_path",
                    "possible_values": [
                        [
                            "args.pretrained_checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "clipwise_output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_transfer(embedding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_93": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/inference.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "args.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_110": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "args.checkpoint_path",
                            "Attribute"
                        ],
                        [
                            "args.checkpoint_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_114": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/losses.py": {
        "torch": {
            "binary_cross_entropy_8": {
                "input": {
                    "value": "output_dict['local_prob']",
                    "possible_values": []
                },
                "target": {
                    "value": "target_dict['target']",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/models.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "relu__64": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu__65": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn0",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_144": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "mean_149": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "max_152": {
                "variable": {
                    "value": "(x1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__156": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "clipwise_output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(x)",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_190": {
                "variable": {
                    "value": "(sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "global_prob",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_193": {
                "variable": {
                    "value": "feature_map",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__194": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(feature_map)",
                    "possible_values": []
                }
            },
            "dropout_195": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_L",
                    "possible_values": [
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "variable": {
                    "value": "frame_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(embedding_L)",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "maps",
                    "possible_values": []
                },
                "*size": {
                    "value": "frame_prob.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "frame_prob.size(2)",
                    "possible_values": []
                }
            },
            "max_208": {
                "variable": {
                    "value": "(local_prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_209": {
                "variable": {
                    "value": "local_prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_prob[:, None, :], local_prob[:, None, :]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "local_regions",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.duration",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_277": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_303": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_362": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=0.1, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.1",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "BatchNorm2d_476": {
                "variable": {
                    "value": "self.bn0",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_515": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "avg_pool2d_517": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "dropout_518": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_520": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_521": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "max_524": {
                "variable": {
                    "value": "(x1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_525": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dropout_527": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__528": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "dropout_529": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_530": {
                "variable": {
                    "value": "clipwise_output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(x)",
                    "possible_values": []
                }
            },
            "Linear_549": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_561": {
                "variable": {
                    "value": "(sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "global_prob",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_564": {
                "variable": {
                    "value": "feature_map",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__565": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(feature_map)",
                    "possible_values": []
                }
            },
            "dropout_566": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_L",
                    "possible_values": [
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_567": {
                "variable": {
                    "value": "frame_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(embedding_L)",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "maps",
                    "possible_values": []
                },
                "*size": {
                    "value": "frame_prob.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "frame_prob.size(2)",
                    "possible_values": []
                }
            },
            "max_579": {
                "variable": {
                    "value": "(local_prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_580": {
                "variable": {
                    "value": "local_prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_prob[:, None, :], local_prob[:, None, :]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_585": {
                "variable": {
                    "value": "(prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_586": {
                "variable": {
                    "value": "prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "local_regions",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.duration",
                    "possible_values": []
                }
            },
            "Conv1d_624": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv1d_629": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_634": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "BatchNorm1d_635": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "relu__649": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu__650": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "possible_values": []
                }
            },
            "max_pool1d_651": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_668": {
                "variable": {
                    "value": "self.pre_conv0",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "possible_values": []
                },
                "stride": {
                    "value": "5",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_669": {
                "variable": {
                    "value": "self.pre_bn0",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "BatchNorm2d_689": {
                "variable": {
                    "value": "self.bn0",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "Linear_698": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_699": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "relu__713": {
                "variable": {
                    "value": "a1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_bn0(self.pre_conv0(input[:, None, :]))",
                    "possible_values": []
                }
            },
            "cat_736": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, a1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dropout_737": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_739": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_741": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_743": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_745": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "dropout_747": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "mean_748": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "max_751": {
                "variable": {
                    "value": "(x1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_752": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dropout_754": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__755": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "dropout_756": {
                "variable": {
                    "value": "embedding",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_757": {
                "variable": {
                    "value": "clipwise_output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(x)",
                    "possible_values": []
                }
            },
            "Linear_777": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_778": {
                "variable": {
                    "value": "self.fc_audioset",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_789": {
                "variable": {
                    "value": "(sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "global_prob",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_792": {
                "variable": {
                    "value": "feature_map",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "feature_map.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.dropout(feature_map, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "relu__793": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(feature_map)",
                    "possible_values": []
                }
            },
            "dropout_794": {
                "variable": {
                    "value": "embedding_L",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_L",
                    "possible_values": [
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(feature_map))",
                            "Call"
                        ],
                        [
                            "F.dropout(embedding_L, p=0.5, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "sigmoid_795": {
                "variable": {
                    "value": "frame_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_audioset(embedding_L)",
                    "possible_values": []
                }
            },
            "zeros_799": {
                "variable": {
                    "value": "maps",
                    "possible_values": []
                },
                "*size": {
                    "value": "frame_prob.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "frame_prob.size(2)",
                    "possible_values": []
                }
            },
            "max_807": {
                "variable": {
                    "value": "(local_prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_808": {
                "variable": {
                    "value": "local_prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "local_prob",
                    "possible_values": [
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ],
                        [
                            "self.local_net(local_, mixup_lambda)['clipwise_output']",
                            "Subscript"
                        ],
                        [
                            "local_prob.view(local_regions.size(0), local_regions.size(1), -1)",
                            "Call"
                        ],
                        [
                            "0.5 * (local_prob1 + local_prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_812": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_prob[:, None, :], local_prob[:, None, :]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_813": {
                "variable": {
                    "value": "(prob1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_814": {
                "variable": {
                    "value": "prob2",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([global_prob[:, None, :], local_prob[:, None, :]], 1)",
                            "Call"
                        ],
                        [
                            "0.5 * (prob1 + prob2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_823": {
                "variable": {
                    "value": "local_regions",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.N",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.duration",
                    "possible_values": []
                }
            },
            "max_pool2d_67": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "index_select_202": {
                "variable": {
                    "value": "maps[i]",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_prob[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "indices[i]",
                    "possible_values": []
                }
            },
            "avg_pool2d_296": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "avg_pool2d_353": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "Sequential_439": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "index_select_573": {
                "variable": {
                    "value": "maps[i]",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_prob[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "indices[i]",
                    "possible_values": []
                }
            },
            "index_select_801": {
                "variable": {
                    "value": "maps[i]",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_prob[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "index": {
                    "value": "indices[i]",
                    "possible_values": []
                }
            },
            "avg_pool2d_69": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_229": {
                "variable": {
                    "value": "(_, max_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "map_",
                    "possible_values": [
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_415": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "_resnet_conv1x1(self.inplanes, planes * block.expansion)",
                    "possible_values": []
                }
            },
            "max_600": {
                "variable": {
                    "value": "(_, max_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "map_",
                    "possible_values": [
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_828": {
                "variable": {
                    "value": "(_, max_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "map_",
                    "possible_values": [
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ],
                        [
                            "maps[i, j]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_72": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.spec_augmenter(x)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_block_after1(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "F.relu_(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu_(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, kernel_size=pool_size)",
                            "Call"
                        ],
                        [
                            "self.spectrogram_extractor(input)",
                            "Call"
                        ],
                        [
                            "self.logmel_extractor(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "do_mixup(x, mixup_lambda)",
                            "Call"
                        ],
                        [
                            "self.conv_block1(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "torch.cat((x, a1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block2(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block3(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block4(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block5(x, pool_size=(2, 2), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_block6(x, pool_size=(1, 1), pool_type='avg')",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=3)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu_(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "pool_size",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_177": {
                "f": {
                    "value": "/data/dean/panns/audioset_tagging_cnn/pytorch/Cnn10_mAP=0.380.pth",
                    "possible_values": []
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2)",
                    "possible_values": []
                }
            },
            "load_548": {
                "f": {
                    "value": "/data/dean/panns/audioset_tagging_cnn/pytorch/ResNet38_mAP=0.434.pth",
                    "possible_values": []
                }
            },
            "load_776": {
                "f": {
                    "value": "/data/dean/panns/audioset_tagging_cnn/pytorch/Wavegram_Logmel_Cnn14_mAP=0.439.pth",
                    "possible_values": []
                }
            },
            "AvgPool2d_423": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/pytorch_utils.py": {
        "torch": {
            "cat_136": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(framewise_output, pad)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_246": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "audio_length",
                    "possible_values": []
                }
            },
            "Tensor_9": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test.py": {
        "torch": {
            "load_47": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "possible_values": [
                        [
                            "'/data/dean/panns/audioset_tagging_cnn/pytorch/Cnn10_mAP=0.380.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_50": {
                "variable": {
                    "value": "checkpoint_2",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path_2",
                    "possible_values": [
                        [
                            "'/data/dean/audioset_tagging_cnn/workspaces/checkpoints/main/sample_rate=32000,window_size=1024,hop_size=320,mel_bins=64,fmin=50,fmax=14000/data_type=full_train/Cnn10/loss_type=clip_bce/balanced=balanced/augmentation=none/batch_size=32/N=5,length=2/198000_iterations.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda') if args.cuda and torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_55": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "Model(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "model_2",
                    "possible_values": []
                },
                "module": {
                    "value": "model_2",
                    "possible_values": [
                        [
                            "Model_2(sample_rate=sample_rate, window_size=window_size, hop_size=hop_size, mel_bins=mel_bins, fmin=fmin, fmax=fmax, classes_num=classes_num, N=5, length=2)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}