{
    "run_race.py": {
        "sklearn": {},
        "tensorflow": {
            "TFRecordWriter_283": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "possible_values": []
                }
            },
            "info_282": {
                "msg": {
                    "value": "Start writing tfrecord %s.",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "possible_values": []
                }
            },
            "Example_307": {
                "variable": {
                    "value": "tf_example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "possible_values": []
                }
            },
            "info_324": {
                "msg": {
                    "value": "'Input tfrecord file {}'.format(input_file)",
                    "possible_values": []
                }
            },
            "parse_single_example_328": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([seq_length * 4], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length * 4], tf.float32), 'segment_ids': tf.FixedLenFeature([seq_length * 4], tf.int64), 'label_ids': tf.FixedLenFeature([], tf.int64), 'is_real_example': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_351": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "possible_values": []
                }
            },
            "set_verbosity_446": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "TPUEstimator_475": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "possible_values": []
                }
            },
            "Estimator_482": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_554": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ListDirectory_248": {
                "dirname": {
                    "value": "cur_dir",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, set_type, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_279": {
                "filename": {
                    "value": "output_file",
                    "possible_values": []
                }
            },
            "Feature_292": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "possible_values": []
                }
            },
            "Feature_296": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "possible_values": []
                }
            },
            "FixedLenFeature_317": {
                "shape": {
                    "value": "[seq_length * 4]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_318": {
                "shape": {
                    "value": "[seq_length * 4]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "FixedLenFeature_319": {
                "shape": {
                    "value": "[seq_length * 4]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_320": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_321": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "info_378": {
                "msg": {
                    "value": "'#params: {}'.format(num_params)",
                    "possible_values": []
                }
            },
            "cast_401": {
                "variable": {
                    "value": "is_real_example",
                    "possible_values": []
                },
                "x": {
                    "value": "features['is_real_example']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "variable": {
                    "value": "label_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_433": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                },
                "host_call": {
                    "value": "host_call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_437": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                }
            },
            "Exists_456": {
                "filename": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_457": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "info_506": {
                "msg": {
                    "value": "'Num of eval samples: {}'.format(len(eval_examples))",
                    "possible_values": []
                }
            },
            "info_545": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_549": {
                "msg": {
                    "value": "log_str",
                    "possible_values": [
                        [
                            "'Eval | '",
                            "Constant"
                        ],
                        [
                            "log_str + '{} {} | '.format(key, val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_550": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_287": {
                "msg": {
                    "value": "'Writing example %d of %d' % (ex_index, len(examples))",
                    "possible_values": []
                }
            },
            "cast_335": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(t, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "map_and_batch_358": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "FLAGS.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.eval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "possible_values": []
                }
            },
            "argmax_388": {
                "variable": {
                    "value": "predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "accuracy_394": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "mean_396": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "possible_values": []
                },
                "weights": {
                    "value": "is_real_example",
                    "possible_values": [
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_408": {
                "variable": {
                    "value": "eval_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "(metric_fn, metric_args)",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_414": {
                "variable": {
                    "value": "eval_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "eval_metric_ops": {
                    "value": "metric_fn(*metric_args)",
                    "possible_values": []
                }
            },
            "Features_307": {
                "feature": {
                    "value": "features",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_491": {
                "filename": {
                    "value": "train_file",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, train_file_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_292": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "FloatList_296": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "trainable_variables_377": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "classifier_utils.py": {
        "tensorflow": {
            "info_133": {
                "msg": {
                    "value": "*** Example ***",
                    "possible_values": []
                }
            },
            "info_134": {
                "msg": {
                    "value": "'guid: %s' % example.guid",
                    "possible_values": []
                }
            },
            "info_135": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "possible_values": []
                }
            },
            "info_136": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "possible_values": []
                }
            },
            "info_137": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "possible_values": []
                }
            },
            "info_138": {
                "msg": {
                    "value": "'label: {} (id = {})'.format(example.label, label_id)",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "tensorflow": {
            "TFRecordWriter_434": {
                "variable": {
                    "value": "record_writer",
                    "possible_values": []
                },
                "path": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_566": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_tensor_slices(file_paths)",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(file_paths))",
                            "Call"
                        ],
                        [
                            "tf.data.TFRecordDataset(dataset)",
                            "Call"
                        ],
                        [
                            "dataset.cache().map(parser).repeat()",
                            "Call"
                        ],
                        [
                            "dataset.batch(bsz_per_core, drop_remainder=True)",
                            "Call"
                        ],
                        [
                            "dataset.prefetch(num_core_per_host * bsz_per_core)",
                            "Call"
                        ],
                        [
                            "parse_files_to_dataset(parser=parser, file_names=file_names, split=split, num_batch=num_batch, num_hosts=num_hosts, host_id=host_id, num_core_per_host=num_core_per_host, bsz_per_core=bsz_per_core)",
                            "Call"
                        ],
                        [
                            "get_dataset(params=params, num_hosts=num_hosts, num_core_per_host=num_core_per_host, split=split, file_names=record_info['filenames'], num_batch=record_info['num_batch'], seq_len=seq_len, reuse_len=reuse_len, perm_size=perm_size, mask_alpha=mask_alpha, mask_beta=mask_beta, use_bfloat16=use_bfloat16, num_predict=num_predict)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_595": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "transpose_596": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(index, [-1, perm_size])",
                    "possible_values": []
                }
            },
            "reshape_598": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(index)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "logical_not_602": {
                "variable": {
                    "value": "non_func_tokens",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_or(tf.equal(inputs, SEP_ID), tf.equal(inputs, CLS_ID))",
                    "possible_values": []
                }
            },
            "logical_and_606": {
                "variable": {
                    "value": "non_mask_tokens",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(is_masked)",
                    "possible_values": []
                },
                "y": {
                    "value": "non_func_tokens",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.logical_or(tf.equal(inputs, SEP_ID), tf.equal(inputs, CLS_ID)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_607": {
                "variable": {
                    "value": "masked_or_func_tokens",
                    "possible_values": []
                },
                "x": {
                    "value": "non_mask_tokens",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_not(is_masked), non_func_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_614": {
                "variable": {
                    "value": "rev_index",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_mask_tokens",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_not(is_masked), non_func_tokens)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "smallest_index",
                    "possible_values": [
                        [
                            "-tf.ones([seq_len], dtype=tf.int64)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "index",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(index, [-1, perm_size]))",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(index), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_619": {
                "variable": {
                    "value": "target_tokens",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_or_func_tokens",
                    "possible_values": [
                        [
                            "tf.logical_not(non_mask_tokens)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "non_func_tokens",
                    "possible_values": [
                        [
                            "tf.logical_not(tf.logical_or(tf.equal(inputs, SEP_ID), tf.equal(inputs, CLS_ID)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_620": {
                "variable": {
                    "value": "target_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "tf.logical_and(masked_or_func_tokens, non_func_tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "where_624": {
                "variable": {
                    "value": "self_rev_index",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_tokens",
                    "possible_values": [
                        [
                            "tf.logical_and(masked_or_func_tokens, non_func_tokens)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "rev_index",
                    "possible_values": [
                        [
                            "tf.where(non_mask_tokens, smallest_index, index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "rev_index + 1",
                    "possible_values": []
                }
            },
            "logical_and_628": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "self_rev_index[:, None] <= rev_index[None, :]",
                    "possible_values": []
                },
                "y": {
                    "value": "masked_or_func_tokens",
                    "possible_values": [
                        [
                            "tf.logical_not(non_mask_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_631": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "perm_mask",
                    "possible_values": [
                        [
                            "tf.logical_and(self_rev_index[:, None] <= rev_index[None, :], masked_or_func_tokens)",
                            "Call"
                        ],
                        [
                            "tf.cast(perm_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([perm_mask_0, perm_mask_1], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_634": {
                "variable": {
                    "value": "new_targets",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs[0:1], targets[:-1]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Feature_44": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "possible_values": []
                }
            },
            "Feature_48": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "[Task %d] Total number line: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "range(bsz_per_host)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "total_line_cnt",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_line_cnt + line_cnt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_132": {
                "msg": {
                    "value": "Using perm indices %s for pass %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "perm_indices.tolist()",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "FLAGS.pass_id",
                    "possible_values": []
                }
            },
            "info_211": {
                "msg": {
                    "value": "Use glob: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.input_glob",
                    "possible_values": []
                }
            },
            "info_212": {
                "msg": {
                    "value": "Find %d files: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(file_paths)",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "file_paths",
                    "possible_values": [
                        [
                            "sorted(tf.gfile.Glob(FLAGS.input_glob))",
                            "Call"
                        ],
                        [
                            "file_names[my_start_file_id:my_end_file_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_219": {
                "msg": {
                    "value": "Task %d process %d files: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.task",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "len(task_file_paths)",
                    "possible_values": []
                }
            },
            "info_419": {
                "msg": {
                    "value": "Raw data shape %s.",
                    "possible_values": []
                },
                "*args": {
                    "value": "data.shape",
                    "possible_values": []
                }
            },
            "info_435": {
                "msg": {
                    "value": "Start writing %s.",
                    "possible_values": []
                },
                "*args": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_523": {
                "msg": {
                    "value": "Done writing %s. Num of batches: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, file_name)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "num_batch",
                    "possible_values": [
                        [
                            "num_batch + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "info_555": {
                "msg": {
                    "value": "Host %d handles %d files",
                    "possible_values": []
                },
                "*args": {
                    "value": "host_id",
                    "possible_values": [
                        [
                            "params['context'].current_host",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "len(file_paths)",
                    "possible_values": []
                }
            },
            "parse_single_example_669": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "possible_values": []
                },
                "features": {
                    "value": "record_spec",
                    "possible_values": [
                        [
                            "{'input': tf.FixedLenFeature([seq_len], tf.int64), 'target': tf.FixedLenFeature([seq_len], tf.int64), 'seg_id': tf.FixedLenFeature([seq_len], tf.int64), 'label': tf.FixedLenFeature([1], tf.int64), 'is_masked': tf.FixedLenFeature([seq_len], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_675": {
                "variable": {
                    "value": "is_masked",
                    "possible_values": []
                },
                "x": {
                    "value": "example.pop('is_masked')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "concat_694": {
                "variable": {
                    "value": "perm_mask_0",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask_0, tf.ones([reuse_len, non_reuse_len])]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_696": {
                "variable": {
                    "value": "perm_mask_1",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([non_reuse_len, reuse_len]), perm_mask_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_698": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask_0, perm_mask_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_699": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_0, target_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_700": {
                "variable": {
                    "value": "target_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mask_0, target_mask_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_701": {
                "variable": {
                    "value": "input_k",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_k_0, input_k_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_702": {
                "variable": {
                    "value": "input_q",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_q_0, input_q_1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_737": {
                "variable": {
                    "value": "example[perm_mask]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perm_mask",
                    "possible_values": [
                        [
                            "tf.logical_and(self_rev_index[:, None] <= rev_index[None, :], masked_or_func_tokens)",
                            "Call"
                        ],
                        [
                            "tf.cast(perm_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([perm_mask_0, perm_mask_1], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len, seq_len]",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "variable": {
                    "value": "example[input_k]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_k",
                    "possible_values": [
                        [
                            "tf.concat([input_k_0, input_k_1], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                }
            },
            "reshape_739": {
                "variable": {
                    "value": "example[input_q]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_q",
                    "possible_values": [
                        [
                            "tf.concat([input_q_0, input_q_1], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                }
            },
            "info_795": {
                "msg": {
                    "value": "Use the following tfrecord dirs: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "tfrecord_dirs",
                    "possible_values": [
                        [
                            "tfrecord_dir.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_845": {
                "msg": {
                    "value": "Total number of batches: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "record_info['num_batch']",
                    "possible_values": []
                }
            },
            "info_847": {
                "msg": {
                    "value": "Total number of files: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(record_info['filenames'])",
                    "possible_values": []
                }
            },
            "info_849": {
                "msg": {
                    "value": "record_info['filenames']",
                    "possible_values": []
                }
            },
            "set_verbosity_914": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "run_915": {
                "main": {
                    "value": "create_data",
                    "possible_values": []
                }
            },
            "info_89": {
                "msg": {
                    "value": "Processing %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_path",
                    "possible_values": [
                        [
                            "input_paths",
                            "Name"
                        ]
                    ]
                }
            },
            "info_112": {
                "msg": {
                    "value": "Finish with line %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "line_cnt",
                    "possible_values": [
                        [
                            "line_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Exists_181": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_182": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "possible_values": []
                }
            },
            "Exists_185": {
                "filename": {
                    "value": "tfrecord_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, 'tfrecords')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.save_dir, 'tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_186": {
                "dirname": {
                    "value": "tfrecord_dir",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, 'tfrecords')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.save_dir, 'tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_210": {
                "filename": {
                    "value": "FLAGS.input_glob",
                    "possible_values": []
                }
            },
            "info_216": {
                "msg": {
                    "value": "Exit: task %d has no file to process.",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.task",
                    "possible_values": []
                }
            },
            "info_260": {
                "msg": {
                    "value": "[_split_a_and_b] returns None: begin_idx %d + tot_len %d >= data_len %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "begin_idx",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tot_len",
                    "possible_values": []
                }
            },
            "to_dense_536": {
                "variable": {
                    "value": "val",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "val",
                    "possible_values": [
                        [
                            "example[key]",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.to_dense(val)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.bfloat16)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_538": {
                "variable": {
                    "value": "val",
                    "possible_values": []
                },
                "x": {
                    "value": "val",
                    "possible_values": [
                        [
                            "example[key]",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.to_dense(val)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.bfloat16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_540": {
                "variable": {
                    "value": "val",
                    "possible_values": []
                },
                "x": {
                    "value": "val",
                    "possible_values": [
                        [
                            "example[key]",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.to_dense(val)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.bfloat16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "possible_values": []
                }
            },
            "reshape_596": {
                "tensor": {
                    "value": "index",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(index, [-1, perm_size]))",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(index), [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, perm_size]",
                    "possible_values": []
                }
            },
            "transpose_598": {
                "a": {
                    "value": "index",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(index, [-1, perm_size]))",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(index)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(index), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_602": {
                "x": {
                    "value": "tf.equal(inputs, SEP_ID)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(inputs, CLS_ID)",
                    "possible_values": []
                }
            },
            "logical_not_606": {
                "x": {
                    "value": "is_masked",
                    "possible_values": [
                        [
                            "np.concatenate([mask_0, mask_1], 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(example.pop('is_masked'), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_613": {
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "range_705": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "cast_706": {
                "variable": {
                    "value": "bool_target_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "target_mask",
                    "possible_values": [
                        [
                            "tf.cast(target_tokens, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mask_0, target_mask_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones([actual_num_predict], dtype=tf.float32), tf.zeros([pad_len], dtype=tf.float32)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                }
            },
            "boolean_mask_707": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(indices, bool_target_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bool_target_mask",
                    "possible_values": [
                        [
                            "tf.cast(target_mask, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_714": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(indices, bool_target_mask)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "zeros_715": {
                "variable": {
                    "value": "paddings",
                    "possible_values": []
                },
                "shape": {
                    "value": "[pad_len, seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target_mapping.dtype",
                    "possible_values": []
                }
            },
            "concat_716": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, paddings]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_717": {
                "variable": {
                    "value": "example[target_mapping]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "tf.one_hot(indices, seq_len, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mapping, paddings], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_predict, seq_len]",
                    "possible_values": []
                }
            },
            "boolean_mask_721": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "possible_values": [
                        [
                            "example.pop('target')",
                            "Call"
                        ],
                        [
                            "tf.concat([target_0, target_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(target, bool_target_mask)",
                            "Call"
                        ],
                        [
                            "tf.concat([target, paddings], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "bool_target_mask",
                    "possible_values": [
                        [
                            "tf.cast(target_mask, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_722": {
                "variable": {
                    "value": "paddings",
                    "possible_values": []
                },
                "shape": {
                    "value": "[pad_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "possible_values": []
                }
            },
            "concat_723": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "values": {
                    "value": "[target, paddings]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_724": {
                "variable": {
                    "value": "example[target]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "possible_values": [
                        [
                            "example.pop('target')",
                            "Call"
                        ],
                        [
                            "tf.concat([target_0, target_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(target, bool_target_mask)",
                            "Call"
                        ],
                        [
                            "tf.concat([target, paddings], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_predict]",
                    "possible_values": []
                }
            },
            "concat_727": {
                "variable": {
                    "value": "target_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([actual_num_predict], dtype=tf.float32), tf.zeros([pad_len], dtype=tf.float32)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_731": {
                "variable": {
                    "value": "example[target_mask]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_mask",
                    "possible_values": [
                        [
                            "tf.cast(target_tokens, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mask_0, target_mask_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones([actual_num_predict], dtype=tf.float32), tf.zeros([pad_len], dtype=tf.float32)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_predict]",
                    "possible_values": []
                }
            },
            "reshape_733": {
                "variable": {
                    "value": "example[target]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "possible_values": [
                        [
                            "example.pop('target')",
                            "Call"
                        ],
                        [
                            "tf.concat([target_0, target_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(target, bool_target_mask)",
                            "Call"
                        ],
                        [
                            "tf.concat([target, paddings], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                }
            },
            "reshape_734": {
                "variable": {
                    "value": "example[target_mask]",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_mask",
                    "possible_values": [
                        [
                            "tf.cast(target_tokens, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([target_mask_0, target_mask_1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones([actual_num_predict], dtype=tf.float32), tf.zeros([pad_len], dtype=tf.float32)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                }
            },
            "info_799": {
                "msg": {
                    "value": "[%d] Record glob: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "range(bsz_per_host)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "record_glob",
                    "possible_values": [
                        [
                            "os.path.join(record_dir, record_glob_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_802": {
                "msg": {
                    "value": "[%d] Num of record info path: %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "range(bsz_per_host)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "len(record_paths)",
                    "possible_values": []
                }
            },
            "info_835": {
                "msg": {
                    "value": "[Dir %d] Number of chosen batches: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "range(bsz_per_host)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "cur_record_info['num_batch']",
                    "possible_values": []
                }
            },
            "info_837": {
                "msg": {
                    "value": "[Dir %d] Number of chosen files: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "range(bsz_per_host)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "len(cur_record_info['filenames'])",
                    "possible_values": []
                }
            },
            "info_839": {
                "msg": {
                    "value": "cur_record_info['filenames']",
                    "possible_values": []
                }
            },
            "Int64List_44": {
                "value": {
                    "value": "values",
                    "possible_values": []
                }
            },
            "FloatList_48": {
                "value": {
                    "value": "values",
                    "possible_values": []
                }
            },
            "info_311": {
                "msg": {
                    "value": "[_split_a_and_b] returns None: a_end %d or b_end %d >= data_len %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "a_end",
                    "possible_values": [
                        [
                            "random.choice(cut_points)",
                            "Call"
                        ],
                        [
                            "end_idx",
                            "Name"
                        ],
                        [
                            "random.choice(cut_points)",
                            "Call"
                        ],
                        [
                            "a_end - 1",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "b_end",
                    "possible_values": [
                        [
                            "end_idx",
                            "Name"
                        ],
                        [
                            "b_begin + b_len",
                            "BinOp"
                        ],
                        [
                            "b_end + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_450": {
                "msg": {
                    "value": "Processing batch %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_batch",
                    "possible_values": [
                        [
                            "num_batch + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Example_514": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "possible_values": []
                }
            },
            "equal_603": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "example.pop('input')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "SEP_ID",
                    "possible_values": [
                        [
                            "special_symbols['<sep>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_604": {
                "x": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "example.pop('input')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "CLS_ID",
                    "possible_values": [
                        [
                            "special_symbols['<cls>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "FixedLenFeature_661": {
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_662": {
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_663": {
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_664": {
                "shape": {
                    "value": "[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_665": {
                "shape": {
                    "value": "[seq_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "info_744": {
                "msg": {
                    "value": "%s: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "k",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "Glob_801": {
                "filename": {
                    "value": "record_glob",
                    "possible_values": [
                        [
                            "os.path.join(record_dir, record_glob_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_92": {
                "msg": {
                    "value": "Loading line %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "line_cnt",
                    "possible_values": [
                        [
                            "line_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_465": {
                "msg": {
                    "value": "Break out with seq idx %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "possible_values": [
                        [
                            "np.random.randint(seg_len)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "i + reuse_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_694": {
                "shape": {
                    "value": "[reuse_len, non_reuse_len]",
                    "possible_values": []
                }
            },
            "zeros_696": {
                "shape": {
                    "value": "[non_reuse_len, reuse_len]",
                    "possible_values": []
                }
            },
            "shape_710": {
                "input": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "tf.range(seq_len, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(indices, bool_target_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_728": {
                "shape": {
                    "value": "[actual_num_predict]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "zeros_729": {
                "shape": {
                    "value": "[pad_len]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "info_813": {
                "msg": {
                    "value": "Skip pass %d: %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "pass_id",
                    "possible_values": [
                        [
                            "int(fields[-1])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "record_info_name",
                    "possible_values": [
                        [
                            "os.path.basename(record_info_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_514": {
                "feature": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "{'input': _int64_feature(cat_data), 'is_masked': _int64_feature(is_masked), 'target': _int64_feature(tgt), 'seg_id': _int64_feature(seg_id), 'label': _int64_feature([label])}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "function_builder.py": {
        "tensorflow": {
            "reshape_41": {
                "variable": {
                    "value": "global_step_tensor",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.train.get_or_create_global_step()",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "inp_k",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_k']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "inp_q",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_q']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "seg_id",
                    "possible_values": []
                },
                "a": {
                    "value": "features['seg_id']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "a": {
                    "value": "features['perm_mask']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "tgt",
                    "possible_values": []
                },
                "a": {
                    "value": "features['target']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "tgt_mask",
                    "possible_values": []
                },
                "a": {
                    "value": "features['target_mask']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "seg_id",
                    "possible_values": []
                },
                "a": {
                    "value": "features['segment_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "inp_mask",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_mask']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bsz_per_core]",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "seg_id",
                    "possible_values": []
                },
                "a": {
                    "value": "features['segment_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "inp_mask",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_mask']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bsz_per_core]",
                    "possible_values": []
                }
            },
            "transpose_215": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_216": {
                "variable": {
                    "value": "seg_id",
                    "possible_values": []
                },
                "a": {
                    "value": "features['segment_ids']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "inp_mask",
                    "possible_values": []
                },
                "a": {
                    "value": "features['input_mask']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "cls_index",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['cls_index']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bsz_per_core]",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "a": {
                    "value": "features['target_mapping']",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "tgt_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tgt_mask",
                    "possible_values": [
                        [
                            "tf.transpose(features['target_mask'], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tgt_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "lm_loss",
                    "possible_values": []
                },
                "x": {
                    "value": "lm_loss",
                    "possible_values": [
                        [
                            "modeling.lm_loss(hidden=output, target=tgt, n_token=xlnet_config.n_token, d_model=xlnet_config.d_model, initializer=initializer, lookup_table=lookup_table, tie_weight=True, bi_data=run_config.bi_data, use_tpu=run_config.use_tpu)",
                            "Call"
                        ],
                        [
                            "tf.cast(lm_loss, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.nn.log_softmax(logits) * one_hot_target, -1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.nn.log_softmax(logits) * one_hot_target, -1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "dense_241": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_245": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(start_logits, -1)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "log_softmax_247": {
                "variable": {
                    "value": "start_log_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "start_logits_masked",
                    "possible_values": [
                        [
                            "start_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "one_hot_325": {
                "variable": {
                    "value": "cls_index",
                    "possible_values": []
                },
                "indices": {
                    "value": "cls_index",
                    "possible_values": [
                        [
                            "tf.reshape(features['cls_index'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cls_index, seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "seq_len",
                    "possible_values": [
                        [
                            "tf.shape(inp)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "einsum_326": {
                "variable": {
                    "value": "cls_feature",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "cls_index",
                    "possible_values": [
                        [
                            "tf.reshape(features['cls_index'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cls_index, seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "start_p",
                    "possible_values": []
                },
                "logits": {
                    "value": "start_logits_masked",
                    "possible_values": [
                        [
                            "start_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_start",
                    "possible_values": []
                }
            },
            "einsum_331": {
                "variable": {
                    "value": "start_feature",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_p",
                    "possible_values": [
                        [
                            "tf.nn.softmax(start_logits_masked, axis=-1, name='softmax_start')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_335": {
                "variable": {
                    "value": "ans_feature",
                    "possible_values": []
                },
                "values": {
                    "value": "[start_feature, cls_feature]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dense_336": {
                "variable": {
                    "value": "ans_feature",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ans_feature",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, xlnet_config.d_model, activation=tf.tanh, kernel_initializer=initializer, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, FLAGS.dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "xlnet_config.d_model",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dense_0",
                    "possible_values": []
                }
            },
            "dropout_341": {
                "variable": {
                    "value": "ans_feature",
                    "possible_values": []
                },
                "x": {
                    "value": "ans_feature",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, xlnet_config.d_model, activation=tf.tanh, kernel_initializer=initializer, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, FLAGS.dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "FLAGS.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": []
                }
            },
            "dense_343": {
                "variable": {
                    "value": "cls_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ans_feature",
                    "possible_values": [
                        [
                            "tf.concat([start_feature, cls_feature], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(ans_feature, xlnet_config.d_model, activation=tf.tanh, kernel_initializer=initializer, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(ans_feature, FLAGS.dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dense_1",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "squeeze_349": {
                "variable": {
                    "value": "cls_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(ans_feature, 1, kernel_initializer=initializer, name='dense_1', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cls_logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bsz_per_core, 4, -1]",
                    "possible_values": []
                }
            },
            "transpose_363": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "a": {
                    "value": "out",
                    "possible_values": [
                        [
                            "tf.reshape(feature, [bsz_per_core, 4, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, bsz_per_core * 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "possible_values": [
                        [
                            "tf.reshape(feature, [bsz_per_core, 4, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(out, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, bsz_per_core * 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, bsz_per_core * 4]",
                    "possible_values": []
                }
            },
            "dense_384": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "xlnet_model.get_pooled_out(FLAGS.summary_type, FLAGS.use_summ_proj)",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_pooled_out(FLAGS.summary_type, FLAGS.use_summ_proj)",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_pooled_out(FLAGS.summary_type, FLAGS.use_summ_proj)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "xlnet_model.get_initializer()",
                    "possible_values": []
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(summary, 1, kernel_initializer=xlnet_model.get_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz_per_core, 4]",
                    "possible_values": []
                }
            },
            "one_hot_388": {
                "variable": {
                    "value": "one_hot_target",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "possible_values": [
                        [
                            "tf.reshape(features['label_ids'], [bsz_per_core])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features['label_ids'], [bsz_per_core])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features['label_ids'], [bsz_per_core])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "reduce_mean_391": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.nn.log_softmax(logits) * one_hot_target, -1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "monitor_dict[key]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "model",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "possible_values": [
                        [
                            "tf.transpose(features['target_mask'], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tgt_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "features['input_ids']",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "model",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "shape_180": {
                "input": {
                    "value": "features['input_ids']",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "model",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "shape_220": {
                "input": {
                    "value": "inp",
                    "possible_values": [
                        [
                            "tf.transpose(features['input_ids'], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(features['input_ids'], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(features['input_ids'], [1, 0])",
                            "Call"
                        ],
                        [
                            "_transform_features(features['input_ids'])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "start_logits",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "end_logits",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "start_positions",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['start_positions']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "one_hot_256": {
                "variable": {
                    "value": "start_index",
                    "possible_values": []
                },
                "indices": {
                    "value": "start_positions",
                    "possible_values": [
                        [
                            "tf.reshape(features['start_positions'], [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "seq_len",
                    "possible_values": [
                        [
                            "tf.shape(inp)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "start_features",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bl->bh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_index",
                    "possible_values": [
                        [
                            "tf.one_hot(start_positions, depth=seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(start_top_index, depth=seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_259": {
                "variable": {
                    "value": "start_features",
                    "possible_values": []
                },
                "input": {
                    "value": "start_features[None]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[seq_len, 1, 1]",
                    "possible_values": []
                }
            },
            "dense_260": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([output, start_features], axis=-1)",
                    "possible_values": []
                },
                "units": {
                    "value": "xlnet_config.d_model",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_0",
                    "possible_values": []
                }
            },
            "dense_266": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [seq_len, -1, FLAGS.start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dense_1",
                    "possible_values": []
                }
            },
            "transpose_270": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(end_logits, -1)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "possible_values": []
                }
            },
            "log_softmax_272": {
                "variable": {
                    "value": "end_log_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "end_logits_masked",
                    "possible_values": [
                        [
                            "end_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ],
                        [
                            "end_logits * (1 - p_mask[:, None]) - 1e+30 * p_mask[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "top_k_276": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(start_logits_masked, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "FLAGS.start_n_top",
                    "possible_values": []
                }
            },
            "one_hot_278": {
                "variable": {
                    "value": "start_index",
                    "possible_values": []
                },
                "indices": {
                    "value": "start_top_index",
                    "possible_values": []
                },
                "depth": {
                    "value": "seq_len",
                    "possible_values": [
                        [
                            "tf.shape(inp)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "einsum_280": {
                "variable": {
                    "value": "start_features",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbh,bkl->bkh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_sequence_output()",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "start_index",
                    "possible_values": [
                        [
                            "tf.one_hot(start_positions, depth=seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(start_top_index, depth=seq_len, axis=-1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_281": {
                "variable": {
                    "value": "end_input",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :, None]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, FLAGS.start_n_top, 1]",
                    "possible_values": []
                }
            },
            "tile_283": {
                "variable": {
                    "value": "start_features",
                    "possible_values": []
                },
                "input": {
                    "value": "start_features[None]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[seq_len, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "end_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[end_input, start_features]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dense_286": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_input",
                    "possible_values": [
                        [
                            "tf.tile(output[:, :, None], [1, 1, FLAGS.start_n_top, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([end_input, start_features], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "xlnet_config.d_model",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_0",
                    "possible_values": []
                }
            },
            "dense_294": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [seq_len, -1, FLAGS.start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ],
                        [
                            "xlnet_model.get_initializer()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dense_1",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [seq_len, -1, FLAGS.start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[seq_len, -1, FLAGS.start_n_top]",
                    "possible_values": []
                }
            },
            "transpose_300": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "a": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [seq_len, -1, FLAGS.start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            },
            "log_softmax_303": {
                "variable": {
                    "value": "end_log_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "end_logits_masked",
                    "possible_values": [
                        [
                            "end_logits * (1 - p_mask) - 1e+30 * p_mask",
                            "BinOp"
                        ],
                        [
                            "end_logits * (1 - p_mask[:, None]) - 1e+30 * p_mask[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "top_k_304": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(end_logits_masked, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax(end_logits_masked, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "FLAGS.end_n_top",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "variable": {
                    "value": "end_top_log_probs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_top_log_probs",
                    "possible_values": [
                        [
                            "tf.reshape(end_top_log_probs, [-1, FLAGS.start_n_top * FLAGS.end_n_top])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, FLAGS.start_n_top * FLAGS.end_n_top]",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "end_top_index",
                    "possible_values": []
                },
                "tensor": {
                    "value": "end_top_index",
                    "possible_values": [
                        [
                            "tf.reshape(end_top_index, [-1, FLAGS.start_n_top * FLAGS.end_n_top])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, FLAGS.start_n_top * FLAGS.end_n_top]",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "answer_class",
                    "possible_values": []
                }
            },
            "shape_359": {
                "input": {
                    "value": "features['input_ids']",
                    "possible_values": []
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "create_file_writer_27": {
                "logdir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": ".host_call",
                    "possible_values": []
                }
            },
            "bfloat16_scope_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(output, 1, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(start_logits, -1), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(logits) * one_hot_target",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_261": {
                "values": {
                    "value": "[output, start_features]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_270": {
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.concat([output, start_features], axis=-1), xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(end_logits, -1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_input, xlnet_config.d_model, kernel_initializer=initializer, activation=tf.tanh, name='dense_0')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(end_logits, begin_norm_axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(end_logits, 1, kernel_initializer=initializer, name='dense_1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(end_logits, [seq_len, -1, FLAGS.start_n_top])",
                            "Call"
                        ],
                        [
                            "tf.transpose(end_logits, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_softmax_390": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.layers.dense(summary, 1, kernel_initializer=xlnet_model.get_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [bsz_per_core, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_37": {
                "name": {
                    "value": "prefix + name",
                    "possible_values": []
                },
                "data": {
                    "value": "scalar",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "reduce_fn(args[i])",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "possible_values": [
                        [
                            "global_step[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "gpu_utils.py": {
        "tensorflow": {
            "get_default_session_59": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_60": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "logdir",
                    "possible_values": []
                }
            },
            "concat_37": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "values": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices + [g.indices]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(indices, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "IndexedSlices_39": {
                "values": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "values + [g.values]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(values, 0) / len(grad_and_vars)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "indices + [g.indices]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(indices, 0)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "grad_and_vars[0][0].dense_shape",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "values + [g.values]",
                            "BinOp"
                        ],
                        [
                            "tf.concat(values, 0) / len(grad_and_vars)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "model_utils.py": {
        "tensorflow": {
            "ConfigProto_27": {
                "variable": {
                    "value": "session_config",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "RunConfig_44": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "master": {
                    "value": "master",
                    "possible_values": [
                        [
                            "tpu_cluster.get_master()",
                            "Call"
                        ],
                        [
                            "FLAGS.master",
                            "Attribute"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                },
                "session_config": {
                    "value": "session_config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations, num_shards=FLAGS.num_hosts * FLAGS.num_core_per_host, per_host_input_for_training=per_host_input)",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "FLAGS.max_save",
                    "possible_values": []
                },
                "save_checkpoints_secs": {
                    "value": "None",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_steps",
                    "possible_values": []
                },
                "train_distribute": {
                    "value": "strategy",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.contrib.distribute.MirroredStrategy(num_gpus=FLAGS.num_core_per_host)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_96": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "where_122": {
                "variable": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "condition": {
                    "value": "global_step < FLAGS.warmup_steps",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_lr",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.float32) / tf.cast(FLAGS.warmup_steps, tf.float32) * FLAGS.learning_rate",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "decay_lr",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(FLAGS.learning_rate, global_step=global_step - FLAGS.warmup_steps, decay_steps=FLAGS.train_steps - FLAGS.warmup_steps, end_learning_rate=FLAGS.learning_rate * FLAGS.min_lr_ratio)",
                            "Call"
                        ],
                        [
                            "tf.train.cosine_decay(FLAGS.learning_rate, global_step=global_step - FLAGS.warmup_steps, decay_steps=FLAGS.train_steps - FLAGS.warmup_steps, alpha=FLAGS.min_lr_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_147": {
                "variable": {
                    "value": "(clipped, gnorm)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "FLAGS.clip",
                    "possible_values": []
                }
            },
            "list_variables_182": {
                "variable": {
                    "value": "var_list",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "input_ckpt",
                    "possible_values": [
                        [
                            "FLAGS.clean_input_ckpt",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_checkpoint_192": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "input_ckpt",
                    "possible_values": [
                        [
                            "FLAGS.clean_input_ckpt",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_205": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "Saver_207": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_227": {
                "variable": {
                    "value": "checkpoint_state",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "possible_values": []
                }
            },
            "list_variables_229": {
                "variable": {
                    "value": "var_list",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints[0]",
                    "possible_values": []
                }
            },
            "Variable_251": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "Saver_253": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "possible_values": []
                }
            },
            "list_variables_279": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_dir)",
                            "Call"
                        ],
                        [
                            "FLAGS.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_20": {
                "variable": {
                    "value": "tpu_cluster",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "possible_values": []
                }
            },
            "polynomial_decay_108": {
                "variable": {
                    "value": "decay_lr",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - FLAGS.warmup_steps",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "FLAGS.train_steps - FLAGS.warmup_steps",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "FLAGS.learning_rate * FLAGS.min_lr_ratio",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "tf.where(global_step < FLAGS.warmup_steps, warmup_lr, decay_lr)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "FLAGS.adam_epsilon",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_142": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=learning_rate, epsilon=FLAGS.adam_epsilon)",
                            "Call"
                        ],
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, epsilon=FLAGS.adam_epsilon, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'], weight_decay_rate=FLAGS.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_171": {
                "variable": {
                    "value": "train_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(clipped, variables), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "possible_values": []
                }
            },
            "reset_default_graph_180": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_191": {
                "msg": {
                    "value": "'Loading from {}'.format(input_ckpt)",
                    "possible_values": []
                }
            },
            "reset_default_graph_225": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_checkpoint_235": {
                "variable": {
                    "value": "reader",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "run_399": {
                "main": {
                    "value": "clean_ckpt",
                    "possible_values": []
                }
            },
            "info_33": {
                "msg": {
                    "value": "Use TPU without distribute strategy.",
                    "possible_values": []
                }
            },
            "MirroredStrategy_38": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "num_gpus": {
                    "value": "FLAGS.num_core_per_host",
                    "possible_values": []
                }
            },
            "global_variables_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "trainable_variables_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "latest_checkpoint_67": {
                "variable": {
                    "value": "init_checkpoint",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_dir",
                    "possible_values": [
                        [
                            "os.path.dirname(FLAGS.init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_71": {
                "msg": {
                    "value": "'Initialize from the ckpt {}'.format(init_checkpoint)",
                    "possible_values": []
                }
            },
            "info_85": {
                "msg": {
                    "value": "**** Global Variables ****",
                    "possible_values": []
                }
            },
            "cosine_decay_114": {
                "variable": {
                    "value": "decay_lr",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - FLAGS.warmup_steps",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "FLAGS.train_steps - FLAGS.warmup_steps",
                    "possible_values": []
                },
                "alpha": {
                    "value": "FLAGS.min_lr_ratio",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "dtype": {
                    "value": "v.dtype",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "possible_values": []
                }
            },
            "assign_204": {
                "ref": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "all_variables_207": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Exists_209": {
                "filename": {
                    "value": "output_model_dir",
                    "possible_values": [
                        [
                            "FLAGS.clean_output_model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MakeDirs_210": {
                "dirname": {
                    "value": "output_model_dir",
                    "possible_values": [
                        [
                            "FLAGS.clean_output_model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Session_213": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_240": {
                "msg": {
                    "value": "Read from checkpoint %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "dtype": {
                    "value": "v.dtype",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "possible_values": []
                }
            },
            "assign_250": {
                "ref": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "all_variables_253": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_256": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_327": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "possible_values": []
                }
            },
            "get_variable_333": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "possible_values": []
                }
            },
            "group_368": {
                "*inputs": {
                    "value": "*assignments",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "var_values",
                            "Name"
                        ],
                        [
                            "var.name",
                            "Attribute"
                        ],
                        [
                            "m.group(1)",
                            "Call"
                        ],
                        [
                            "'AdamWeightDecayOptimizer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_36": {
                "msg": {
                    "value": "Single device mode.",
                    "possible_values": []
                }
            },
            "info_40": {
                "msg": {
                    "value": "Use MirroredStrategy with %d devices.",
                    "possible_values": []
                },
                "*args": {
                    "value": "strategy.num_replicas_in_sync",
                    "possible_values": []
                }
            },
            "TPUConfig_48": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_hosts * FLAGS.num_core_per_host",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "per_host_input",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_82": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_dir)",
                            "Call"
                        ],
                        [
                            "FLAGS.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_90": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "possible_values": []
                }
            },
            "info_187": {
                "msg": {
                    "value": "'Include {}'.format(name)",
                    "possible_values": []
                }
            },
            "info_189": {
                "msg": {
                    "value": "'Exclude {}'.format(name)",
                    "possible_values": []
                }
            },
            "get_variable_scope_198": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "name": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var_values[v].shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtypes[v]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_214": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_scope_244": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_246": {
                "name": {
                    "value": "v",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "var_values[v].shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtypes[v]",
                    "possible_values": []
                }
            },
            "initialize_all_variables_257": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_77": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_dir)",
                            "Call"
                        ],
                        [
                            "FLAGS.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, name='global_step', trainable=False, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.Variable(0, name='global_step', trainable=False, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "FLAGS.warmup_steps",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "multiply_342": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "multiply_344": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "possible_values": []
                }
            },
            "info_161": {
                "msg": {
                    "value": "'Apply mult {:.4f} to layer-{} grad of {}'.format(abs_rate, l, variables[i].name)",
                    "possible_values": []
                }
            },
            "zeros_initializer_332": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_338": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "square_345": {
                "x": {
                    "value": "grad",
                    "possible_values": []
                }
            },
            "sqrt_347": {
                "x": {
                    "value": "next_v",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_381": {
                "msg": {
                    "value": "'Adam WD excludes {}'.format(param_name)",
                    "possible_values": []
                }
            }
        }
    },
    "modeling.py": {
        "tensorflow": {
            "einsum_42": {
                "variable": {
                    "value": "sinusoid_inp",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / d_model)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "proj_weight",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/kernel'.format(name)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_model, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kernel_initializer",
                    "possible_values": []
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "head",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "proj_weight",
                    "possible_values": [
                        [
                            "tf.get_variable('{}/kernel'.format(name), [d_model, n_head, d_head], dtype=h.dtype, initializer=kernel_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "proj_o",
                    "possible_values": []
                },
                "name": {
                    "value": "o/kernel",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_model, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "kernel_initializer",
                    "possible_values": []
                }
            },
            "einsum_96": {
                "variable": {
                    "value": "attn_out",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "abs_attn_core(q_head, k_head, v_head, attn_mask, dropatt, is_training, scale)",
                            "Call"
                        ],
                        [
                            "rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_embed, seg_mat, r_w_bias, r_r_bias, r_s_bias, attn_mask, dropatt, is_training, scale)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj_o",
                    "possible_values": [
                        [
                            "tf.get_variable('o/kernel', [d_model, n_head, d_head], dtype=h.dtype, initializer=kernel_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "attn_out",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_out",
                    "possible_values": [
                        [
                            "tf.einsum('ibnd,hnd->ibh', attn_vec, proj_o)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_out, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "attn_score",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head",
                    "possible_values": [
                        [
                            "head_projection(q, d_model, n_head, d_head, kernel_initializer, 'q')",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k_head",
                    "possible_values": [
                        [
                            "head_projection(k, d_model, n_head, d_head, kernel_initializer, 'k')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "tf.einsum('ibnd,jbnd->ijbn', q_head, k_head)",
                            "Call"
                        ],
                        [
                            "attn_score * scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "(ac + bd + ef) * scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropatt",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_123": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head",
                    "possible_values": [
                        [
                            "head_projection(v, d_model, n_head, d_head, kernel_initializer, 'v')",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_134": {
                "variable": {
                    "value": "ac",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + r_w_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "possible_values": [
                        [
                            "head_projection(cat, d_model, n_head, d_head, kernel_initializer, 'k')",
                            "Call"
                        ],
                        [
                            "head_projection(cat, d_model, n_head, d_head, kernel_initializer, 'k')",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_137": {
                "variable": {
                    "value": "bd",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + r_r_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "possible_values": [
                        [
                            "head_projection(r, d_model, n_head, d_head, kernel_initializer, 'r')",
                            "Call"
                        ],
                        [
                            "head_projection(r, d_model, n_head, d_head, kernel_initializer, 'r')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "tf.einsum('ibnd,jbnd->ijbn', q_head, k_head)",
                            "Call"
                        ],
                        [
                            "attn_score * scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "(ac + bd + ef) * scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropatt",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_158": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(attn_score, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attn_prob, dropatt, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "possible_values": [
                        [
                            "head_projection(cat, d_model, n_head, d_head, kernel_initializer, 'v')",
                            "Call"
                        ],
                        [
                            "head_projection(cat, d_model, n_head, d_head, kernel_initializer, 'v')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_165": {
                "variable": {
                    "value": "x_size",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1], x_size[0], x_size[2], x_size[3]]",
                    "possible_values": []
                }
            },
            "slice_168": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[0], x_size[1] - 1, x_size[2], x_size[3]]",
                    "possible_values": []
                }
            },
            "slice_170": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, klen, -1, -1]",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "attn_mask_pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_181": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "range_208": {
                "variable": {
                    "value": "freq_seq",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "lookup_table",
                    "possible_values": []
                },
                "name": {
                    "value": "lookup_table",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_token, d_embed]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], -1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "relative_positional_encoding(qlen, klen, d_model, clamp_len, attn_type, bi_data, bsz=bsz, dtype=tf_float)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(pos_emb, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(output, d_inner, activation=activation, kernel_initializer=kernel_initializer, name='layer_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, d_model, kernel_initializer=kernel_initializer, name='layer_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output + inp, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out + h, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "post_attention(v, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer, residual)",
                            "Call"
                        ],
                        [
                            "post_attention(h, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_g, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_h, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "d_inner",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "gelu",
                            "Name"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_1",
                    "possible_values": []
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(output, d_inner, activation=activation, kernel_initializer=kernel_initializer, name='layer_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, d_model, kernel_initializer=kernel_initializer, name='layer_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output + inp, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out + h, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "post_attention(v, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer, residual)",
                            "Call"
                        ],
                        [
                            "post_attention(h, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_g, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_h, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "drop_1",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(output, d_inner, activation=activation, kernel_initializer=kernel_initializer, name='layer_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, d_model, kernel_initializer=kernel_initializer, name='layer_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output + inp, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out + h, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "post_attention(v, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer, residual)",
                            "Call"
                        ],
                        [
                            "post_attention(h, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_g, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_h, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "d_model",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_2",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(output, d_inner, activation=activation, kernel_initializer=kernel_initializer, name='layer_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, d_model, kernel_initializer=kernel_initializer, name='layer_2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output, dropout, training=is_training, name='drop_2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output + inp, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out + h, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(attn_out, begin_norm_axis=-1, scope='LayerNorm')",
                            "Call"
                        ],
                        [
                            "post_attention(v, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer, residual)",
                            "Call"
                        ],
                        [
                            "post_attention(h, attn_vec, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_g, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_h, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "drop_2",
                    "possible_values": []
                }
            },
            "einsum_144": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + r_s_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "seg_embed",
                    "possible_values": [
                        [
                            "tf.get_variable('seg_embed', [n_layer, 2, n_head, d_head], dtype=tf_float, initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_145": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(tf.logical_not(tf.equal(seg_id[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=tf_float)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + r_s_bias, seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_184": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stop_gradient_202": {
                "input": {
                    "value": "new_mem",
                    "possible_values": [
                        [
                            "curr_out[-mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_210": {
                "variable": {
                    "value": "freq_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "possible_values": [
                        [
                            "tf.range(0, d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_223": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                }
            },
            "range_224": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                }
            },
            "concat_243": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "range_245": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                }
            },
            "info_453": {
                "msg": {
                    "value": "'memory input {}'.format(mems)",
                    "possible_values": []
                }
            },
            "info_455": {
                "msg": {
                    "value": "'Use float type {}'.format(tf_float)",
                    "possible_values": []
                }
            },
            "dropout_535": {
                "variable": {
                    "value": "output_h",
                    "possible_values": []
                },
                "x": {
                    "value": "word_emb_k",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_568": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_emb",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], -1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "relative_positional_encoding(qlen, klen, d_model, clamp_len, attn_type, bi_data, bsz=bsz, dtype=tf_float)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(pos_emb, dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_672": {
                "variable": {
                    "value": "softmax_b",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_token]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "possible_values": []
                }
            },
            "dropout_734": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "x": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden[0]",
                            "Subscript"
                        ],
                        [
                            "tf.layers.dense(summary, d_model, activation=tf.tanh, kernel_initializer=initializer, name='summary')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(summary, dropout, training=is_training, name='dropout')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden, axis=0)",
                            "Call"
                        ],
                        [
                            "multihead_attn(summary_bias, hidden, hidden, input_mask, d_model, n_head, d_head, dropout, dropatt, is_training, initializer, residual=False)",
                            "Call"
                        ],
                        [
                            "summary[0]",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout",
                    "possible_values": []
                }
            },
            "dense_752": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "possible_values": []
                },
                "units": {
                    "value": "n_class",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "name": {
                    "value": "logit",
                    "possible_values": []
                }
            },
            "one_hot_758": {
                "variable": {
                    "value": "one_hot_target",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_class",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "possible_values": []
                }
            },
            "dense_770": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "name": {
                    "value": "logit",
                    "possible_values": []
                }
            },
            "squeeze_776": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.einsum('ibd,nd->ibn', hidden, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(hidden, n_class, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "square_777": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "x": {
                    "value": "logits - labels",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "one_hot_idx",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_token",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_227": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_228": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_231": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp_len",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_232": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp_len",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_247": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_249": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -clamp_len, clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clamp_len",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_291": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "concat_330": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "einsum_368": {
                "variable": {
                    "value": "q_head_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "possible_values": [
                        [
                            "head_projection(g, d_model, n_head, d_head, kernel_initializer, 'q')",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_372": {
                "variable": {
                    "value": "attn_vec_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "possible_values": [
                        [
                            "rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_embed, seg_mat, r_w_bias, r_r_bias, r_s_bias, attn_mask_g, dropatt, is_training, scale)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ],
                        [
                            "rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_embed, seg_mat, r_w_bias, r_r_bias, r_s_bias, attn_mask_g, dropatt, is_training, scale)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_460": {
                "variable": {
                    "value": "r_w_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_w_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_layer, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "get_variable_462": {
                "variable": {
                    "value": "r_r_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_r_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_layer, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "get_variable_465": {
                "variable": {
                    "value": "r_w_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_w_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "get_variable_467": {
                "variable": {
                    "value": "r_r_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_r_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "zeros_497": {
                "variable": {
                    "value": "mems_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(data_mask)[0], mlen, bsz]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_499": {
                "variable": {
                    "value": "data_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_506": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_510": {
                "variable": {
                    "value": "non_tgt_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=tf_float), non_tgt_mask]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_512": {
                "variable": {
                    "value": "non_tgt_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_537": {
                "variable": {
                    "value": "output_g",
                    "possible_values": []
                },
                "x": {
                    "value": "word_emb_q",
                    "possible_values": [
                        [
                            "tf.tile(mask_emb, [tf.shape(target_mapping)[0], bsz, 1])",
                            "Call"
                        ],
                        [
                            "inp_q_ext * mask_emb + (1 - inp_q_ext) * word_emb_k",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_549": {
                "variable": {
                    "value": "seg_embed",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_embed",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_layer, 2, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "zeros_553": {
                "variable": {
                    "value": "mem_pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "concat_554": {
                "variable": {
                    "value": "cat_ids",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, seg_id]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_557": {
                "variable": {
                    "value": "seg_mat",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(seg_id[:, None], cat_ids[None, :]))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "one_hot_560": {
                "variable": {
                    "value": "seg_mat",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.cast(tf.logical_not(tf.equal(seg_id[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=tf_float)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_652": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "output_g",
                    "possible_values": [
                        [
                            "post_attention(g, attn_vec_g, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(word_emb_q, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "positionwise_ffn(inp=output_g, d_model=d_model, d_inner=d_inner, dropout=dropout, kernel_initializer=initializer, activation_type=ff_activation, is_training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_654": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "output_h",
                    "possible_values": [
                        [
                            "post_attention(h, attn_vec_h, d_model, n_head, d_head, dropout, is_training, kernel_initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(word_emb_k, dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "rel_multihead_attn(h=output_h, r=pos_emb, r_w_bias=r_w_bias if not untie_r else r_w_bias[i], r_r_bias=r_r_bias if not untie_r else r_r_bias[i], seg_mat=seg_mat, r_s_bias=r_s_bias_i, seg_embed=seg_embed_i, attn_mask=non_tgt_mask, mems=mems[i], d_model=d_model, n_head=n_head, d_head=d_head, dropout=dropout, dropatt=dropatt, is_training=is_training, kernel_initializer=initializer, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "positionwise_ffn(inp=output_h, d_model=d_model, d_inner=d_inner, dropout=dropout, kernel_initializer=initializer, activation_type=ff_activation, is_training=is_training, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_663": {
                "name_or_scope": {
                    "value": "lm_loss",
                    "possible_values": []
                }
            },
            "get_variable_669": {
                "variable": {
                    "value": "softmax_w",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_token, d_model]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "one_hot_678": {
                "variable": {
                    "value": "one_hot_target",
                    "possible_values": []
                },
                "indices": {
                    "value": "target",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_token",
                    "possible_values": []
                },
                "dtype": {
                    "value": "logits.dtype",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_681": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.einsum('ibd,nd->ibn', hidden, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(hidden, n_class, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_699": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "sequnece_summary",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_726": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "hidden[0]",
                            "Subscript"
                        ],
                        [
                            "tf.layers.dense(summary, d_model, activation=tf.tanh, kernel_initializer=initializer, name='summary')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(summary, dropout, training=is_training, name='dropout')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden, axis=0)",
                            "Call"
                        ],
                        [
                            "multihead_attn(summary_bias, hidden, hidden, input_mask, d_model, n_head, d_head, dropout, dropatt, is_training, initializer, residual=False)",
                            "Call"
                        ],
                        [
                            "summary[0]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "d_model",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "possible_values": []
                }
            },
            "variable_scope_751": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_769": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'embedding'",
                            "MethodArgument"
                        ],
                        [
                            "'ff'",
                            "MethodArgument"
                        ],
                        [
                            "'abs_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'rel_attn'",
                            "MethodArgument"
                        ],
                        [
                            "'transformer'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_20": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "sin_43": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_43": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_470": {
                "input": {
                    "value": "inp_k",
                    "possible_values": []
                }
            },
            "shape_471": {
                "input": {
                    "value": "inp_k",
                    "possible_values": []
                }
            },
            "get_variable_529": {
                "variable": {
                    "value": "mask_emb",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_emb",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, d_model]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_542": {
                "variable": {
                    "value": "r_s_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_s_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_layer, n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "get_variable_546": {
                "variable": {
                    "value": "r_s_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "r_s_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_head, d_head]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "einsum_675": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "hidden",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "softmax_w",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [n_token, d_model], dtype=hidden.dtype, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "lookup_table",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_759": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(logits) * one_hot_target",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "embedding_lookup_38": {
                "params": {
                    "value": "lookup_table",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', [n_token, d_embed], dtype=dtype, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_138": {
                "input": {
                    "value": "ac",
                    "possible_values": [
                        [
                            "tf.einsum('ibnd,jbnd->ijbn', q_head + r_w_bias, k_head_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_200": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "shape_472": {
                "input": {
                    "value": "mems[0]",
                    "possible_values": []
                }
            },
            "eye_509": {
                "num_rows": {
                    "value": "qlen",
                    "possible_values": [
                        [
                            "tf.shape(inp_k)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "variable_scope_528": {
                "name_or_scope": {
                    "value": "mask_emb",
                    "possible_values": []
                }
            },
            "tile_531": {
                "variable": {
                    "value": "word_emb_q",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_emb",
                    "possible_values": [
                        [
                            "tf.get_variable('mask_emb', [1, 1, d_model], dtype=tf_float)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(target_mapping)[0], bsz, 1]",
                    "possible_values": []
                }
            },
            "logical_not_558": {
                "x": {
                    "value": "tf.equal(seg_id[:, None], cat_ids[None, :])",
                    "possible_values": []
                }
            },
            "variable_scope_586": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "possible_values": []
                }
            },
            "zeros_initializer_673": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_679": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(logits) * one_hot_target",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reduce_mean_705": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "in,nd->id",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "one_hot_idx",
                    "possible_values": [
                        [
                            "tf.one_hot(x, n_token, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "lookup_table",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', [n_token, d_embed], dtype=dtype, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_36": {
                "equation": {
                    "value": "ibn,nd->ibd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "one_hot_idx",
                    "possible_values": [
                        [
                            "tf.one_hot(x, n_token, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "lookup_table",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', [n_token, d_embed], dtype=dtype, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_510": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_558": {
                "x": {
                    "value": "seg_id[:, None]",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "possible_values": []
                }
            },
            "get_variable_709": {
                "variable": {
                    "value": "summary_bias",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_model]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "possible_values": []
                }
            },
            "tile_712": {
                "variable": {
                    "value": "summary_bias",
                    "possible_values": []
                },
                "input": {
                    "value": "summary_bias[None, None]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "possible_values": []
                }
            },
            "log_softmax_759": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.einsum('ibd,nd->ibn', hidden, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(hidden, n_class, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_497": {
                "input": {
                    "value": "data_mask",
                    "possible_values": [
                        [
                            "input_mask[None] + perm_mask",
                            "BinOp"
                        ],
                        [
                            "input_mask[None]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([mems_mask, data_mask], 1)",
                            "Call"
                        ],
                        [
                            "perm_mask",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_softmax_679": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.einsum('ibd,nd->ibn', hidden, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(hidden, n_class, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hidden, 1, kernel_initializer=initializer, name='logit')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_21": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x_size[1], x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[0], x_size[1] - 1, x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 0], [-1, klen, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "shape_707": {
                "input": {
                    "value": "hidden",
                    "possible_values": []
                }
            },
            "shape_531": {
                "input": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "run_classifier.py": {
        "tensorflow": {
            "TFRecordWriter_407": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "possible_values": []
                }
            },
            "info_405": {
                "msg": {
                    "value": "'Create new tfrecord {}.'.format(output_file)",
                    "possible_values": []
                }
            },
            "Example_439": {
                "variable": {
                    "value": "tf_example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "possible_values": []
                }
            },
            "FixedLenFeature_457": {
                "variable": {
                    "value": "name_to_features[label_ids]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "info_459": {
                "msg": {
                    "value": "'Input tfrecord file {}'.format(input_file)",
                    "possible_values": []
                }
            },
            "parse_single_example_463": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.float32), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64), 'label_ids': tf.FixedLenFeature([], tf.int64), 'is_real_example': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_486": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_file",
                    "possible_values": []
                }
            },
            "set_verbosity_637": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "TPUEstimator_687": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn(len(label_list) if label_list is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "possible_values": []
                }
            },
            "Estimator_695": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn(len(label_list) if label_list is not None else None)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ListDirectory_759": {
                "variable": {
                    "value": "filenames",
                    "possible_values": []
                },
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                }
            },
            "run_855": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Exists_401": {
                "filename": {
                    "value": "output_file",
                    "possible_values": []
                }
            },
            "info_402": {
                "msg": {
                    "value": "'Do not overwrite tfrecord {} exists.'.format(output_file)",
                    "possible_values": []
                }
            },
            "Feature_421": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "possible_values": []
                }
            },
            "Feature_425": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "possible_values": []
                }
            },
            "FixedLenFeature_450": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_451": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "FixedLenFeature_452": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_453": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_454": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "info_527": {
                "msg": {
                    "value": "'#params: {}'.format(num_params)",
                    "possible_values": []
                }
            },
            "cast_557": {
                "variable": {
                    "value": "is_real_example",
                    "possible_values": []
                },
                "x": {
                    "value": "features['is_real_example']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_560": {
                "variable": {
                    "value": "label_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_624": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                },
                "host_call": {
                    "value": "host_call",
                    "possible_values": [
                        [
                            "function_builder.construct_scalar_host_call(monitor_dict=monitor_dict, model_dir=FLAGS.model_dir, prefix='train/', reduce_fn=tf.reduce_mean)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_628": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                }
            },
            "Exists_661": {
                "filename": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_662": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "info_703": {
                "msg": {
                    "value": "'Use tfrecord file {}'.format(train_file)",
                    "possible_values": []
                }
            },
            "info_707": {
                "msg": {
                    "value": "'Num of train samples: {}'.format(len(train_examples))",
                    "possible_values": []
                }
            },
            "info_727": {
                "msg": {
                    "value": "'Num of eval samples: {}'.format(len(eval_examples))",
                    "possible_values": []
                }
            },
            "info_795": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_799": {
                "msg": {
                    "value": "log_str",
                    "possible_values": [
                        [
                            "'Eval result | '",
                            "Constant"
                        ],
                        [
                            "'Best result | '",
                            "Constant"
                        ],
                        [
                            "log_str + '{} {} | '.format(key, val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ListDirectory_312": {
                "dirname": {
                    "value": "cur_dir",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, label)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_414": {
                "msg": {
                    "value": "'Writing example {} of {}'.format(ex_index, len(examples))",
                    "possible_values": []
                }
            },
            "cast_470": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(t, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "info_489": {
                "msg": {
                    "value": "Input pipeline id %d out of %d",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_context.input_pipeline_id",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "input_context.num_replicas_in_sync",
                    "possible_values": []
                }
            },
            "map_and_batch_501": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "FLAGS.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.eval_batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.predict_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "possible_values": []
                }
            },
            "argmax_537": {
                "variable": {
                    "value": "predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "[float(x) for x in result['logits'].flat]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "accuracy_543": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "mean_545": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "possible_values": []
                },
                "weights": {
                    "value": "is_real_example",
                    "possible_values": [
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_552": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "values": {
                    "value": "per_example_loss",
                    "possible_values": []
                },
                "weights": {
                    "value": "is_real_example",
                    "possible_values": [
                        [
                            "tf.cast(features['is_real_example'], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_569": {
                "variable": {
                    "value": "eval_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "eval_metrics": {
                    "value": "(metric_fn, metric_args)",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_575": {
                "variable": {
                    "value": "eval_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "eval_metric_ops": {
                    "value": "metric_fn(*metric_args)",
                    "possible_values": []
                }
            },
            "reshape_583": {
                "variable": {
                    "value": "label_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "reshape_609": {
                "variable": {
                    "value": "label_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['label_ids']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "argmax_610": {
                "variable": {
                    "value": "predictions",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "[float(x) for x in result['logits'].flat]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "output_type": {
                    "value": "label_ids.dtype",
                    "possible_values": []
                }
            },
            "equal_611": {
                "variable": {
                    "value": "is_correct",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{'logits': logits, 'labels': label_ids, 'is_real': features['is_real_example']}",
                            "Dict"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=label_ids.dtype)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "label_ids",
                    "possible_values": [
                        [
                            "tf.reshape(features['label_ids'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features['label_ids'], [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(features['label_ids'], [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_612": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(is_correct, tf.float32)",
                    "possible_values": []
                }
            },
            "Exists_645": {
                "filename": {
                    "value": "predict_dir",
                    "possible_values": [
                        [
                            "FLAGS.predict_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MakeDirs_646": {
                "dirname": {
                    "value": "predict_dir",
                    "possible_values": [
                        [
                            "FLAGS.predict_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_786": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_790": {
                "msg": {
                    "value": "log_str",
                    "possible_values": [
                        [
                            "'Eval result | '",
                            "Constant"
                        ],
                        [
                            "'Best result | '",
                            "Constant"
                        ],
                        [
                            "log_str + '{} {} | '.format(key, val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "warning_249": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "warning_370": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "Features_439": {
                "feature": {
                    "value": "features",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_592": {
                "variable": {
                    "value": "output_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{'logits': logits, 'labels': label_ids, 'is_real': features['is_real_example']}",
                            "Dict"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=label_ids.dtype)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_595": {
                "variable": {
                    "value": "output_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{'logits': logits, 'labels': label_ids, 'is_real': features['is_real_example']}",
                            "Dict"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=label_ids.dtype)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_766": {
                "msg": {
                    "value": "'Add {} to eval list.'.format(cur_filename)",
                    "possible_values": []
                }
            },
            "warning_255": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "warning_265": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "warning_376": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "warning_386": {
                "msg": {
                    "value": "Incomplete line, ignored.",
                    "possible_values": []
                }
            },
            "Int64List_421": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "FloatList_425": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "trainable_variables_526": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cast_612": {
                "x": {
                    "value": "is_correct",
                    "possible_values": [
                        [
                            "tf.equal(predictions, label_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "info_826": {
                "msg": {
                    "value": "'Predicting submission for example: {}'.format(pred_cnt)",
                    "possible_values": []
                }
            }
        }
    },
    "run_squad.py": {
        "tensorflow": {
            "Glob_941": {
                "variable": {
                    "value": "global_input_paths",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_glob",
                    "possible_values": []
                }
            },
            "info_631": {
                "msg": {
                    "value": "'Total number of instances: {} = pos {} neg {}'.format(cnt_pos + cnt_neg, cnt_pos, cnt_neg)",
                    "possible_values": []
                }
            },
            "TFRecordWriter_679": {
                "variable": {
                    "value": "self._writer",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "possible_values": []
                }
            },
            "Example_711": {
                "variable": {
                    "value": "tf_example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "possible_values": []
                }
            },
            "info_735": {
                "msg": {
                    "value": "'Writing predictions to: %s' % output_prediction_file",
                    "possible_values": []
                }
            },
            "FixedLenFeature_936": {
                "variable": {
                    "value": "name_to_features[start_positions]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_937": {
                "variable": {
                    "value": "name_to_features[end_positions]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_938": {
                "variable": {
                    "value": "name_to_features[is_impossible]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "info_940": {
                "msg": {
                    "value": "'Input tfrecord file glob {}'.format(input_glob)",
                    "possible_values": []
                }
            },
            "info_942": {
                "msg": {
                    "value": "'Find {} input paths {}'.format(len(global_input_paths), global_input_paths)",
                    "possible_values": []
                }
            },
            "parse_single_example_947": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "possible_values": [
                        [
                            "{'unique_ids': tf.FixedLenFeature([], tf.int64), 'input_ids': tf.FixedLenFeature([seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([seq_length], tf.float32), 'segment_ids': tf.FixedLenFeature([seq_length], tf.int64), 'cls_index': tf.FixedLenFeature([], tf.int64), 'p_mask': tf.FixedLenFeature([seq_length], tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_1074": {
                "variable": {
                    "value": "is_impossible",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['is_impossible']",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_1075": {
                "variable": {
                    "value": "regression_loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "is_impossible",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "qa['is_impossible']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(features['is_impossible'], [-1])",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "logits": {
                    "value": "cls_logits",
                    "possible_values": [
                        [
                            "outputs['cls_logits']",
                            "Subscript"
                        ],
                        [
                            "float(result['cls_logits'].flat[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1077": {
                "variable": {
                    "value": "regression_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "regression_loss",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=is_impossible, logits=cls_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(regression_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1128": {
                "msg": {
                    "value": "'Read examples from {}'.format(FLAGS.train_file)",
                    "possible_values": []
                }
            },
            "info_1136": {
                "msg": {
                    "value": "'Write to {}'.format(train_rec_file)",
                    "possible_values": []
                }
            },
            "set_verbosity_1152": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "TPUEstimator_1184": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "possible_values": []
                },
                "predict_batch_size": {
                    "value": "FLAGS.predict_batch_size",
                    "possible_values": []
                }
            },
            "Estimator_1191": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "possible_values": [
                        [
                            "get_model_fn()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "model_utils.configure_tpu(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_1310": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Feature_686": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "possible_values": []
                }
            },
            "Feature_691": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "possible_values": []
                }
            },
            "GFile_866": {
                "name": {
                    "value": "output_prediction_file",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.predict_dir, 'predictions.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "GFile_869": {
                "name": {
                    "value": "output_nbest_file",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.predict_dir, 'nbest_predictions.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "GFile_872": {
                "name": {
                    "value": "output_null_log_odds_file",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.predict_dir, 'null_odds.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "FixedLenFeature_927": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_928": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_929": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "FixedLenFeature_930": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_931": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_932": {
                "shape": {
                    "value": "[seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "TFRecordDataset_983": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_paths[0]",
                    "possible_values": []
                }
            },
            "info_1030": {
                "msg": {
                    "value": "'#params: {}'.format(num_params)",
                    "possible_values": []
                }
            },
            "one_hot_1059": {
                "variable": {
                    "value": "one_hot_positions",
                    "possible_values": []
                },
                "indices": {
                    "value": "positions",
                    "possible_values": []
                },
                "depth": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "tf.shape(features['input_ids'])[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_mean_1063": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(one_hot_positions * log_probs, axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUEstimatorSpec_1100": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "(start_loss + end_loss) * 0.5",
                            "BinOp"
                        ],
                        [
                            "total_loss + regression_loss * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                },
                "host_call": {
                    "value": "host_call",
                    "possible_values": [
                        [
                            "function_builder.construct_scalar_host_call(monitor_dict=monitor_dict, model_dir=FLAGS.model_dir, prefix='train/', reduce_fn=tf.reduce_mean)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_1104": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "(start_loss + end_loss) * 0.5",
                            "BinOp"
                        ],
                        [
                            "total_loss + regression_loss * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                }
            },
            "Exists_1154": {
                "filename": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_1155": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_1170": {
                "dirname": {
                    "value": "FLAGS.predict_dir",
                    "possible_values": []
                }
            },
            "info_1301": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_1305": {
                "msg": {
                    "value": "log_str",
                    "possible_values": [
                        [
                            "'Result | '",
                            "Constant"
                        ],
                        [
                            "log_str + '{} {} | '.format(key, val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_1306": {
                "msg": {
                    "value": "'=' * 80",
                    "possible_values": []
                }
            },
            "info_325": {
                "msg": {
                    "value": "'Converting {}/{} pos {} neg {}'.format(example_index, len(examples), cnt_pos, cnt_neg)",
                    "possible_values": []
                }
            },
            "cast_954": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(t, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "info_977": {
                "msg": {
                    "value": "'Host {} handles {} files'.format(host_id, len(input_paths))",
                    "possible_values": []
                }
            },
            "map_and_batch_1008": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "FLAGS.train_batch_size",
                            "Attribute"
                        ],
                        [
                            "FLAGS.predict_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_threads",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "drop_remainder",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_1049": {
                "variable": {
                    "value": "output_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{'unique_ids': features['unique_ids'], 'start_top_index': outputs['start_top_index'], 'start_top_log_probs': outputs['start_top_log_probs'], 'end_top_index': outputs['end_top_index'], 'end_top_log_probs': outputs['end_top_log_probs'], 'cls_logits': outputs['cls_logits']}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model_utils.init_from_checkpoint(FLAGS)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_1052": {
                "variable": {
                    "value": "output_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "{'unique_ids': features['unique_ids'], 'start_top_index': outputs['start_top_index'], 'start_top_log_probs': outputs['start_top_log_probs'], 'end_top_index': outputs['end_top_index'], 'end_top_log_probs': outputs['end_top_log_probs'], 'cls_logits': outputs['cls_logits']}",
                            "Dict"
                        ]
                    ]
                }
            },
            "shape_1057": {
                "input": {
                    "value": "features['input_ids']",
                    "possible_values": []
                }
            },
            "Exists_1169": {
                "filename": {
                    "value": "FLAGS.predict_dir",
                    "possible_values": []
                }
            },
            "Exists_1226": {
                "filename": {
                    "value": "eval_feature_file",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, '{}.slen-{}.qlen-{}.eval.features.pkl'.format(spm_basename, FLAGS.max_seq_length, FLAGS.max_query_length))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1228": {
                "msg": {
                    "value": "'Loading eval features from {}'.format(eval_feature_file)",
                    "possible_values": []
                }
            },
            "info_567": {
                "msg": {
                    "value": "*** Example ***",
                    "possible_values": []
                }
            },
            "info_568": {
                "msg": {
                    "value": "'unique_id: %s' % unique_id",
                    "possible_values": []
                }
            },
            "info_569": {
                "msg": {
                    "value": "'example_index: %s' % example_index",
                    "possible_values": []
                }
            },
            "info_570": {
                "msg": {
                    "value": "'doc_span_index: %s' % doc_span_index",
                    "possible_values": []
                }
            },
            "info_571": {
                "msg": {
                    "value": "'tok_start_to_orig_index: %s' % ' '.join([str(x) for x in cur_tok_start_to_orig_index])",
                    "possible_values": []
                }
            },
            "info_573": {
                "msg": {
                    "value": "'tok_end_to_orig_index: %s' % ' '.join([str(x) for x in cur_tok_end_to_orig_index])",
                    "possible_values": []
                }
            },
            "info_575": {
                "msg": {
                    "value": "'token_is_max_context: %s' % ' '.join(['%d:%s' % (x, y) for (x, y) in six.iteritems(token_is_max_context)])",
                    "possible_values": []
                }
            },
            "info_578": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "possible_values": []
                }
            },
            "info_579": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "possible_values": []
                }
            },
            "info_581": {
                "msg": {
                    "value": "'segment_ids: %s' % ' '.join([str(x) for x in segment_ids])",
                    "possible_values": []
                }
            },
            "Features_711": {
                "feature": {
                    "value": "features",
                    "possible_values": [
                        [
                            "example_index_to_features[example_index]",
                            "Subscript"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "parallel_interleave_998": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "possible_values": [
                        [
                            "min(num_threads, len(input_paths))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1037": {
                "msg": {
                    "value": "init_checkpoint not being used in predict mode.",
                    "possible_values": []
                }
            },
            "reduce_sum_1062": {
                "input_tensor": {
                    "value": "one_hot_positions * log_probs",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "info_1265": {
                "msg": {
                    "value": "'Processing example: %d' % len(cur_results)",
                    "possible_values": []
                }
            },
            "info_585": {
                "msg": {
                    "value": "impossible example span",
                    "possible_values": []
                }
            },
            "info_591": {
                "msg": {
                    "value": "'start_position: %d' % start_position",
                    "possible_values": []
                }
            },
            "info_592": {
                "msg": {
                    "value": "'end_position: %d' % end_position",
                    "possible_values": []
                }
            },
            "info_593": {
                "msg": {
                    "value": "'answer: %s' % printable_text(answer_text)",
                    "possible_values": []
                }
            },
            "Int64List_687": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "FloatList_691": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "trainable_variables_1029": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tpu_estimator.py": {
        "tensorflow": {
            "get_default_graph_167": {
                "variable": {
                    "value": "graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_default_graph_3016": {
                "variable": {
                    "value": "operations",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RunConfig_3511": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "estimator.model_dir",
                    "possible_values": []
                }
            },
            "assign_add_225": {
                "ref": {
                    "value": "eval_step",
                    "possible_values": [
                        [
                            "evaluation._get_or_create_eval_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "math_ops.cast(iterations_per_loop - 1, dtype=eval_step.dtype)",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "get_global_step_617": {
                "variable": {
                    "value": "self._global_step_tensor",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pack_sequence_as_2325": {
                "variable": {
                    "value": "new_tensors_dict",
                    "possible_values": []
                },
                "structure": {
                    "value": "tensors_dict",
                    "possible_values": [
                        [
                            "collections.OrderedDict(((k, _export_output_to_tensors(v)) for (k, v) in six.iteritems(estimator_spec.export_outputs)))",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "new_tensors",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "while_loop_2952": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "possible_values": []
                },
                "body": {
                    "value": "single_tpu_predict_step",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "_Inputs.from_input_fn(input_fn(user_context))",
                            "Call"
                        ],
                        [
                            "_Inputs.from_input_fn(input_fn(user_context))",
                            "Call"
                        ],
                        [
                            "_InputsWithStoppingSignals(dataset=inputs.dataset, batch_size=ctx.batch_size_for_input_fn, add_padding=True)",
                            "Call"
                        ],
                        [
                            "_Inputs.from_input_fn(input_fn(user_context))",
                            "Call"
                        ],
                        [
                            "_InputsWithStoppingSignals(dataset=inputs.dataset, batch_size=ctx.batch_size_for_input_fn, add_padding=True, num_invocations_per_step=ctx.num_of_replicas_per_host)",
                            "Call"
                        ],
                        [
                            "_Inputs.from_input_fn(input_fn(user_context))",
                            "Call"
                        ],
                        [
                            "_InputsWithStoppingSignals(dataset=inputs.dataset, batch_size=ctx.batch_size_for_input_fn, add_padding=True)",
                            "Call"
                        ],
                        [
                            "[_StopSignals.NON_STOPPING_SIGNAL]",
                            "List"
                        ],
                        [
                            "dequeue_fn()",
                            "Call"
                        ],
                        [
                            "dequeue_fn()",
                            "Call"
                        ],
                        [
                            "dequeue_fn()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b'loop'",
                    "possible_values": []
                }
            },
            "identity_2980": {
                "variable": {
                    "value": "iterations",
                    "possible_values": []
                },
                "input": {
                    "value": "iterations_per_loop_var",
                    "possible_values": [
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_3099": {
                "variable": {
                    "value": "self._g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "make_initializable_iterator_3156": {
                "variable": {
                    "value": "self._iterator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self._dataset",
                    "possible_values": []
                }
            },
            "constant_3355": {
                "variable": {
                    "value": "batch_size_tensor",
                    "possible_values": []
                },
                "value": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "ctx.global_batch_size",
                            "Attribute"
                        ],
                        [
                            "ctx.global_batch_size",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(padding_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "possible_values": []
                }
            },
            "assert_greater_equal_3357": {
                "variable": {
                    "value": "check_greater",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_size_tensor",
                    "possible_values": [
                        [
                            "constant_op.constant(batch_size, dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "real_batch_size",
                    "possible_values": [
                        [
                            "array_ops.shape(_PaddingSignals._find_any_tensor(features))[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size - math_ops.reduce_sum(padding_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "(batch_size_tensor, real_batch_size)",
                    "possible_values": []
                },
                "message": {
                    "value": "The real batch size should not be greater than batch_size.",
                    "possible_values": []
                }
            },
            "equal_3411": {
                "variable": {
                    "value": "assert_padding_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.reduce_sum(sliced_padding_mask)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "equal_3418": {
                "variable": {
                    "value": "is_full_batch",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.reduce_sum(padding_mask)",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_3441": {
                "variable": {
                    "value": "padding_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[array_ops.zeros((real_batch_size,), dtype=dtypes.int32), array_ops.ones((missing_count,), dtype=dtypes.int32)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_default_graph_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_global_step_125": {
                "graph": {
                    "value": "graph",
                    "possible_values": [
                        [
                            "graph or ops.get_default_graph()",
                            "BoolOp"
                        ],
                        [
                            "ops.get_default_graph()",
                            "Call"
                        ],
                        [
                            "ops.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_129": {
                "name": {
                    "value": "ops.GraphKeys.GLOBAL_STEP",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int64",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "possible_values": []
                },
                "collections": {
                    "value": "[ops.GraphKeys.GLOBAL_VARIABLES, ops.GraphKeys.GLOBAL_STEP]",
                    "possible_values": []
                }
            },
            "colocate_with_175": {
                "op": {
                    "value": "training_util.get_global_step()",
                    "possible_values": []
                }
            },
            "cast_227": {
                "x": {
                    "value": "iterations_per_loop - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eval_step.dtype",
                    "possible_values": []
                }
            },
            "EstimatorSpec_352": {
                "mode": {
                    "value": "self.mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "loss": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "self.train_op",
                    "possible_values": []
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "host_call_ret['eval_metrics']",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "export_outputs": {
                    "value": "self.export_outputs",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "possible_values": [
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "scaffold_fn()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.scaffold_fn() if self.scaffold_fn else None",
                            "IfExp"
                        ]
                    ]
                },
                "training_hooks": {
                    "value": "self.training_hooks + hooks",
                    "possible_values": []
                },
                "evaluation_hooks": {
                    "value": "self.evaluation_hooks + hooks",
                    "possible_values": []
                },
                "prediction_hooks": {
                    "value": "self.prediction_hooks + hooks",
                    "possible_values": []
                }
            },
            "info_392": {
                "msg": {
                    "value": "Shutting down %s thread.",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._name",
                    "possible_values": []
                }
            },
            "info_447": {
                "msg": {
                    "value": "TPU job name %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._master_job",
                    "possible_values": []
                }
            },
            "info_463": {
                "msg": {
                    "value": "Starting infeed thread controller.",
                    "possible_values": []
                }
            },
            "info_482": {
                "msg": {
                    "value": "Starting outfeed thread controller.",
                    "possible_values": []
                }
            },
            "info_536": {
                "msg": {
                    "value": "Enqueue next (%d) batch(es) of data to infeed.",
                    "possible_values": []
                },
                "*args": {
                    "value": "iterations",
                    "possible_values": [
                        [
                            "array_ops.identity(iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._queue.get(block=True)",
                            "Call"
                        ],
                        [
                            "run_context.session.run(self._iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_539": {
                "msg": {
                    "value": "Dequeue next (%d) batch(es) of data from outfeed.",
                    "possible_values": []
                },
                "*args": {
                    "value": "iterations",
                    "possible_values": [
                        [
                            "array_ops.identity(iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._queue.get(block=True)",
                            "Call"
                        ],
                        [
                            "run_context.session.run(self._iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_545": {
                "msg": {
                    "value": "Stop infeed thread controller",
                    "possible_values": []
                }
            },
            "info_549": {
                "msg": {
                    "value": "Stop output thread controller",
                    "possible_values": []
                }
            },
            "info_553": {
                "msg": {
                    "value": "Shutdown TPU system.",
                    "possible_values": []
                }
            },
            "SessionRunArgs_678": {
                "fetches": {
                    "value": "self._scalar_stopping_signal",
                    "possible_values": []
                }
            },
            "device_753": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "device_827": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "device_914": {
                "device_name": {
                    "value": "device_0",
                    "possible_values": [
                        [
                            "ctx.tpu_host_placement_function(host_id=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_1132": {
                "variable": {
                    "value": "unflattened_inputs",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._feature_structure",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "flattened_inputs",
                    "possible_values": [
                        [
                            "inputs_structure_recorder.flatten_features_and_labels(features, labels)",
                            "Call"
                        ],
                        [
                            "inputs_structure_recorder.flatten_features_and_labels(features, labels, signals)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs_structure_recorder.flatten_features_and_labels(features, labels, signals)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_1294": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_collection_1294": {
                "key": {
                    "value": "ops.GraphKeys.QUEUE_RUNNERS",
                    "possible_values": []
                }
            },
            "SessionRunArgs_1840": {
                "fetches": {
                    "value": "self._tensors",
                    "possible_values": []
                }
            },
            "Summary_1866": {
                "variable": {
                    "value": "global_step_summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[Summary.Value(tag='global_step/sec', simple_value=global_step_per_sec)]",
                    "possible_values": []
                }
            },
            "Summary_1869": {
                "variable": {
                    "value": "example_summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[Summary.Value(tag='examples/sec', simple_value=examples_per_sec)]",
                    "possible_values": []
                }
            },
            "info_1874": {
                "msg": {
                    "value": "global_step/sec: %g",
                    "possible_values": []
                },
                "*args": {
                    "value": "global_step_per_sec",
                    "possible_values": [
                        [
                            "elapsed_steps / elapsed_time",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_1875": {
                "msg": {
                    "value": "examples/sec: %g",
                    "possible_values": []
                },
                "*args": {
                    "value": "examples_per_sec",
                    "possible_values": [
                        [
                            "self._batch_size * global_step_per_sec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_2304": {
                "variable": {
                    "value": "tensors",
                    "possible_values": []
                },
                "structure": {
                    "value": "tensors_dict",
                    "possible_values": [
                        [
                            "collections.OrderedDict(((k, _export_output_to_tensors(v)) for (k, v) in six.iteritems(estimator_spec.export_outputs)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ClassificationOutput_2861": {
                "scores": {
                    "value": "*tensors",
                    "possible_values": []
                }
            },
            "repeat_2890": {
                "input": {
                    "value": "iterations_per_loop_var",
                    "possible_values": [
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "single_tpu_eval_step",
                    "possible_values": []
                },
                "axis": {
                    "value": "loop_vars",
                    "possible_values": [
                        [
                            "[_ZERO_LOSS]",
                            "List"
                        ],
                        [
                            "loop_vars + model_fn_wrapper._train_cache_fn(batch_size // num_shards)",
                            "BinOp"
                        ],
                        [
                            "[_INITIAL_LOSS]",
                            "List"
                        ]
                    ]
                }
            },
            "repeat_2922": {
                "input": {
                    "value": "iterations_per_loop_var",
                    "possible_values": [
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "single_tpu_train_step",
                    "possible_values": []
                },
                "axis": {
                    "value": "loop_vars",
                    "possible_values": [
                        [
                            "[_ZERO_LOSS]",
                            "List"
                        ],
                        [
                            "loop_vars + model_fn_wrapper._train_cache_fn(batch_size // num_shards)",
                            "BinOp"
                        ],
                        [
                            "[_INITIAL_LOSS]",
                            "List"
                        ]
                    ]
                }
            },
            "device_2979": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "while_loop_2981": {
                "cond": {
                    "value": "lambda i: i < iterations",
                    "possible_values": []
                },
                "body": {
                    "value": "computation",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[constant_op.constant(0)]",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "logical_not_2991": {
                "x": {
                    "value": "_StopSignals.should_stop(scalar_stopping_signal)",
                    "possible_values": []
                }
            },
            "device_3003": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "while_loop_3004": {
                "cond": {
                    "value": "cond",
                    "possible_values": []
                },
                "body": {
                    "value": "computation",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[_StopSignals.NON_STOPPING_SIGNAL]",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_3319": {
                "variable": {
                    "value": "stopping",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "tensor.shape",
                            "Attribute"
                        ],
                        [
                            "self._tensor_shapes[name]",
                            "Subscript"
                        ],
                        [
                            "[self._batch_size, 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "self._tensor_dtypes[name]",
                            "Subscript"
                        ],
                        [
                            "dtypes.bool",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_3321": {
                "variable": {
                    "value": "stopping",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "tensor.shape",
                            "Attribute"
                        ],
                        [
                            "self._tensor_shapes[name]",
                            "Subscript"
                        ],
                        [
                            "[self._batch_size, 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "self._tensor_dtypes[name]",
                            "Subscript"
                        ],
                        [
                            "dtypes.bool",
                            "Attribute"
                        ]
                    ]
                }
            },
            "identity_3330": {
                "input": {
                    "value": "signals['stopping'][0][0]",
                    "possible_values": []
                }
            },
            "stack_3370": {
                "variable": {
                    "value": "padding",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0, missing_count]] + [[0, 0]] * (rank - 1)",
                    "possible_values": []
                }
            },
            "pad_3372": {
                "variable": {
                    "value": "padded_tensor",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "data_nest.flatten(obj)",
                            "Call"
                        ],
                        [
                            "tensor_list_or_dict",
                            "Name"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "array_ops.stack([[0, missing_count]] + [[0, 0]] * (rank - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_3396": {
                "variable": {
                    "value": "check_batch_size",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "ctx.global_batch_size",
                            "Attribute"
                        ],
                        [
                            "ctx.global_batch_size",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(padding_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tensor.shape[0]",
                    "possible_values": []
                }
            },
            "map_structure_3428": {
                "func": {
                    "value": "slice_fn",
                    "possible_values": []
                },
                "*structure": {
                    "value": "tensor_or_dict",
                    "possible_values": []
                }
            },
            "get_global_step_175": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "_TPU_ESTIMATOR",
                    "possible_values": [
                        [
                            "'custom_tpu_estimator'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "variable_scope.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "get_variable_178": {
                "name": {
                    "value": "_ITERATIONS_PER_LOOP_VAR",
                    "possible_values": [
                        [
                            "'iterations_per_loop'",
                            "Constant"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer()",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "collections": {
                    "value": "[collection_name, ops.GraphKeys.LOCAL_VARIABLES]",
                    "possible_values": []
                },
                "use_resource": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_op_210": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "debug_385": {
                "msg": {
                    "value": "%s read iterations %s",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._name",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "iterations",
                    "possible_values": [
                        [
                            "array_ops.identity(iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._queue.get(block=True)",
                            "Call"
                        ],
                        [
                            "run_context.session.run(self._iterations_per_loop_var)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ],
                        [
                            "self._next_iterations(global_step, self._last_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_465": {
                "msg": {
                    "value": "Infeed thread sleeping for %d seconds.",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._initial_infeed_sleep_secs",
                    "possible_values": []
                }
            },
            "info_468": {
                "msg": {
                    "value": "Infeed thread starting after sleep",
                    "possible_values": []
                }
            },
            "info_479": {
                "msg": {
                    "value": "Infeed thread finished, shutting down.",
                    "possible_values": []
                }
            },
            "info_488": {
                "msg": {
                    "value": "Outfeed thread finished, shutting down.",
                    "possible_values": []
                }
            },
            "error_497": {
                "msg": {
                    "value": "'Compilation failed: {}'.format(proto.status_error_message)",
                    "possible_values": []
                }
            },
            "info_500": {
                "msg": {
                    "value": "Compilation succeeded",
                    "possible_values": []
                }
            },
            "info_504": {
                "msg": {
                    "value": "Init TPU system",
                    "possible_values": []
                }
            },
            "info_510": {
                "msg": {
                    "value": "Initialized TPU in %d seconds",
                    "possible_values": []
                },
                "*args": {
                    "value": "time.time() - start",
                    "possible_values": []
                }
            },
            "info_516": {
                "msg": {
                    "value": "Compiling user program: this may take a while...",
                    "possible_values": []
                }
            },
            "OutOfRangeError_700": {
                "node_def": {
                    "value": "None",
                    "possible_values": []
                },
                "op": {
                    "value": "None",
                    "possible_values": []
                },
                "message": {
                    "value": "Stopped by stopping signal.",
                    "possible_values": []
                }
            },
            "device_786": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "device_853": {
                "device_name": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "flatten_1114": {
                "structure": {
                    "value": "self._feature_structure",
                    "possible_values": []
                }
            },
            "warning_1630": {
                "msg": {
                    "value": "EstimatorSpec.Scaffold is ignored by TPU train/eval. Please use TPUEstimatorSpec.",
                    "possible_values": []
                }
            },
            "device_1730": {
                "device_name": {
                    "value": "tpu.core(0)",
                    "possible_values": []
                }
            },
            "device_1789": {
                "device_name": {
                    "value": "self._ctx.tpu_host_placement_function(replica_id=0)",
                    "possible_values": []
                }
            },
            "get_default_graph_2572": {
                "variable": {
                    "value": "graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RegressionOutput_2866": {
                "value": {
                    "value": "*tensors",
                    "possible_values": []
                }
            },
            "logical_not_2948": {
                "x": {
                    "value": "_StopSignals.should_stop(scalar_stopping_signal)",
                    "possible_values": []
                }
            },
            "control_dependencies_2973": {
                "control_inputs": {
                    "value": "op_fn()",
                    "possible_values": []
                }
            },
            "control_dependencies_2998": {
                "control_inputs": {
                    "value": "execute_ops",
                    "possible_values": [
                        [
                            "return_value['ops']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_3216": {
                "variable": {
                    "value": "signals[padding_mask]",
                    "possible_values": []
                },
                "input": {
                    "value": "signals['padding_mask']",
                    "possible_values": []
                }
            },
            "logical_and_3338": {
                "x": {
                    "value": "scalar_stopping_signal",
                    "possible_values": [
                        [
                            "run_values.results",
                            "Attribute"
                        ],
                        [
                            "_StopSignals.as_scalar_stopping_signal(signals)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "_StopSignals.STOPPING_SIGNAL",
                    "possible_values": []
                }
            },
            "shape_3352": {
                "input": {
                    "value": "_PaddingSignals._find_any_tensor(features)",
                    "possible_values": []
                }
            },
            "control_dependencies_3363": {
                "control_inputs": {
                    "value": "[check_greater]",
                    "possible_values": []
                }
            },
            "map_structure_3377": {
                "func": {
                    "value": "pad_single_tensor",
                    "possible_values": []
                },
                "*structure": {
                    "value": "tensor_or_dict",
                    "possible_values": []
                }
            },
            "shape_3393": {
                "input": {
                    "value": "padding_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_PaddingSignals._padding_mask(real_batch_size, missing_count, batch_size)",
                            "Call"
                        ],
                        [
                            "signals['padding_mask']",
                            "Subscript"
                        ],
                        [
                            "array_ops.concat([array_ops.zeros((real_batch_size,), dtype=dtypes.int32), array_ops.ones((missing_count,), dtype=dtypes.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_3412": {
                "input_tensor": {
                    "value": "sliced_padding_mask",
                    "possible_values": [
                        [
                            "slice_single_tensor(padding_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_3414": {
                "control_inputs": {
                    "value": "[assert_padding_mask]",
                    "possible_values": []
                }
            },
            "reduce_sum_3418": {
                "input_tensor": {
                    "value": "padding_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_PaddingSignals._padding_mask(real_batch_size, missing_count, batch_size)",
                            "Call"
                        ],
                        [
                            "signals['padding_mask']",
                            "Subscript"
                        ],
                        [
                            "array_ops.concat([array_ops.zeros((real_batch_size,), dtype=dtypes.int32), array_ops.ones((missing_count,), dtype=dtypes.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_3423": {
                "pred": {
                    "value": "math_ops.logical_or(should_stop, is_full_batch)",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : verify_batch_size(tensor)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : slice_single_tensor(tensor)",
                    "possible_values": []
                }
            },
            "zeros_initializer_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "check_numerics_205": {
                "tensor": {
                    "value": "v.read_value()",
                    "possible_values": []
                },
                "message": {
                    "value": "'Gradient for %s is NaN' % v.name",
                    "possible_values": []
                }
            },
            "trainable_variables_207": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_default_graph_342": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_387": {
                "msg": {
                    "value": "%s received shutdown signal, stopping.",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._name",
                    "possible_values": []
                }
            },
            "shutdown_system_451": {
                "job": {
                    "value": "self._master_job",
                    "possible_values": []
                }
            },
            "flush_460": {
                "writer": {
                    "value": "op.inputs[0]",
                    "possible_values": []
                }
            },
            "Graph_506": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RunOptions_513": {
                "timeout_in_ms": {
                    "value": "5 * 60 * 1000",
                    "possible_values": []
                }
            },
            "name_scope_714": {
                "name": {
                    "value": "'ordinal_%d' % core_ordinal",
                    "possible_values": []
                }
            },
            "device_950": {
                "device_name": {
                    "value": "ctx.tpu_host_placement_function(host_id=host_id)",
                    "possible_values": []
                }
            },
            "warn_1303": {
                "msg": {
                    "value": "err_msg",
                    "possible_values": [
                        [
                            "'Input pipeline contains one or more QueueRunners. It could be slow and not scalable. Please consider converting your input pipeline to use `tf.data` instead (see https://www.tensorflow.org/guide/datasets for instructions.'",
                            "Constant"
                        ],
                        [
                            "'{} returned by EstimatorSpec is not supported in TPUEstimator.'",
                            "Constant"
                        ]
                    ]
                }
            },
            "control_dependencies_1386": {
                "control_inputs": {
                    "value": "[train_op] + tracing_ops",
                    "possible_values": []
                }
            },
            "control_dependencies_1456": {
                "control_inputs": {
                    "value": "host_calls.create_enqueue_op()",
                    "possible_values": []
                }
            },
            "control_dependencies_1504": {
                "control_inputs": {
                    "value": "host_calls.create_enqueue_op()",
                    "possible_values": []
                }
            },
            "flatten_1553": {
                "structure": {
                    "value": "obj",
                    "possible_values": []
                }
            },
            "device_1769": {
                "device_name": {
                    "value": "host_device",
                    "possible_values": [
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=0)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1799": {
                "variable": {
                    "value": "dequeue_ops[i]",
                    "possible_values": []
                },
                "values": {
                    "value": "dequeue_ops[i]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "flush_1834": {
                "writer": {
                    "value": "op.inputs[0]",
                    "possible_values": []
                }
            },
            "group_2661": {
                "variable": {
                    "value": "train_op",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "possible_values": []
                }
            },
            "div_2676": {
                "variable": {
                    "value": "mean_loss",
                    "possible_values": []
                },
                "x": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.cast(iterations_per_loop_var, dtype=total_loss.dtype)",
                    "possible_values": []
                }
            },
            "EstimatorSpec_2807": {
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "_REWRITE_FOR_INFERENCE_MODE",
                            "Name"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "Attribute"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "MethodArgument"
                        ]
                    ]
                },
                "prediction_hooks": {
                    "value": "hooks",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[_OutfeedHostCallHook(host_call_ret['host_call'])]",
                            "List"
                        ],
                        [
                            "tuple(hooks or [])",
                            "Call"
                        ],
                        [
                            "[_OutfeedHostCallHook(tracing_functions)]",
                            "List"
                        ],
                        [
                            "input_hooks + shutdown_hooks",
                            "BinOp"
                        ],
                        [
                            "[TPUInfeedOutfeedSessionHook(ctx, enqueue_ops, eval_update_ops + host_ops, tpu_compile_op=compile_op, run_infeed_loop_on_coordinator=run_infeed_loop_on_coordinator, rendezvous=self._rendezvous[mode], master=self._config.evaluation_master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "[_StoppingPredictHook(scalar_stopping_signal), TPUInfeedOutfeedSessionHookForPrediction(ctx, enqueue_ops, host_ops, rendezvous=self._rendezvous[mode], tpu_compile_op=compile_op, master=self._config.master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "host_call_ret['predictions']",
                            "Subscript"
                        ],
                        [
                            "_PaddingSignals.slice_tensor_or_dict(predictions, signals)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "scaffold",
                    "possible_values": [
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "scaffold_fn()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.scaffold_fn() if self.scaffold_fn else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "PredictOutput_2868": {
                "outputs": {
                    "value": "dict(zip(export_output.outputs.keys(), tensors))",
                    "possible_values": []
                }
            },
            "constant_2983": {
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "control_dependencies_3397": {
                "control_inputs": {
                    "value": "[check_batch_size]",
                    "possible_values": []
                }
            },
            "identity_3398": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "data_nest.flatten(obj)",
                            "Call"
                        ],
                        [
                            "tensor_list_or_dict",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_3403": {
                "input_tensor": {
                    "value": "padding_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_PaddingSignals._padding_mask(real_batch_size, missing_count, batch_size)",
                            "Call"
                        ],
                        [
                            "signals['padding_mask']",
                            "Subscript"
                        ],
                        [
                            "array_ops.concat([array_ops.zeros((real_batch_size,), dtype=dtypes.int32), array_ops.ones((missing_count,), dtype=dtypes.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_or_3424": {
                "x": {
                    "value": "should_stop",
                    "possible_values": [
                        [
                            "_StopSignals.should_stop(_StopSignals.as_scalar_stopping_signal(signals))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "is_full_batch",
                    "possible_values": [
                        [
                            "math_ops.equal(math_ops.reduce_sum(padding_mask), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_3433": {
                "structure": {
                    "value": "batch_features",
                    "possible_values": []
                }
            },
            "zeros_3442": {
                "shape": {
                    "value": "(real_batch_size,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "possible_values": []
                }
            },
            "ones_3443": {
                "shape": {
                    "value": "(missing_count,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "possible_values": []
                }
            },
            "zeros_initializer_180": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "debug_486": {
                "msg": {
                    "value": "Outfeed dequeue for iteration (%d, %d)",
                    "possible_values": []
                },
                "*args": {
                    "value": "count",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "i",
                    "possible_values": [
                        [
                            "xrange(steps)",
                            "Call"
                        ],
                        [
                            "xrange(steps)",
                            "Call"
                        ],
                        [
                            "xrange(self._ctx.num_replicas)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_507": {
                "target": {
                    "value": "self._master",
                    "possible_values": []
                },
                "config": {
                    "value": "self._session_config",
                    "possible_values": []
                }
            },
            "control_dependencies_858": {
                "control_inputs": {
                    "value": "control_deps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_1199": {
                "device_name": {
                    "value": "host_device",
                    "possible_values": [
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=0)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_1381": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "control_dependencies_1392": {
                "control_inputs": {
                    "value": "host_call_outfeed_ops",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "host_call.create_enqueue_op()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_2430": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "possible_values": []
                }
            },
            "info_2555": {
                "msg": {
                    "value": "Running %s on CPU",
                    "possible_values": []
                },
                "*args": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "_REWRITE_FOR_INFERENCE_MODE",
                            "Name"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "Attribute"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_2608": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "input": {
                    "value": "training.get_global_step()",
                    "possible_values": []
                }
            },
            "CheckpointSaverHook_2645": {
                "variable": {
                    "value": "checkpoint_hook",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.model_dir",
                    "possible_values": []
                },
                "save_secs": {
                    "value": "self._config.save_checkpoints_secs",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "self._config.save_checkpoints_steps",
                    "possible_values": []
                },
                "scaffold": {
                    "value": "scaffold",
                    "possible_values": [
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "scaffold_fn()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.scaffold_fn() if self.scaffold_fn else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_2654": {
                "name": {
                    "value": "model_fn_lib.LOSS_METRIC_KEY",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "tpu_estimator_spec.loss",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "EstimatorSpec_2664": {
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "_REWRITE_FOR_INFERENCE_MODE",
                            "Name"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "Attribute"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "MethodArgument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "tpu_estimator_spec.loss",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training_chief_hooks": {
                    "value": "chief_hooks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "training_hooks": {
                    "value": "hooks",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[_OutfeedHostCallHook(host_call_ret['host_call'])]",
                            "List"
                        ],
                        [
                            "tuple(hooks or [])",
                            "Call"
                        ],
                        [
                            "[_OutfeedHostCallHook(tracing_functions)]",
                            "List"
                        ],
                        [
                            "input_hooks + shutdown_hooks",
                            "BinOp"
                        ],
                        [
                            "[TPUInfeedOutfeedSessionHook(ctx, enqueue_ops, eval_update_ops + host_ops, tpu_compile_op=compile_op, run_infeed_loop_on_coordinator=run_infeed_loop_on_coordinator, rendezvous=self._rendezvous[mode], master=self._config.evaluation_master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "[_StoppingPredictHook(scalar_stopping_signal), TPUInfeedOutfeedSessionHookForPrediction(ctx, enqueue_ops, host_ops, rendezvous=self._rendezvous[mode], tpu_compile_op=compile_op, master=self._config.master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": [
                        [
                            "control_flow_ops.group(*update_ops)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "scaffold",
                    "possible_values": [
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "scaffold_fn()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.scaffold_fn() if self.scaffold_fn else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "EstimatorSpec_2732": {
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "_REWRITE_FOR_INFERENCE_MODE",
                            "Name"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "Attribute"
                        ],
                        [
                            "model_fn_lib.ModeKeys.PREDICT",
                            "MethodArgument"
                        ]
                    ]
                },
                "loss": {
                    "value": "mean_loss",
                    "possible_values": [
                        [
                            "math_ops.div(total_loss, math_ops.cast(iterations_per_loop_var, dtype=total_loss.dtype))",
                            "Call"
                        ],
                        [
                            "array_ops.identity(mean_loss)",
                            "Call"
                        ]
                    ]
                },
                "evaluation_hooks": {
                    "value": "hooks",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[_OutfeedHostCallHook(host_call_ret['host_call'])]",
                            "List"
                        ],
                        [
                            "tuple(hooks or [])",
                            "Call"
                        ],
                        [
                            "[_OutfeedHostCallHook(tracing_functions)]",
                            "List"
                        ],
                        [
                            "input_hooks + shutdown_hooks",
                            "BinOp"
                        ],
                        [
                            "[TPUInfeedOutfeedSessionHook(ctx, enqueue_ops, eval_update_ops + host_ops, tpu_compile_op=compile_op, run_infeed_loop_on_coordinator=run_infeed_loop_on_coordinator, rendezvous=self._rendezvous[mode], master=self._config.evaluation_master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "[_StoppingPredictHook(scalar_stopping_signal), TPUInfeedOutfeedSessionHookForPrediction(ctx, enqueue_ops, host_ops, rendezvous=self._rendezvous[mode], tpu_compile_op=compile_op, master=self._config.master, session_config=self._session_config)] + input_hooks",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "host_call_ret['eval_metrics']",
                            "Subscript"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "scaffold",
                    "possible_values": [
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "_get_scaffold(captured_scaffold_fn)",
                            "Call"
                        ],
                        [
                            "scaffold_fn()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.scaffold_fn() if self.scaffold_fn else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "control_dependencies_2745": {
                "control_inputs": {
                    "value": "[dummy_predict_op]",
                    "possible_values": []
                }
            },
            "no_op_2748": {
                "variable": {
                    "value": "dummy_predict_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "control_dependencies_2788": {
                "control_inputs": {
                    "value": "host_ops",
                    "possible_values": [
                        [
                            "host_call.create_tpu_hostcall()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "host_call_ret['host_call']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "host_call_ret['host_call']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "debug_474": {
                "msg": {
                    "value": "Infeed enqueue for iteration (%d, %d)",
                    "possible_values": []
                },
                "*args": {
                    "value": "count",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "i",
                    "possible_values": [
                        [
                            "xrange(steps)",
                            "Call"
                        ],
                        [
                            "xrange(steps)",
                            "Call"
                        ],
                        [
                            "xrange(self._ctx.num_replicas)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_system_509": {
                "job": {
                    "value": "self._master_job",
                    "possible_values": []
                }
            },
            "name_scope_1200": {
                "name": {
                    "value": "'input_pipeline_task%d' % host_id",
                    "possible_values": []
                }
            },
            "device_1237": {
                "device_name": {
                    "value": "host_device",
                    "possible_values": [
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=0)",
                            "Call"
                        ],
                        [
                            "tpu_host_placement_fn(host_id=host_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1457": {
                "x": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "y": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "tpu_estimator_spec.loss",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "warning_1687": {
                "msg": {
                    "value": "\"Exception while calling %s: %s. It is likely the tensors (%s[1]) do not match the function's arguments\"",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "possible_values": [
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "e",
                    "possible_values": []
                }
            },
            "control_dependencies_2607": {
                "control_inputs": {
                    "value": "[loss]",
                    "possible_values": []
                }
            },
            "control_dependencies_2655": {
                "control_inputs": {
                    "value": "[loss]",
                    "possible_values": []
                }
            },
            "cast_2678": {
                "x": {
                    "value": "iterations_per_loop_var",
                    "possible_values": [
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ],
                        [
                            "_create_or_get_iterations_per_loop()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "total_loss.dtype",
                    "possible_values": []
                }
            },
            "control_dependencies_2680": {
                "control_inputs": {
                    "value": "[mean_loss]",
                    "possible_values": []
                }
            },
            "no_op_2700": {
                "variable": {
                    "value": "dummy_update_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "identity_2710": {
                "variable": {
                    "value": "mean_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_loss",
                    "possible_values": [
                        [
                            "math_ops.div(total_loss, math_ops.cast(iterations_per_loop_var, dtype=total_loss.dtype))",
                            "Call"
                        ],
                        [
                            "array_ops.identity(mean_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_2747": {
                "control_inputs": {
                    "value": "internal_ops_to_run",
                    "possible_values": [
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ],
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1238": {
                "name": {
                    "value": "'input_pipeline_task%d' % host_id",
                    "possible_values": []
                }
            },
            "identity_1393": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "tpu_estimator_spec.loss",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "warning_1807": {
                "msg": {
                    "value": "\"Exception while calling %s: %s. It is likely the tensors (%s[1]) do not match the function's arguments\"",
                    "possible_values": []
                },
                "*args": {
                    "value": "name",
                    "possible_values": [
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "self._names",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "e",
                    "possible_values": []
                }
            },
            "get_global_step_2608": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_2630": {
                "tensors": {
                    "value": "{'loss': array_ops.identity(loss), 'step': global_step}",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "logging_hook_frequency",
                    "possible_values": [
                        [
                            "(self._log_every_n_steps + self._config.tpu_config.iterations_per_loop - 1) // self._config.tpu_config.iterations_per_loop",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_2699": {
                "control_inputs": {
                    "value": "internal_ops_to_run",
                    "possible_values": [
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ],
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_2709": {
                "control_inputs": {
                    "value": "internal_ops_to_run",
                    "possible_values": [
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ],
                        [
                            "_sync_variables_ops(ctx)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_2631": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "ret[0]",
                            "Subscript"
                        ],
                        [
                            "tpu_estimator_spec.loss",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "TPUEstimatorSpec_190": {
                "variable": {
                    "value": "train_spec",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": []
                },
                "host_call": {
                    "value": "host_call",
                    "possible_values": [
                        [
                            "function_builder.construct_scalar_host_call(monitor_dict=monitor_dict, model_dir=FLAGS.model_dir, prefix='train/', reduce_fn=tf.reduce_mean)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "possible_values": [
                        [
                            "model_utils.init_from_checkpoint(FLAGS, global_vars=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_249": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "info_255": {
                "msg": {
                    "value": "'n_token {}'.format(FLAGS.n_token)",
                    "possible_values": []
                }
            },
            "info_263": {
                "msg": {
                    "value": "'num of batches {}'.format(train_record_info_dict['num_batch'])",
                    "possible_values": []
                }
            },
            "info_171": {
                "msg": {
                    "value": "'#params: {}'.format(num_params)",
                    "possible_values": []
                }
            },
            "Exists_257": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_258": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mem_len, batch_size, FLAGS.d_model]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if FLAGS.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "trainable_variables_170": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train_gpu.py": {
        "tensorflow": {
            "get_global_step_259": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_270": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GPUOptions_272": {
                "variable": {
                    "value": "gpu_options",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "trainable_variables_146": {
                "variable": {
                    "value": "all_vars",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "grads",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "total_loss + loss_np",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "all_vars",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_204": {
                "msg": {
                    "value": "'num of batches {}'.format(record_info_dict['num_batch'])",
                    "possible_values": []
                }
            },
            "set_verbosity_315": {
                "level": {
                    "value": "tf.logging.INFO",
                    "possible_values": []
                }
            },
            "info_319": {
                "msg": {
                    "value": "'n_token {}'.format(FLAGS.n_token)",
                    "possible_values": []
                }
            },
            "run_328": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "info_142": {
                "msg": {
                    "value": "'#params: {}'.format(num_params)",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.mem_len, bsz_per_core, FLAGS.d_model]",
                    "possible_values": []
                }
            },
            "split_219": {
                "variable": {
                    "value": "vals",
                    "possible_values": []
                },
                "value": {
                    "value": "example[key]",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "FLAGS.num_core_per_host",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Session_276": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "possible_values": []
                }
            },
            "Exists_321": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                }
            },
            "MakeDirs_322": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "possible_values": []
                }
            },
            "device_230": {
                "device_name": {
                    "value": "assign_to_gpu(i, ps_device)",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "True if i > 0 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "add_n_250": {
                "inputs": {
                    "value": "tower_losses",
                    "possible_values": []
                }
            },
            "global_variables_initializer_278": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_variable_scope_231": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_276": {
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_297": {
                "msg": {
                    "value": "'[{}] | gnorm {:.2f} lr {:8.6f} | loss {:.2f} | pplx {:>7.2f}, bpc {:>7.4f}'.format(curr_step, fetched[-3], fetched[-2], curr_loss, math.exp(curr_loss), curr_loss / math.log(2))",
                    "possible_values": []
                }
            },
            "info_306": {
                "msg": {
                    "value": "'Model saved in path: {}'.format(save_path)",
                    "possible_values": []
                }
            },
            "trainable_variables_141": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "xlnet.py": {
        "tensorflow": {
            "Exists_75": {
                "filename": {
                    "value": "json_dir",
                    "possible_values": [
                        [
                            "os.path.dirname(json_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "MakeDirs_76": {
                "dirname": {
                    "value": "json_dir",
                    "possible_values": [
                        [
                            "os.path.dirname(json_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "model",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "model",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "possible_values": []
                }
            }
        }
    }
}