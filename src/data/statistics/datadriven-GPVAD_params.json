{
    "metrics.py": {
        "sklearn": {
            "roc_curve_190": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                }
            },
            "binarize_195": {
                "variable": {
                    "value": "speech_frame_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y_pred.reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "confusion_matrix_197": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "speech_frame_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binarize(y_pred.reshape(-1, 1), threshold=threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiLabelBinarizer_22": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_auc_score_176": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_180": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_184": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "confusion_matrix_206": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_56": {
                "variable": {
                    "value": "avg_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, 'macro', 'micro']",
                            "List"
                        ]
                    ]
                }
            },
            "precision_score_57": {
                "variable": {
                    "value": "avg_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, 'macro', 'micro']",
                            "List"
                        ]
                    ]
                }
            },
            "recall_score_58": {
                "variable": {
                    "value": "avg_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_ref'].values)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(matching['event_label_pred'].values)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, 'macro', 'micro']",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "sklearn": {
            "binarize_360": {
                "variable": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "decision.to('cpu')",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_36": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_265": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "next(Path(experiment_path).glob('run_config*'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_271": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "labelencoders/vad.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.EvalH5Dataset(data)",
                            "Call"
                        ],
                        [
                            "dataset.EvalH5Dataset(data, fnames=np.unique(label_df['filename'].values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_284": {
                "variable": {
                    "value": "model_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "experiment_path",
                            "variable"
                        ],
                        [
                            "next(Path(experiment_path).glob('run_model*'))",
                            "Call"
                        ],
                        [
                            "experiment_path",
                            "variable"
                        ],
                        [
                            "next(Path(experiment_path).glob('run_model*'))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "list(Path(experiment_path).glob('run_config*'))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_339": {
                "variable": {
                    "value": "model_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "list(Path(experiment_path).glob('run_model*'))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_342": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "labelencoders/vad.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_439": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "next(Path(experiment_path).glob('run_config*'))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_445": {
                "variable": {
                    "value": "model_parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "experiment_path",
                            "variable"
                        ],
                        [
                            "next(Path(experiment_path).glob('run_model*'))",
                            "Call"
                        ],
                        [
                            "experiment_path",
                            "variable"
                        ],
                        [
                            "next(Path(experiment_path).glob('run_model*'))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_447": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "labelencoders/vad.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_458": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.EvalH5Dataset(data)",
                            "Call"
                        ],
                        [
                            "dataset.EvalH5Dataset(data, fnames=np.unique(label_df['filename'].values))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_112": {
                "obj": {
                    "value": "config_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.parse_config_or_kwargs(config, **kwargs)",
                            "Call"
                        ],
                        [
                            "dict(config, **kwargs)",
                            "Call"
                        ],
                        [
                            "dict(config, **kwargs)",
                            "Call"
                        ],
                        [
                            "dict(config, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(outputdir, 'run_config.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "model_dump",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config_parameters['pretrained']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_166": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(models, config_parameters['model'], 'CRNN')(inputdim=trainloader.dataset.datadim, outputdim=2, **config_parameters['model_args'])",
                            "Call"
                        ],
                        [
                            "model.to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "getattr(models, config_parameters['model'])(inputdim=dataloader.dataset.datadim, outputdim=len(encoder.classes_), **config_parameters['model_args'])",
                            "Call"
                        ],
                        [
                            "model.to(DEVICE).eval()",
                            "Call"
                        ],
                        [
                            "getattr(models, config_parameters['model'])(inputdim=inputdim, outputdim=len(encoder.classes_), **config_parameters['model_args'])",
                            "Call"
                        ],
                        [
                            "model.to(DEVICE).eval()",
                            "Call"
                        ],
                        [
                            "getattr(models, config_parameters['model'])(inputdim=dataloader.dataset.datadim, outputdim=len(encoder.classes_), **config_parameters['model_args'])",
                            "Call"
                        ],
                        [
                            "model.to(DEVICE).eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_190": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "round_195": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.round(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_196": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.round(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_303": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_310": {
                "variable": {
                    "value": "prediction_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_time.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "int(time * rfac)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_310": {
                "variable": {
                    "value": "prediction_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_501": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_357": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample[()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_357": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "MultiLabelBinarizer_178": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_400": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "MultiLabelBinarizer_203": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binarize_289": {
                "X": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minmax_scale_417": {
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binarize(x, threshold=threshold)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minmax_scale_421": {
                "X": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binarize_287": {
                "X": {
                    "value": "sub",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Sequential_135": {
                "*args": {
                    "value": "*transforms",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "augment.py": {
        "torch": {
            "randn_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_16": {
                "variable": {
                    "value": "left_right",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 10)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, topad, value=self.value)",
                            "Call"
                        ],
                        [
                            "torch.roll(x, shift, dims=0)",
                            "Call"
                        ],
                        [
                            "x[start_ind:start_ind + self.size, :]",
                            "Subscript"
                        ],
                        [
                            "x + alpha * noise",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "topad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 0, *left_right)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_31": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 10)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, topad, value=self.value)",
                            "Call"
                        ],
                        [
                            "torch.roll(x, shift, dims=0)",
                            "Call"
                        ],
                        [
                            "x[start_ind:start_ind + self.size, :]",
                            "Subscript"
                        ],
                        [
                            "x + alpha * noise",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1).normal_(self.mean, self.std).int().item()",
                            "Call"
                        ],
                        [
                            "4000",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_48": {
                "variable": {
                    "value": "start_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_96": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 10)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, topad, value=self.value)",
                            "Call"
                        ],
                        [
                            "torch.roll(x, shift, dims=0)",
                            "Call"
                        ],
                        [
                            "x[start_ind:start_ind + self.size, :]",
                            "Subscript"
                        ],
                        [
                            "x + alpha * noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_133": {
                "variable": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_63": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "t0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_81": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_118": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "[channels, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_120": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time - self.shift",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/prepare_labels.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HDF5Dataset(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_40": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pd.read_csv(args.data, sep='\\\\s+')",
                            "Call"
                        ],
                        [
                            "data['hdf5path'].unique()",
                            "Call"
                        ],
                        [
                            "args.data",
                            "Attribute"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "self.dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "encoders/balanced.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "encoders/balanced_binary.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset.py": {
        "torch": {
            "full_285": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_dim, max_len, data_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "padding_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_299": {
                "variable": {
                    "value": "targets_clip",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(targets_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "target_clip",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(noise_clip_target, speech_clip_target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_83": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.df_to_dict(data_df)",
                            "Call"
                        ],
                        [
                            "self._datasetcache[h5file][f'{fname}'][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self.dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self._dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "np.concatenate(self.data_source[random_indices])[:self.data_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "target_time",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack((noise_target, speech_target), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "target_clip",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(noise_clip_target, speech_clip_target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_126": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.df_to_dict(data_df)",
                            "Call"
                        ],
                        [
                            "self._datasetcache[h5file][f'{fname}'][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self.dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self._dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "np.concatenate(self.data_source[random_indices])[:self.data_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_127": {
                "variable": {
                    "value": "target_time",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack((noise_target, speech_target), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_161": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.df_to_dict(data_df)",
                            "Call"
                        ],
                        [
                            "self._datasetcache[h5file][f'{fname}'][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self.dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "self._transform(data)",
                            "Call"
                        ],
                        [
                            "self._dataset[fname][()]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ],
                        [
                            "np.concatenate(self.data_source[random_indices])[:self.data_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_244": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainHDF5Dataset(h5files, h5labels, label_type=label_type, transform=transform)",
                            "Call"
                        ],
                        [
                            "HDF5Dataset(h5file, h5label, fnames, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "sequential_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainHDF5Dataset(h5files, h5labels, label_type=label_type, transform=transform)",
                            "Call"
                        ],
                        [
                            "HDF5Dataset(h5file, h5label, fnames, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "sequential_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(f) for f in tensorlist]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "multinomial_253": {
                "input": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self._len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self._replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "forward.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "str"
                        ],
                        [
                            "'cuda'",
                            "str"
                        ],
                        [
                            "torch.device(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "dloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OnlineLogMelDataset(wavlist, **LMS_ARGS)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_dir / model_kwargs_pack['encoder']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_199": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(feature).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "sigmoid_73": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(batch, time, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(batch, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "tar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_13": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_27": {
                "variable": {
                    "value": "self.cliploss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_46": {
                "input": {
                    "value": "clip_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "tar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(batch, dim).random_(2)",
                            "Call"
                        ],
                        [
                            "tar * (1 - self.label_smoothing) + (1 - tar) * self.label_smoothing / (n_classes - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_73": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_74": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_16": {
                "input": {
                    "value": "frame_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "tar_time",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'balanced.pth'",
                            "Method Argument"
                        ],
                        [
                            "'balanced.pth'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'balanced.pth'",
                            "Method Argument"
                        ],
                        [
                            "'balanced.pth'",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_94": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.pooldim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(cin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block2D(1, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_142": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.outputlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_160": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputlayer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_160": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block2D(1, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.outputlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputlayer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_204": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block2D(1, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_239": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.outputlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._hiddim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "527",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_257": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputlayer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_257": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_65": {
                "input": {
                    "value": "decision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.temp_pool(x, decision_time).clamp(1e-07, 1.0).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.temp_pool(x, decision_time).clamp(1e-07, 1.0).squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.temp_pool(x, decision_time).clamp(1e-07, 1.0).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.pooldim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_162": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decision_time.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_207": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decision_time.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_207": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_260": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decision_time.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "decision_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "num_features": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LPPool2d_128": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_131": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_134": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LPPool2d_177": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_180": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_183": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_186": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_188": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_222": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_225": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_228": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LPPool2d_231": {
                "norm_type": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_233": {
                "output_size": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_138": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_236": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pprint_results.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "root_dir / 'run_config.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}