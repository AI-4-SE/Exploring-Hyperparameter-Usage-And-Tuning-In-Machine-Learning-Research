{
    "utils/logger.py": {
        "tensorflow": {
            "FileWriter_7": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "possible_values": []
                }
            },
            "Summary_11": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "possible_values": []
                }
            },
            "Summary_16": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value) for (tag, value) in tag_value_pairs]",
                    "possible_values": []
                }
            }
        }
    },
    "augmentations.py": {
        "torch": {
            "flip_7": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "torch.flip(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "Tensor_105": {
                "variable": {
                    "value": "objs",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(boxes)",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "possible_values": []
                }
            },
            "Tensor_164": {
                "variable": {
                    "value": "targets[:, 1:]",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7, 7, 30)",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "cls",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(objs), 20)",
                    "possible_values": []
                }
            },
            "Tensor_120": {
                "variable": {
                    "value": "x_list",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "y_list",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "w_list",
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "h_list",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "x_index",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "y_index",
                    "possible_values": []
                }
            },
            "Tensor_126": {
                "variable": {
                    "value": "x_new",
                    "possible_values": []
                }
            },
            "Tensor_127": {
                "variable": {
                    "value": "y_new",
                    "possible_values": []
                }
            },
            "Tensor_128": {
                "variable": {
                    "value": "del_x",
                    "possible_values": []
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "del_y",
                    "possible_values": []
                }
            },
            "ones_143": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(objs)",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "bb_block",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(del_x.view(-1, 1), del_y.view(-1, 1), w_list.view(-1, 1), h_list.view(-1, 1), c.view(-1, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "final_bb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bb_block, cls)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "pad_23": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "F.pad(img, pad, 'constant', value=pad_value)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(Image.open(img_path))",
                            "Call"
                        ],
                        [
                            "resize(img, self.img_size)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(Image.open(img_path).convert('RGB'))",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.expand((3, img.shape[1:]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "(0, 0, pad1, pad2) if h <= w else (pad1, pad2, 0, 0)",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image.unsqueeze(0)",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "F.interpolate(images, size=new_size, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "possible_values": [
                        [
                            "random.sample(list(range(min_size, max_size + 1, 32)), 1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((len(boxes), 6))",
                            "Call"
                        ],
                        [
                            "[boxes for boxes in targets if boxes is not None]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "imgs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[resize(img, self.img_size) for img in imgs]",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(label_path).reshape(-1, 5)",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(boxes), 6)",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "module_list",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "modules",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(prediction[..., 0])",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([layer_outputs[int(layer_i)] for layer_i in module_def['layers'].split(',')], 1)",
                            "Call"
                        ],
                        [
                            "layer_outputs[-1] + layer_outputs[layer_i]",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "possible_values": []
                }
            },
            "MSELoss_116": {
                "variable": {
                    "value": "self.mse_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_117": {
                "variable": {
                    "value": "self.bce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "self.grid_x",
                    "possible_values": []
                },
                "start": {
                    "value": "g",
                    "possible_values": [
                        [
                            "self.grid_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_131": {
                "variable": {
                    "value": "self.grid_y",
                    "possible_values": []
                },
                "start": {
                    "value": "g",
                    "possible_values": [
                        [
                            "self.grid_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "t_131": {
                "variable": {
                    "value": "self.grid_y",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 0]",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 1]",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "pred_conf",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 4]",
                    "possible_values": []
                }
            },
            "sigmoid_159": {
                "variable": {
                    "value": "pred_cls",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 5:]",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes.view(num_samples, -1, 4) * self.stride, pred_conf.view(num_samples, -1, 1), pred_cls.view(num_samples, -1, self.num_classes))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "int(module_def['size'])",
                            "Call"
                        ],
                        [
                            "int(module_def['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "int(module_def['stride'])",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "int((kernel_size - 1) // 2)",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "w.data",
                    "possible_values": []
                }
            },
            "exp_170": {
                "input": {
                    "value": "h.data",
                    "possible_values": []
                }
            },
            "cat_266": {
                "tensors": {
                    "value": "yolo_outputs",
                    "possible_values": [
                        [
                            "to_cpu(torch.cat(yolo_outputs, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "variable": {
                    "value": "conv_w",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_w]",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "output_filters[-1]",
                    "possible_values": [
                        [
                            "[int(hyperparams['channels'])]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "int(module_def['filters'])",
                            "Call"
                        ],
                        [
                            "sum([output_filters[1:][i] for i in layers])",
                            "Call"
                        ],
                        [
                            "output_filters[1:][int(module_def['from'])]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "int(module_def['size'])",
                            "Call"
                        ],
                        [
                            "int(module_def['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "int(module_def['stride'])",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "not bn",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "iou50 * detected_mask",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "iou50 * detected_mask",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "iou75 * detected_mask",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[layer_outputs[int(layer_i)] for layer_i in module_def['layers'].split(',')]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "bn_b",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "possible_values": []
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "bn_w",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "bn_rm",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "bn_rv",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "conv_b",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights[ptr:ptr + num_b]",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "int(module_def['filters'])",
                            "Call"
                        ],
                        [
                            "sum([output_filters[1:][i] for i in layers])",
                            "Call"
                        ],
                        [
                            "output_filters[1:][int(module_def['from'])]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "ZeroPad2d_52": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "nntools.py": {
        "torch": {
            "DataLoader_146": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.net.device",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "self.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "self.checkpoint_path",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dataset",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "possible_values": []
                }
            },
            "device_75": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "opt.weights_path",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "max_216": {
                "variable": {
                    "value": "inter_rect_x1",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x1",
                    "possible_values": []
                }
            },
            "max_217": {
                "variable": {
                    "value": "inter_rect_y1",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y1",
                    "possible_values": []
                }
            },
            "min_218": {
                "variable": {
                    "value": "inter_rect_x2",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_x2",
                    "possible_values": []
                }
            },
            "min_219": {
                "variable": {
                    "value": "inter_rect_y2",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_y2",
                    "possible_values": []
                }
            },
            "stack_302": {
                "variable": {
                    "value": "ious",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_wh_iou(anchor, gwh) for anchor in anchors]",
                    "possible_values": []
                }
            },
            "log_321": {
                "variable": {
                    "value": "tw[b, best_n, gj, gi]",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / anchors[best_n][:, 0] + 1e-16",
                    "possible_values": []
                }
            },
            "log_322": {
                "variable": {
                    "value": "th[b, best_n, gj, gi]",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / anchors[best_n][:, 1] + 1e-16",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "detections",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred[:, :5], class_confs.float(), class_preds.float())",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_195": {
                "input": {
                    "value": "h1",
                    "possible_values": []
                }
            },
            "clamp_221": {
                "input": {
                    "value": "inter_rect_y2 - inter_rect_y1 + 1",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_269": {
                "variable": {
                    "value": "output[image_i]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keep_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "keep_boxes + [detections[0]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "flip_7": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "torch.flip(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {
            "pad_23": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "F.pad(img, pad, 'constant', value=pad_value)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(Image.open(img_path))",
                            "Call"
                        ],
                        [
                            "resize(img, self.img_size)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(Image.open(img_path).convert('RGB'))",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "img.expand((3, img.shape[1:]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "(0, 0, pad1, pad2) if h <= w else (pad1, pad2, 0, 0)",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image.unsqueeze(0)",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "F.interpolate(images, size=new_size, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "possible_values": [
                        [
                            "random.sample(list(range(min_size, max_size + 1, 32)), 1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((len(boxes), 6))",
                            "Call"
                        ],
                        [
                            "[boxes for boxes in targets if boxes is not None]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "imgs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[resize(img, self.img_size) for img in imgs]",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "boxes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(label_path).reshape(-1, 5)",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(boxes), 6)",
                    "possible_values": []
                }
            }
        }
    }
}