{
    "tagging/evaluate_tag.py": {
        "sklearn": {
            "precision_recall_curve_24": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "pred[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "precision_recall_curve_36": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "pred[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "msrvtt/train_model.py": {
        "tensorflow": {
            "get_or_create_global_step_62": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_63": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0004",
                    "type": "Constant",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20350",
                    "type": "Constant",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.316",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(0.0004, global_step, 20350, 0.316, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_70": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_integer_230": {
                "name": {
                    "value": "argmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "1 for argmax and 0 for multinomial sample",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_232": {
                "name": {
                    "value": "name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "name of model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_233": {
                "name": {
                    "value": "corpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the corpus file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_234": {
                "name": {
                    "value": "reseco",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the ResNeXt ECO file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_235": {
                "name": {
                    "value": "tag",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the tag file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_236": {
                "name": {
                    "value": "ref",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the reference file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_237": {
                "name": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the saved parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "msvd/train_model.py": {
        "tensorflow": {
            "get_or_create_global_step_69": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0004",
                            "Constant"
                        ]
                    ]
                }
            },
            "Saver_74": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_77": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_79": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_integer_248": {
                "name": {
                    "value": "argmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "1 for argmax and 0 for multinomial sample",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_250": {
                "name": {
                    "value": "name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "name of model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_251": {
                "name": {
                    "value": "corpus",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to corpus file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_252": {
                "name": {
                    "value": "ecores",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to ECO-RES feature files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_253": {
                "name": {
                    "value": "tag",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to Tag feature files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_254": {
                "name": {
                    "value": "ref",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to reference files",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_255": {
                "name": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the saved parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scn.py": {
        "tensorflow": {
            "ConfigProto_386": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_42": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "words_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "words_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "words_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_lookup(self.embeddings, self.words)",
                            "Call"
                        ],
                        [
                            "dropout(words_embed, self.keep_prob, (1, batch_size, n_x))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "(1, batch_size, n_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "vid_feat_proj",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "matmul(self.z, self.c0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "state_below",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[vid_feat_proj, words_embed[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "self.h_list_reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "logits_reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, batch_size, n_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "self.sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reshape(self.logits, [-1, batch_size, n_v])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_95": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_reshaped + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "weighted_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mask / tf.reduce_sum(self.mask, 0, keepdims=True) ** 0.7",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "test_h_list",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test_h_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._test_layer(matmul(self.z, self.c0))",
                            "Call"
                        ],
                        [
                            "reshape(test_h_list, (-1, n_h))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "test_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul(test_h_list, self.output_w) + self.bhid",
                            "BinOp"
                        ],
                        [
                            "reshape(test_logits, (-1, batch_size, n_v))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, batch_size, n_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_105": {
                "variable": {
                    "value": "self.test_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "test_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul(test_h_list, self.output_w) + self.bhid",
                            "BinOp"
                        ],
                        [
                            "reshape(test_logits, (-1, batch_size, n_v))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "tmp2_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "tmp2_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "tmp2_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "tmp2_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "tmp3_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "tmp3_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "tmp3_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "tmp3_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "tmp4_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "tmp4_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "tmp4_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "tmp4_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_190": {
                "variable": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_194": {
                "variable": {
                    "value": "(h_list, c_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_step",
                    "type": "Name",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[state_below, steps]",
                            "List"
                        ],
                        [
                            "[steps]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(tf.zeros([batch_size, n_h]), tf.zeros([batch_size, n_h]))",
                            "Tuple"
                        ],
                        [
                            "(tf.zeros([batch_size, n_h]), tf.zeros([batch_size, n_h]))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "dropout_195": {
                "variable": {
                    "value": "h_list",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(model.h_list, feed_dict={model.words: words, model.y: y, model.z1: z1, model.z2: z2, model.mask: mask, model.batch_size: batch_size, model.sample_prob: 0.5, model.keep_prob: 0.5, model.n_steps: options['n_steps']})",
                            "Call"
                        ],
                        [
                            "dropout(h_list, self.keep_prob, [1, batch_size, n_h])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "[1, batch_size, n_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_207": {
                "variable": {
                    "value": "tmp2_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "tmp2_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "tmp2_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "variable": {
                    "value": "tmp2_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wb_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "tmp3_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "tmp3_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "tmp3_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "variable": {
                    "value": "tmp3_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Ca_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_217": {
                "variable": {
                    "value": "tmp4_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_218": {
                "variable": {
                    "value": "tmp4_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_219": {
                "variable": {
                    "value": "tmp4_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "tmp4_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Cb_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_274": {
                "variable": {
                    "value": "steps",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_278": {
                "variable": {
                    "value": "(h_list, c_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_step",
                    "type": "Name",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[state_below, steps]",
                            "List"
                        ],
                        [
                            "[steps]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(tf.zeros([batch_size, n_h]), tf.zeros([batch_size, n_h]))",
                            "Tuple"
                        ],
                        [
                            "(tf.zeros([batch_size, n_h]), tf.zeros([batch_size, n_h]))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "get_collection_406": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "SCN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "word",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_y]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tag_feats",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "eco_res_feats",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.sample_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_prob",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "self.if_argmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "bool(options['flags'].argmax)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "if_argmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.options['embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "self.whid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "whid",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_x, n_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "self.bhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bhid",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "matmul(self.embeddings, self.whid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "C0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_z, n_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_153": {
                "variable": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "(tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : word_embed1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _get_word_embed(a[0])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "tmp1_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "tmp1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "tmp1_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "tmp1_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_179": {
                "variable": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_i, self.Ub_i, self.Uc_i, input_i)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_i, self.Ub_i, self.Uc_i, input_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_180": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_f, self.Ub_f, self.Uc_f, input_f)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_f, self.Ub_f, self.Uc_f, input_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_181": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_o, self.Ub_o, self.Uc_o, input_o)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_o, self.Ub_o, self.Uc_o, input_o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_182": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_c, self.Ub_c, self.Uc_c, input_c)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_c, self.Ub_c, self.Uc_c, input_c)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_239": {
                "variable": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(step, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : vid_embed",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _get_word_embed(a[0])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "variable": {
                    "value": "tmp1_i",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "tmp1_f",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "tmp1_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_248": {
                "variable": {
                    "value": "tmp1_c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond((tf.random_uniform([]) >= self.sample_prob) | tf.equal(step, 0), lambda : word_embed1, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : vid_embed, lambda : _get_word_embed(a[0]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(word_embed, (-1, n_x))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wa_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_264": {
                "variable": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_i, self.Ub_i, self.Uc_i, input_i)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_i, self.Ub_i, self.Uc_i, input_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_265": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_f, self.Ub_f, self.Uc_f, input_f)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_f, self.Ub_f, self.Uc_f, input_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_266": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_o, self.Ub_o, self.Uc_o, input_o)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_o, self.Ub_o, self.Uc_o, input_o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_267": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "preact_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_preactivate(a[0], y, self.Ua_c, self.Ub_c, self.Uc_c, input_c)",
                            "Call"
                        ],
                        [
                            "_preactivate(a[0], y, self.Ua_c, self.Ub_c, self.Uc_c, input_c)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_340": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['SCN', tf.GraphKeys.LOCAL_VARIABLES, tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_347": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "['SCN', tf.GraphKeys.LOCAL_VARIABLES, tf.GraphKeys.GLOBAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_388": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "model.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "scn",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_44": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_73": {
                "input": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_75": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "self.h_list_reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_99": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "23",
                            "Constant"
                        ],
                        [
                            "tf.shape(self.y)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(state_below)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(y)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "a": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.c0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "a": {
                    "value": "test_h_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._test_layer(matmul(self.z, self.c0))",
                            "Call"
                        ],
                        [
                            "reshape(test_h_list, (-1, n_h))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "word_chosen1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "word_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ],
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_147": {
                "variable": {
                    "value": "word_chosen2",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "word_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ],
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "word_chosen2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "word_chosen2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multinomial(word_logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(word_chosen2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_149": {
                "variable": {
                    "value": "word_chosen",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.if_argmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : word_chosen1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : word_chosen2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_189": {
                "input": {
                    "value": "state_below",
                    "type": "Name",
                    "possible_values": [
                        [
                            "concat([vid_feat_proj, words_embed[:-1]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "state_below",
                    "type": "Name",
                    "possible_values": [
                        [
                            "concat([vid_feat_proj, words_embed[:-1]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "shape": {
                    "value": "[batch_size, n_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_236": {
                "variable": {
                    "value": "word_chosen",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "word_logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ],
                        [
                            "matmul(h, self.output_w) + self.bhid",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_277": {
                "shape": {
                    "value": "[batch_size, n_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.whid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_151": {
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "word_chosen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(self.if_argmax, lambda : word_chosen1, lambda : word_chosen2)",
                            "Call"
                        ],
                        [
                            "tf.argmax(word_logit, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_184": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(preact_c)",
                            "Call"
                        ],
                        [
                            "f * a[1] + i * c",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(preact_c)",
                            "Call"
                        ],
                        [
                            "f * a[1] + i * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "embedding_lookup_237": {
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "word_chosen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(self.if_argmax, lambda : word_chosen1, lambda : word_chosen2)",
                            "Call"
                        ],
                        [
                            "tf.argmax(word_logit, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_239": {
                "x": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_269": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(preact_c)",
                            "Call"
                        ],
                        [
                            "f * a[1] + i * c",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(preact_c)",
                            "Call"
                        ],
                        [
                            "f * a[1] + i * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "a": {
                    "value": "tmp3 * tmp4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "Cc",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_153": {
                "x": {
                    "value": "step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "a": {
                    "value": "tmp3 * tmp4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "Cc",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, options['n_y'])",
                            "Call"
                        ],
                        [
                            "dropout(self.y, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/MSR-VTT/generate_res_feature.py": {
        "tensorflow": {
            "placeholder_69": {
                "variable": {
                    "value": "inputx",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "input path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "output path",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/MSR-VTT/prepare_frames.py": {
        "tensorflow": {}
    },
    "scripts/MSVD/generate_res_feature.py": {
        "tensorflow": {
            "placeholder_62": {
                "variable": {
                    "value": "inputx",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_65": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_67": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tagging/tag_net.py": {
        "tensorflow": {
            "Graph_26": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "self.Wy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wy1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_z, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.by1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "by1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.Wy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wy2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.by2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "by2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "self.Wy3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wy3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512, n_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "glorot_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "self.by3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "by3",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(z, self.Wy1) + self.by1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(z, self.Wy1) + self.by1)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h, self.Wy2) + self.by2)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h, self.Wy2) + self.by2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(z, self.Wy1) + self.by1)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h, self.Wy2) + self.by2)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h, self.Wy3) + self.by3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(cost, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "self.tmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "self.acc_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.tmp, self.pred_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.acc_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-self.y * tf.log(self.pred + 1e-06) - (1.0 - self.y) * tf.log(1.0 - self.pred + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_51": {
                "x": {
                    "value": "self.tmp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dropout(self.z, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wy1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(z, self.Wy1) + self.by1)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h, self.Wy2) + self.by2)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wy2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(z, self.Wy1) + self.by1)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(h, self.Wy2) + self.by2)",
                            "Call"
                        ],
                        [
                            "dropout(h, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Wy3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_46": {
                "x": {
                    "value": "1.0 - self.pred + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tagging/test.py": {
        "tensorflow": {
            "ConfigProto_11": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_13": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "tagnet.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_14": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tagging/train_tag_net.py": {
        "tensorflow": {
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "graph": {
                    "value": "tag_net.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_40": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "Saver_43": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_126": {
                "name": {
                    "value": "msvd",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to MSVD features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_127": {
                "name": {
                    "value": "msvd_tag",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to MSVD tags",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_128": {
                "name": {
                    "value": "msrvtt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to MSRVTT features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_129": {
                "name": {
                    "value": "msrvtt_tag",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "path to MSRVTT tags",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}