{
    "jittor/data_generator.py": {
        "sklearn": {
            "NearestNeighbors_154": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_156": {
                "variable": {
                    "value": "nbrs_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_158": {
                "variable": {
                    "value": "nbrs_surface",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/data_generator.py": {
        "sklearn": {
            "NearestNeighbors_93": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_95": {
                "variable": {
                    "value": "nbrs_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_97": {
                "variable": {
                    "value": "nbrs_surface",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/dataset/training/main_generator.py": {
        "sklearn": {
            "NearestNeighbors_93": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_95": {
                "variable": {
                    "value": "nbrs_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_97": {
                "variable": {
                    "value": "nbrs_surface",
                    "type": "Variable",
                    "possible_values": []
                },
                "radius": {
                    "value": "voxel_size * (args.nn_size / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "metric": {
                    "value": "chebyshev",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "jittor/convert.py": {
        "torch": {
            "from_numpy_26": {
                "variable": {
                    "value": "pth_dict[wnew_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "enc_jt_weight[wkey]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "{'epoch': 300, 'model_state': pth_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "./encoder_300.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "dec_jt_weight[wkey]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dec_jt_weight[wkey]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "{'epoch': 300, 'model_state': dec_jt_weight}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "./model_300.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/dataset/production/icl_nuim.py": {
        "torch": {
            "from_numpy_65": {
                "ndarray": {
                    "value": "depth_data.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "rgb_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(str(rgb_img_path))",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(rgb_data, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rgb_data).cuda().float() / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/dataset/training/lif_dataset.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "lif_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lif_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lif_raw['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(lif_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_65": {
                "variable": {
                    "value": "sample_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lif_data[pos_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "random_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(half) * pos_tensor.shape[0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_66": {
                "variable": {
                    "value": "sample_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lif_data[~pos_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "random_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(half) * neg_tensor.shape[0]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample_pos, sample_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "lif_surface",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lif_surface",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lif_raw['surface']",
                            "Subscript"
                        ],
                        [
                            "lif_surface[np.random.choice(lif_surface.shape[0], size=self.num_surface_sample, replace=True), :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(lif_surface)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_63": {
                "*size": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.num_sample / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_64": {
                "*size": {
                    "value": "half",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.num_sample / 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/main.py": {
        "torch": {
            "logical_or_67": {
                "input": {
                    "value": "frame_data.depth < vis_param.args.depth_cut_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "frame_data.depth > vis_param.args.depth_cut_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_125": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_127": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/network/criterion.py": {
        "torch": {
            "Normal_38": {
                "variable": {
                    "value": "pd_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "pd_sdf.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "pd_sdf_std.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "zero_loss_branch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_69": {
                "variable": {
                    "value": "sdf_in_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.sum(gt_sdf.abs(), dim=-1, keepdim=True) > 1e-06",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_loss_branch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pd_sdf, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_70": {
                "variable": {
                    "value": "sdf_out_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.sum(gt_sdf.abs(), dim=-1, keepdim=True) > 1e-06",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "zero_loss_branch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pd_sdf, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.exp(-100.0 * torch.abs(pd_sdf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_71": {
                "variable": {
                    "value": "normal_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.sum(gt_sdf.abs(), dim=-1, keepdim=True) > 1e-06",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "1.0 - F.cosine_similarity(pd_sdf_grad, gt_normals, dim=-1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_loss_branch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pd_sdf, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_73": {
                "variable": {
                    "value": "eikonal_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pd_sdf_grad.norm(dim=-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "l2_size_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(latent_vecs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_20": {
                "variable": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.sum(gt_sdf.abs(), dim=-1, keepdim=True) > 1e-06",
                            "Compare"
                        ]
                    ]
                },
                "min": {
                    "value": "-args.clamping_distance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clamping_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "variable": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-args.clamping_distance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clamping_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "variable": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.sum(gt_sdf.abs(), dim=-1, keepdim=True) > 1e-06",
                            "Compare"
                        ]
                    ]
                },
                "min": {
                    "value": "-args.clamping_distance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clamping_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_36": {
                "variable": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-args.clamping_distance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clamping_distance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_61": {
                "outputs": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[coords]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(pd_sdf)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "gt_sdf.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "-100.0 * torch.abs(pd_sdf)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_88": {
                "input": {
                    "value": "latent_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_71": {
                "x1": {
                    "value": "pd_sdf_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(pd_sdf, [coords], grad_outputs=torch.ones_like(pd_sdf), create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "gt_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_sdf",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_70": {
                "input": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pd_sdf, -args.clamping_distance, args.clamping_distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_76": {
                "input": {
                    "value": "sdf_in_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(gt_sdf, pd_sdf, zero_loss_branch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/network/di_decoder.py": {
        "torch": {
            "Linear_47": {
                "variable": {
                    "value": "self.uncertainty_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "variable": {
                    "value": "self.th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.th(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, input], 1)",
                            "Call"
                        ],
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_prob, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_39": {
                "module": {
                    "value": "nn.Linear(dims[layer], out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "dims[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[layer + 1] - dims[0]",
                            "BinOp"
                        ],
                        [
                            "dims[layer + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LayerNorm_45": {
                "normalized_shape": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[layer + 1] - dims[0]",
                            "BinOp"
                        ],
                        [
                            "dims[layer + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "dims[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[layer + 1] - dims[0]",
                            "BinOp"
                        ],
                        [
                            "dims[layer + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_68": {
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.uncertainty_layer(x)",
                            "Call"
                        ],
                        [
                            "0.05 + 0.5 * F.softplus(std)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/network/di_encoder.py": {
        "torch": {
            "max_20": {
                "variable": {
                    "value": "(r, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/network/utility.py": {
        "torch": {
            "chunk_87": {
                "variable": {
                    "value": "network_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "network_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((latent_input, xyz_input), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(network_input, n_chunks)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "n_chunks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.ceil(network_input.size(0) / max_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_137": {
                "variable": {
                    "value": "overall_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "r ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_164": {
                "variable": {
                    "value": "shuffle_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sample_indexer.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "sample_indexer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_167": {
                "variable": {
                    "value": "(mapping, pinds, pcount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_indexer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_indexer[shuffle_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "floor_173": {
                "variable": {
                    "value": "packed_inds_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((n_batch, count), device=pcount.device) * pcount.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_175": {
                "variable": {
                    "value": "packed_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "packed_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pack_batch(pinds, n_batch, count * 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(packed_inds, 1, packed_inds_ind)",
                            "Call"
                        ],
                        [
                            "shuffle_inds[packed_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "packed_inds_ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(torch.rand((n_batch, count), device=pcount.device) * pcount.unsqueeze(-1)).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "network_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latent_input, xyz_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_180": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "packed_inds.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "Path(args.checkpoint).parent / f'encoder_{use_epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_173": {
                "*size": {
                    "value": "(n_batch, count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "pcount.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "head",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "head + network_output[0].size(0)",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "head + network_output[0].size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "network_output[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/network_trainer.py": {
        "torch": {
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_module.Model(args.code_length, **args.network_specs).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_module.Model(**args.encoder_specs, mode='train').cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "lif_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "lif_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ldata.LifCombinedDataset(*[ldata.LifDataset(**t, num_sample=args.samples_per_lif) for t in args.train_set])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': lr_schedules[0].get_learning_rate(0)}, {'params': encoder.parameters(), 'lr': lr_schedules[1].get_learning_rate(0)}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "all_lat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(lif_dataset), args.code_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "mean_latent_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(all_lat_vecs.detach(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_139": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdf_data[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(xyz, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_140": {
                "variable": {
                    "value": "sdf_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sdf_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdf_data[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(sdf_gt, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_148": {
                "variable": {
                    "value": "lat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lat_vecs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(surface_data)",
                            "Call"
                        ],
                        [
                            "lat_vecs.unsqueeze(1).repeat(1, args.samples_per_lif, 1).view(-1, lat_vecs.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.chunk(lat_vecs, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "net_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lat_vecs[i], xyz[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "net_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[surf_lat_vecs, surf_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_203": {
                "input": {
                    "value": "all_lat_vecs.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'model_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "{'epoch': epoch, 'optimizer_state': optimizer_all.state_dict(), 'latent_vec': all_lat_vecs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'training_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state': encoder.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'encoder_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/system/ext/__init__.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "_marching_cubes_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "marching_cubes",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[p('marching_cubes/mc.cpp'), p('marching_cubes/mc_interp_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "__COMPILE_VERBOSE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_22": {
                "variable": {
                    "value": "_imgproc_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imgproc",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[p('imgproc/imgproc.cu'), p('imgproc/imgproc.cpp'), p('imgproc/photometric.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "__COMPILE_VERBOSE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_33": {
                "variable": {
                    "value": "_indexing_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "indexing",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[p('indexing/indexing.cpp'), p('indexing/indexing.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "__COMPILE_VERBOSE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_40": {
                "variable": {
                    "value": "_pcproc_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pcproc",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[p('pcproc/pcproc.cpp'), p('pcproc/pcproc.cu'), p('pcproc/cuda_kdtree.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "__COMPILE_VERBOSE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/system/map.py": {
        "torch": {
            "Stream_56": {
                "variable": {
                    "value": "run_stream",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_vecs_unique]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "self.updated_vec_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "self.bound_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "args.bound_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "self.relative_network_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Stream_232": {
                "variable": {
                    "value": "self.meshing_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_283": {
                "variable": {
                    "value": "new_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_occupied",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "target_n_occupied",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_occupied + count",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "self.mesh_cache.updated_vec_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.mesh_cache.updated_vec_id, new_vec_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_308": {
                "variable": {
                    "value": "self.mesh_cache.updated_vec_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mesh_cache.updated_vec_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_407": {
                "variable": {
                    "value": "map_status",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.product(self.n_xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.short",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_556": {
                "variable": {
                    "value": "expanded_flatten_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(expanded_flatten_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_740": {
                "variable": {
                    "value": "blk_verts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "blk_verts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._unlinearize_id(occupied_flatten_id) * self.voxel_size + self.bound_min]",
                            "List"
                        ],
                        [
                            "torch.cat(blk_verts, dim=0).cpu().numpy().astype(float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "gt_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered_sdf[output_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "variable": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pd_sdf.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_249": {
                "variable": {
                    "value": "self.cold_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_269": {
                "variable": {
                    "value": "new_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_size, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "new_voxel_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "new_voxel_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_299": {
                "tensors": {
                    "value": "[idx // (self.n_xyz[1] * self.n_xyz[2]), idx // self.n_xyz[2] % self.n_xyz[1], idx % self.n_xyz[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_374": {
                "variable": {
                    "value": "(_, unq_inv, unq_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "surface_grid_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ceil(surface_xyz_normalized).long() - 1",
                            "BinOp"
                        ],
                        [
                            "self._linearize_id(surface_grid_id)",
                            "Call"
                        ],
                        [
                            "surface_grid_id[unq_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_383": {
                "variable": {
                    "value": "invalid_flatten_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surface_grid_id[invalid_surface_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "gathered_surface_xyzn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_surface_xyzn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_surface_xyzn)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_435": {
                "variable": {
                    "value": "gathered_surface_latent_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_surface_latent_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_surface_latent_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_437": {
                "variable": {
                    "value": "(surface_blatent_mapping, pinds, pcounts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered_surface_latent_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_surface_latent_inds)",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "l2_size_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(latent_vecs_unique, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "[t]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_204": {
                "*size": {
                    "value": "(1, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "self.cold_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ceil_368": {
                "input": {
                    "value": "surface_xyz_normalized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "surface_xyz_zeroed / self.voxel_size",
                            "BinOp"
                        ],
                        [
                            "surface_xyz_normalized[unq_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_394": {
                "variable": {
                    "value": "exp_indexer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.indexer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_409": {
                "input": {
                    "value": "self.voxel_obs_count < self.args.encoder_count_th",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "self.latent_vecs_pos >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "gathered_latent_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_latent_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_latent_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_492": {
                "variable": {
                    "value": "gathered_relative_xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_relative_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_relative_xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_493": {
                "variable": {
                    "value": "gathered_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gathered_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_sdf)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_495": {
                "variable": {
                    "value": "(latent_id_subset_uniques, latent_id_inv_mapping)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered_latent_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gathered_latent_inds)",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_556": {
                "tensors": {
                    "value": "expanded_flatten_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[base_flatten_id]",
                            "List"
                        ],
                        [
                            "torch.unique(torch.cat(expanded_flatten_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_634": {
                "variable": {
                    "value": "vec_id_batch_mapping[occupied_vec_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "occupied_vec_id.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_726": {
                "condition": {
                    "value": "self.indexer != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_69": {
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_94": {
                "loc": {
                    "value": "pd_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pd_sdf.squeeze(-1), -0.2, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "pd_std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pd_std.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "self.n_xyz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "np.product(self.n_xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_206": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_271": {
                "*size": {
                    "value": "(new_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_and_461": {
                "input": {
                    "value": "self.voxel_obs_count >= self.args.encoder_count_th",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "~self.voxel_optimized",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clone_511": {
                "variable": {
                    "value": "self.optimize_result_set.old_latent_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_vecs_unique",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.latent_vecs[latent_id_subset_uniques]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ceil_567": {
                "input": {
                    "value": "xyz_normalized.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_615": {
                "variable": {
                    "value": "updated_vec_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_occupied",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_658": {
                "variable": {
                    "value": "high_sdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "low_sdf.reshape(B, 1, low_resolution, low_resolution, low_resolution)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "size": {
                    "value": "(voxel_resolution, voxel_resolution, voxel_resolution)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_661": {
                "variable": {
                    "value": "high_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low_std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "low_std.reshape(B, 1, low_resolution, low_resolution, low_resolution)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "size": {
                    "value": "(voxel_resolution, voxel_resolution, voxel_resolution)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_667": {
                "variable": {
                    "value": "(high_valid_lifs, high_valid_sbs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "condition": {
                    "value": "high_sdf.abs() < 0.05",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_696": {
                "variable": {
                    "value": "vertices_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vertices.size(0), 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vertices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_769": {
                "condition": {
                    "value": "self.indexer != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_793": {
                "condition": {
                    "value": "self.indexer != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_803": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_71": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_98": {
                "input": {
                    "value": "latent_vecs_unique",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.latent_vecs[latent_id_subset_uniques]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_422": {
                "input": {
                    "value": "pruned_surface_xyz_normalized + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_430": {
                "tensors": {
                    "value": "[surface_relative_xyz[in_focus_obs_mask], pruned_surface_normal[in_focus_obs_mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_633": {
                "*size": {
                    "value": "(occupied_vec_id.max().item() + 1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_735": {
                "data": {
                    "value": "vert_offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, self.voxel_size], [0.0, self.voxel_size, 0.0], [0.0, self.voxel_size, self.voxel_size], [self.voxel_size, 0.0, 0.0], [self.voxel_size, 0.0, self.voxel_size], [self.voxel_size, self.voxel_size, 0.0], [self.voxel_size, self.voxel_size, self.voxel_size]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "blk_verts[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_735": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_476": {
                "input": {
                    "value": "pruned_surface_xyz_normalized + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_486": {
                "*size": {
                    "value": "cur_rel_xyz.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_rel_xyz.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_674": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/system/tracker.py": {
        "torch": {
            "floor_17": {
                "variable": {
                    "value": "ref_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(points - min_bound) / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_20": {
                "variable": {
                    "value": "(_, inv_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor((points - min_bound) / voxel_size).long()",
                            "Call"
                        ],
                        [
                            "ref_coord[:, 0] + ref_coord[:, 1] * n_x + ref_coord[:, 2] * n_x * n_y",
                            "BinOp"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "d1_intensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0_intensity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intensity_img.view(1, 1, d0_h, d0_w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(d1_h, d1_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "d1_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d0_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "depth_img.view(1, 1, d0_h, d0_w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(d1_h, d1_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "d2_intensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1_intensity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(d0_intensity, (d1_h, d1_w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(d2_h, d2_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "d2_depth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1_depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(d0_depth, (d1_h, d1_w), mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(d2_h, d2_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "cur_intensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "pc_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_depth[0].unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "pc_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sdf_args.subsample",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "pc_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "cur_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_rgb.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "pc_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sdf_args.subsample",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "cur_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "pc_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pc_data, torch.zeros((pc_data.size(0), pc_data.size(1), 1), device=pc_data.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_62": {
                "variable": {
                    "value": "x_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "Lt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "last_pose.q.rotation_matrix.astype(np.float32).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_198": {
                "variable": {
                    "value": "Lai",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dsdf_dpos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(cur_obs_sdf, [cur_obs_xyz], grad_outputs=torch.ones_like(cur_obs_sdf), retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "dsdf_dpos[cur_obs_valid_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Lt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(last_pose.q.rotation_matrix.astype(np.float32).T).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_199": {
                "variable": {
                    "value": "Lbi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_dxyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(cur_delta_pose @ obs_xyz)[cur_obs_valid_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "Lai",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(dsdf_dpos, Lt)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_200": {
                "variable": {
                    "value": "dsdf_dxi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Lai, Lbi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_294": {
                "variable": {
                    "value": "term_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nx,ny->xy",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "dsdf_dxi * term_weight.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "variable": {
                    "value": "new_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_error_func(new_pose, obs_xyz, need_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_15": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_16": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_101": {
                "input": {
                    "value": "pc_data[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_105": {
                "type": {
                    "value": "self.map.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_152": {
                "input": {
                    "value": "f_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_map[f_valid_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_296": {
                "variable": {
                    "value": "obs_sdf_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_297": {
                "variable": {
                    "value": "term_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "obs_sdf_abs <= self.args.robust_k",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "term_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._robust_kernel(f_map, self.rgb_args.robust_kernel, self.rgb_args.robust_k)",
                            "Call"
                        ],
                        [
                            "self._robust_kernel(cur_obs_sdf, self.sdf_args.robust_kernel, self.sdf_args.robust_k)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(f)",
                            "Call"
                        ],
                        [
                            "torch.where(obs_sdf_abs <= self.args.robust_k, term_weight, self.args.robust_k / obs_sdf_abs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.args.robust_k / obs_sdf_abs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_312": {
                "variable": {
                    "value": "f_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_error_func(new_pose, obs_xyz, need_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_313": {
                "variable": {
                    "value": "new_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "f_abs <= self.args.robust_k",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "new_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(f_new)",
                            "Call"
                        ],
                        [
                            "torch.where(f_abs <= self.args.robust_k, new_weight, self.args.robust_k / f_abs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.args.robust_k / f_abs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "(pc_data.size(0), pc_data.size(1), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "pc_data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_110": {
                "input": {
                    "value": "normal_data[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "equation": {
                    "value": "na,nb->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "JW",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "J_map",
                            "Name"
                        ],
                        [
                            "JW * term_weight.unsqueeze(1) if JW is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "dsdf_dxi",
                            "Name"
                        ],
                        [
                            "JW * term_weight.unsqueeze(1) if JW is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_168": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_191": {
                "outputs": {
                    "value": "cur_obs_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cur_obs_sdf / cur_obs_std.detach()",
                            "BinOp"
                        ],
                        [
                            "cur_obs_sdf.detach()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[cur_obs_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(cur_obs_sdf)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_216": {
                "equation": {
                    "value": "na,nb->nab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "JW",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "J_map",
                            "Name"
                        ],
                        [
                            "JW * term_weight.unsqueeze(1) if JW is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "dsdf_dxi",
                            "Name"
                        ],
                        [
                            "JW * term_weight.unsqueeze(1) if JW is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_216": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_292": {
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_191": {
                "input": {
                    "value": "cur_obs_sdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cur_obs_sdf / cur_obs_std.detach()",
                            "BinOp"
                        ],
                        [
                            "cur_obs_sdf.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_18": {
                "input": {
                    "value": "(max_bound - min_bound) / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/trainer/main.py": {
        "torch": {
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_module.Model(args.code_length, **args.network_specs).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_module.Model(**args.encoder_specs, mode='train').cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "lif_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "lif_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ldata.LifCombinedDataset(*[ldata.LifDataset(**t, num_sample=args.samples_per_lif) for t in args.train_set])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters(), 'lr': lr_schedules[0].get_learning_rate(0)}, {'params': encoder.parameters(), 'lr': lr_schedules[1].get_learning_rate(0)}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "all_lat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(lif_dataset), args.code_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "mean_latent_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(all_lat_vecs.detach(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_139": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdf_data[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(xyz, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_140": {
                "variable": {
                    "value": "sdf_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sdf_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sdf_data[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(sdf_gt, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_148": {
                "variable": {
                    "value": "lat_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lat_vecs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder(surface_data)",
                            "Call"
                        ],
                        [
                            "lat_vecs.unsqueeze(1).repeat(1, args.samples_per_lif, 1).view(-1, lat_vecs.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.chunk(lat_vecs, args.batch_split)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "args.batch_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "net_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lat_vecs[i], xyz[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "net_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[surf_lat_vecs, surf_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_203": {
                "input": {
                    "value": "all_lat_vecs.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state': model.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'model_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "{'epoch': epoch, 'optimizer_state': optimizer_all.state_dict(), 'latent_vec': all_lat_vecs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'training_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state': encoder.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_base_dir / f'encoder_{epoch}.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/motion_util.py": {
        "torch": {
            "from_numpy_266": {
                "ndarray": {
                    "value": "self.q.rotation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "ndarray": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/pt_util.py": {
        "torch": {
            "Linear_164": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bn is None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Identity_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_304": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_32": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_355": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_369": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_indices": {
                    "value": "return_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}