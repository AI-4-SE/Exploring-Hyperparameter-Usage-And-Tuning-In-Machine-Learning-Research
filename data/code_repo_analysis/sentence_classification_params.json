{
    "del_stop_words_and_punct.py": {
        "sklearn": {}
    },
    "board.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sent_size, vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, class_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, sent_size, vec_size], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sent_size, vec_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_84": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_86": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_87": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_9": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "h_pool3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_pool_layer(x_tensor, ker_size1, in_chan1, out_chan1, 'w_1', 'b_1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, in_chan_fc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool3_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool3_flat, W_fc1) + b_fc1, name='relu')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='keep_prob')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_10": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, sent_size, vec_size], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, sent_size, vec_size], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "h_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x, W_conv) + b_conv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "CONV_POOL_LAYER_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "FULLY_CONNECTED_LAYER_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "DROPOUT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "READOUT_LAYER",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "conv_pool_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "polling_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, keep_prob, name='drop')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([out_chan_fc, class_num], name='w_fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "a": {
                    "value": "h_pool3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool3, [-1, in_chan_fc])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([in_chan_fc, out_chan_fc], 'w_fc1')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "expert.py": {
        "tensorflow": {
            "InteractiveSession_5": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 784])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_67": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_69": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_8": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_9": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_13": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 784])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 784])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_65": {
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_69": {
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "keras_tensor.py": {
        "tensorflow": {
            "equal_43": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_true, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_pred, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_true, 1), tf.argmax(y_pred, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "restored_tensor.py": {
        "tensorflow": {
            "Session_7": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_8": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "saved/my_model-7500.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_11": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_9": {
                "checkpoint_dir": {
                    "value": "./saved/",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rnn/sample.py": {
        "tensorflow": {
            "Saver_22": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rnn/sentiment/char_rnn.py": {
        "tensorflow": {
            "placeholder_58": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_74": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[build_cell(lstm_size, keep_prob) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(lstm_output, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal((in_size, out_size), stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_115": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, num_steps], name='targets')",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(targets, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_one_hot, logits.get_shape())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_132": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_133": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_clip",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_191": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_192": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_198": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_202": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BasicLSTMCell_69": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_70": {
                "variable": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(lstm_size)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='keep_prob')",
                            "Call"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_165": {
                "variable": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_168": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([build_cell(lstm_size, keep_prob) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "build_lstm(lstm_size, num_layers, batch_size, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.inputs, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_201": {
                "name": {
                    "value": "batch_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_91": {
                "shape": {
                    "value": "(in_size, out_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr[:, n:n + n_steps]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(seq_output, [-1, in_size])",
                            "Call"
                        ],
                        [
                            "get_batches(encoded, batch_size, num_steps)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal((in_size, out_size), stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_134": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rnn/sentiment/fanifatieva_rnn.py": {
        "tensorflow": {}
    },
    "rnn/sentiment/vanilla_char_rnn.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_42": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[build_cell(lstm_size, keep_prob) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(lstm_output, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal((in_size, out_size), stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_60": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, num_steps], name='targets')",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(targets, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_62": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_one_hot, logits.get_shape())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_68": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_69": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_clip",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_71": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_114": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BasicLSTMCell_37": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_38": {
                "variable": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(lstm_size)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='keep_prob')",
                            "Call"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_92": {
                "variable": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_94": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([build_cell(lstm_size, keep_prob) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "build_lstm(lstm_size, num_layers, batch_size, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.inputs, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_52": {
                "shape": {
                    "value": "(in_size, out_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr[:, n:n + n_steps]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(seq_output, [-1, in_size])",
                            "Call"
                        ],
                        [
                            "get_batches(encoded, batch_size, num_steps)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal((in_size, out_size), stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_70": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rnn/tmp_rnn.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_75": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[build_cell(lstm_size, keep_prob) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(lstm_output, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, in_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal((in_size, out_size), stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_115": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, num_steps], name='targets')",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(targets, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, softmax_w) + softmax_b",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_one_hot, logits.get_shape())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_132": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_133": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_clip",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_189": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_195": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_199": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BasicLSTMCell_70": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "lstm_size",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_71": {
                "variable": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(lstm_size)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='keep_prob')",
                            "Call"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_163": {
                "variable": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_166": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([build_cell(lstm_size, keep_prob) for _ in range(num_layers)])",
                            "Call"
                        ],
                        [
                            "build_lstm(lstm_size, num_layers, batch_size, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.inputs, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "name": {
                    "value": "batch_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_92": {
                "shape": {
                    "value": "(in_size, out_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr[:, n:n + n_steps]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(seq_output, [-1, in_size])",
                            "Call"
                        ],
                        [
                            "get_batches(encoded, batch_size, num_steps)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal((in_size, out_size), stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_134": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensor.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sent_size, vec_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, class_num]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, sent_size, vec_size], name='x')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sent_size, vec_size, input_chan]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_pool_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool, [-1, num_filters_total])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='keep_prob')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_63": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_64": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_69": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_7": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, sent_size, vec_size, input_chan])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([filter_size, vec_size, 1, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.bias_add(conv, b_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_33": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.nn.bias_add(conv, b_conv))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sent_size - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_68": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32), name='accuracy')",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_8": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_56": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_pool_flat, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([num_filters_total, class_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_60": {
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, class_num], name='y_')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_64": {
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, class_num], name='y_')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_32": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x_tensor, W_conv, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([num_filters])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_board.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_16": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.8, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, name='input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "correct_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_18": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y - y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_19": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.025",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_23": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_25": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_simple_stats",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_22": {
                "name": {
                    "value": "value.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x, w, y, y_, loss]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}