{
    "caption.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "top_k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size",
                            "Name"
                        ],
                        [
                            "k - len(complete_inds)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_74": {
                "variable": {
                    "value": "seqs_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size",
                            "Name"
                        ],
                        [
                            "k - len(complete_inds)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "enc_image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "enc_image_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_291": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_100": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.fc(h)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "top_k_scores.expand_as(scores) + scores",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs[prev_word_inds], next_word_inds.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "seqs_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seqs_alpha[prev_word_inds], alpha[prev_word_inds].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "[embeddings, awe]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets.py": {
        "torch": {}
    },
    "eval.py": {
        "torch": {
            "log_softmax_125": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.fc(h)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "top_k_scores.expand_as(scores) + scores",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fine_tune.py": {
        "torch": {
            "CrossEntropyLoss_123": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_265": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_266": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_313": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_314": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_411": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_412": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_437": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_438": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_581": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_582": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Upsample_16": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "256 / 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_17": {
                "variable": {
                    "value": "self.desample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "14 / 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_72": {
                "variable": {
                    "value": "self.adaptive_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(encoded_image_size, encoded_image_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.encoder_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.decoder_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.full_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_118": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_162": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_164": {
                "variable": {
                    "value": "self.decode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_dim + encoder_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.f_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_168": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(encoded_captions)",
                            "Call"
                        ],
                        [
                            "self.embedding(encoded_captions)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max(decode_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max(decode_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_291": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_292": {
                "variable": {
                    "value": "self.decode_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_dim + encoder_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.f_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(-1)",
                            "Call"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_296": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_314": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(encoded_captions)",
                            "Call"
                        ],
                        [
                            "self.embedding(encoded_captions)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max(decode_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ],
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max(decode_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[embeddings[:batch_size_t, t, :], attention_weighted_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "tensors": {
                    "value": "[embeddings[:batch_size_t, t, :], attention_weighted_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_401": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ],
                        [
                            "encoder_out.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "CrossEntropyLoss_99": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_192": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_193": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_283": {
                "variable": {
                    "value": "(scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_284": {
                "variable": {
                    "value": "(targets, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "caps_sorted[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "decode_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_417": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'epochs_since_improvement': epochs_since_improvement, 'bleu-4': bleu4, 'encoder': encoder, 'decoder': decoder, 'encoder_optimizer': encoder_optimizer, 'decoder_optimizer': decoder_optimizer}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch_' + str(epoch) + '_bleu_' + str(round(bleu4, 2)) + '_' + filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_420": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'epochs_since_improvement': epochs_since_improvement, 'bleu-4': bleu4, 'encoder': encoder, 'decoder': decoder, 'encoder_optimizer': encoder_optimizer, 'decoder_optimizer': decoder_optimizer}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'BEST_' + filename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}