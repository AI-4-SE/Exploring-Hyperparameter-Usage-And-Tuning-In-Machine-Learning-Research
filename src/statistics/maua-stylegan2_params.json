{
    "audioreactive/signal.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "onset",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "onset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rosa.onset.onset_strength(y=y_perc, sr=sr, fmin=fmin, fmax=fmax)",
                            "Call"
                        ],
                        [
                            "np.clip(signal.resample(onset, n_frames), onset.min(), onset.max())",
                            "Call"
                        ],
                        [
                            "th.from_numpy(onset).float()",
                            "Call"
                        ],
                        [
                            "gaussian_filter(onset, smooth, causal=0)",
                            "Call"
                        ],
                        [
                            "percentile_clip(onset, clip)",
                            "Call"
                        ],
                        [
                            "onset ** power",
                            "BinOp"
                        ],
                        [
                            "np.sum([mm.features.onsets.spectral_diff(filt_spec), mm.features.onsets.spectral_flux(filt_spec), mm.features.onsets.superflux(filt_spec), mm.features.onsets.complex_flux(filt_spec), mm.features.onsets.modified_kullback_leibler(filt_spec)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "rms",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rosa.feature.rms(S=np.abs(rosa.stft(y=y_filt, hop_length=512)))[0]",
                            "Subscript"
                        ],
                        [
                            "np.clip(signal.resample(rms, n_frames), rms.min(), rms.max())",
                            "Call"
                        ],
                        [
                            "th.from_numpy(rms).float()",
                            "Call"
                        ],
                        [
                            "gaussian_filter(rms, smooth, causal=0.05)",
                            "Call"
                        ],
                        [
                            "percentile_clip(rms, clip)",
                            "Call"
                        ],
                        [
                            "rms ** power",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "chroma",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "chroma / chroma.sum(1)[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_281": {
                "variable": {
                    "value": "locs",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "signal.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_282": {
                "variable": {
                    "value": "peaks",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "signal.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_338": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_339": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 / sigma ** 2 * kernel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_359": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None]",
                            "Subscript"
                        ],
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_frames, n_frames), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius - n_frames, radius - n_frames), mode='constant')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.arange(-radius, radius + 1, dtype=th.float32, device=x.device)",
                            "Call"
                        ],
                        [
                            "th.exp(-0.5 / sigma ** 2 * kernel ** 2)",
                            "Call"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, len(kernel)).repeat(channels, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gt_287": {
                "input": {
                    "value": "main",
                    "type": "Name",
                    "possible_values": [
                        [
                            "signal.take(locs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "signal.take((locs + 1).clamp(0, signal.shape[0] - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_288": {
                "input": {
                    "value": "main",
                    "type": "Name",
                    "possible_values": [
                        [
                            "signal.take(locs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "minus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "signal.take((locs - 1).clamp(0, signal.shape[0] - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_351": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None]",
                            "Subscript"
                        ],
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_frames, n_frames), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius - n_frames, radius - n_frames), mode='constant')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(n_frames, n_frames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_355": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None]",
                            "Subscript"
                        ],
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_frames, n_frames), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius - n_frames, radius - n_frames), mode='constant')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(radius - n_frames, radius - n_frames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_357": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None]",
                            "Subscript"
                        ],
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_frames, n_frames), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius - n_frames, radius - n_frames), mode='constant')",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(radius, radius)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "validation/metrics.py": {
        "sklearn": {
            "pairwise_distances_182": {
                "variable": {
                    "value": "dists",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "data_x.reshape((len(data_x), -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "data_y.reshape((len(data_y), -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'l2'",
                            "MethodArgument"
                        ],
                        [
                            "'l2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0).numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(feature_list, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0).numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(feature_list, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "Name"
                        ],
                        [
                            "batch_sizes",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "*latent_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_104": {
                "variable": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "Name"
                        ],
                        [
                            "batch_sizes",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": [
                        [
                            "InceptionV3([3], normalize_input=False, init_weights=False)",
                            "Call"
                        ],
                        [
                            "inception.eval().to(next(vae.parameters()).device)",
                            "Call"
                        ],
                        [
                            "InceptionV3([3], normalize_input=False, init_weights=False)",
                            "Call"
                        ],
                        [
                            "inception.eval().to(next(generator.parameters()).device)",
                            "Call"
                        ],
                        [
                            "InceptionV3([3], normalize_input=False, init_weights=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(inception).eval().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_241": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_242": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_249": {
                "variable": {
                    "value": "latent_e",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_260": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "accelerate/accelerate_inception.py": {
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "72",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "data.RandomSampler(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "vae_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_71": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_128": {
                "variable": {
                    "value": "bce",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(loader).to(device)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake - real).pow(2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_104": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "input": {
                    "value": "1 + log_var - mu.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_171": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bce + kld + lambda_vgg * vgg_loss + lambda_mse * mse_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_171": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bce + kld + lambda_vgg * vgg_loss + lambda_mse * mse_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "{'vae': vae.state_dict(), 'vae_optim': vae_optim.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"/home/hans/modelzoo/maua-sg2/vae-{name}-{wandb.run.dir.split('/')[-1].split('-')[-1]}.pt\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "accelerate/accelerate_logcosh.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_76": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_16": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RandomSampler_18": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_20": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "vae_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MSELoss_139": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_142": {
                "variable": {
                    "value": "sample_z",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(24, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_197": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_dict['Total'] + vgg_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_197": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_dict['Total'] + vgg_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "accelerate/accelerate_segnet.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "72",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "data.RandomSampler(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "vae_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_119": {
                "variable": {
                    "value": "sample_z",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(24, 512, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_70": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_135": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(fake - real).pow(2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_197": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vgg_loss + lambda_mse * mse_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + self.weights[i] * self.criterion(x_vgg[i], y_vgg[i].detach())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_107": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(data_path, transform, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pdist_86": {
                "input": {
                    "value": "x.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_86": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_86": {
                "input": {
                    "value": "-t",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "{'vae': vae.state_dict(), 'vae_optim': vae_optim.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"/home/hans/modelzoo/maua-sg2/vae-{name}-{wandb.run.dir.split('/')[-1].split('-')[-1]}.pt\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "audioreactive/bend.py": {
        "torch": {
            "std_47": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "th.nn.ReflectionPad2d((int(w / 2), int(w / 2), 0, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "th.nn.ReflectionPad2d(padding)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "th.nn.ReflectionPad2d(padding)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_63": {
                "padding": {
                    "value": "(int(w / 2), int(w / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_64": {
                "padding": {
                    "value": "(w, w, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_65": {
                "padding": {
                    "value": "(w, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_84": {
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(max(h, w)) - 1",
                            "BinOp"
                        ],
                        [
                            "int(max(h, w) * (1 - math.sqrt(2) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_101": {
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(max(h, w)) - 1",
                            "BinOp"
                        ],
                        [
                            "int(max(h, w) * (1 - math.sqrt(2) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "audioreactive/examples/default.py": {
        "torch": {
            "randn_35": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "audioreactive/examples/kelp.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(latents).float()",
                            "Call"
                        ],
                        [
                            "ar.gaussian_filter(latents, 3)",
                            "Call"
                        ],
                        [
                            "0.666 * low_onsets * selection[[2]] + (1 - 0.666 * low_onsets) * latents",
                            "BinOp"
                        ],
                        [
                            "0.666 * high_onsets * selection[[1]] + (1 - 0.666 * high_onsets) * latents",
                            "BinOp"
                        ],
                        [
                            "ar.gaussian_filter(latents, 1, causal=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "transform",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "th.nn.ReplicationPad2d((2, 2, 0, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "latent_section[:, color_layer:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[selection[[l], color_layer:]] * section_frames",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "drop_section[:, color_layer:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[drop_selection[[l], color_layer:]] * section_frames",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "perlin",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[perlin] * int(num_bars / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[perlin[[-1]]] * (args.n_frames - len(perlin))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_117": {
                "padding": {
                    "value": "(2, 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[latents[-1][[-1]]] * (args.n_frames - len_latents)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_117": {
                "size": {
                    "value": "(1, 1, 4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "audioreactive/examples/tauceti.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "color_latent_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('workspace/cyphept-multicolor-latents.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "color_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "color_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[latents[:drop_start, color_layer:]]",
                            "List"
                        ],
                        [
                            "th.cat(color_latents, axis=0)",
                            "Call"
                        ],
                        [
                            "ar.gaussian_filter(color_latents, 5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "transform",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "th.nn.ReplicationPad2d((2, 2, 0, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_82": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_98": {
                "padding": {
                    "value": "(2, 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "(1, 1, h, 5 * w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "[color_latent_selection[[i], color_layer:]] * section_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[color_latent_selection[[i], color_layer:]] * (drop_length - 4 * section_length)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[x_tl8, y_tl8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_98": {
                "size": {
                    "value": "(1, 1, 4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "th.nn.ReflectionPad2d((int(w / 2), int(w / 2), 0, 0))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_142": {
                "padding": {
                    "value": "(int(w / 2), int(w / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_143": {
                "padding": {
                    "value": "(w, w, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_144": {
                "padding": {
                    "value": "(w, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "audioreactive/examples/temper.py": {
        "torch": {
            "from_numpy_54": {
                "ndarray": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_from_center <= radius",
                            "Compare"
                        ],
                        [
                            "ndi.gaussian_filter(mask, sigma=int(round(soft)))",
                            "Call"
                        ],
                        [
                            "circular_mask(height, width, radius=int(width / 2), soft=2)[None, None, ...].float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_70": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_73": {
                "*size": {
                    "value": "(args.n_frames, 1, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "audioreactive/latent.py": {
        "torch": {
            "stack_76": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(chroma[..., None, None] * latents[None, ...]).sum(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(base_latents)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(base_latents, smoothing)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents[:, None, :]] * 18, axis=1)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents, base_latents[0:n_frames - len(base_latents)]])",
                            "Call"
                        ],
                        [
                            "np.zeros((len(x), *latent_selection.shape[1:]))",
                            "Call"
                        ],
                        [
                            "th.cat([th.from_numpy(base_latents)] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents, base_latents[0:n_frames - len(base_latents)]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents] * int(n_frames / len(base_latents))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents[:, None, :]] * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.from_numpy(base_latents)] * int(n_frames / len(base_latents))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_154": {
                "variable": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_latents, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.mgrid[0:res[0]:delta[0], 0:res[1]:delta[1], 0:res[2]:delta[2]]",
                            "Subscript"
                        ],
                        [
                            "grid.transpose(1, 2, 3, 0) % 1",
                            "BinOp"
                        ],
                        [
                            "th.from_numpy(grid).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_219": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((np.sin(phi) * np.cos(theta), np.sin(phi) * np.sin(theta), np.cos(phi)), axis=3)",
                            "Call"
                        ],
                        [
                            "gradients.repeat(d[0], 0).repeat(d[1], 1).repeat(d[2], 2)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(gradients).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_229": {
                "variable": {
                    "value": "n000",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2]), axis=3) * g000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_230": {
                "variable": {
                    "value": "n100",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2]), axis=3) * g100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "n010",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2]), axis=3) * g010",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_232": {
                "variable": {
                    "value": "n110",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2]), axis=3) * g110",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "n001",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2] - 1), axis=3) * g001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "n101",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2] - 1), axis=3) * g101",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "n011",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1), axis=3) * g011",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_236": {
                "variable": {
                    "value": "n111",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1), axis=3) * g111",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents, base_latents[0:n_frames - len(base_latents)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents, base_latents[0:n_frames - len(base_latents)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "Name",
                    "possible_values": []
                },
                "end": {
                    "value": "start + length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(th.arange(start, tensor.shape[0]), th.arange(0, (start + length) % tensor.shape[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "np.load(filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_229": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_230": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_231": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_232": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_234": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_235": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_236": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "slerp(val, latent_selection[n % len(latent_selection)][0], latent_selection[(n + 1) % len(latent_selection)][0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(chroma[..., None, None] * latents[None, ...]).sum(1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(base_latents)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(base_latents, smoothing)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents[:, None, :]] * 18, axis=1)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents, base_latents[0:n_frames - len(base_latents)]])",
                            "Call"
                        ],
                        [
                            "np.zeros((len(x), *latent_selection.shape[1:]))",
                            "Call"
                        ],
                        [
                            "th.cat([th.from_numpy(base_latents)] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents, base_latents[0:n_frames - len(base_latents)]])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_128": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "(start + length) % tensor.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "augment.py": {
        "torch": {
            "eye_28": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "translate",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_38": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_39": {
                "variable": {
                    "value": "sin_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cos_40": {
                "variable": {
                    "value": "cos_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "rot",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_t, -sin_t, sin_t, cos_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_50": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_60": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "translate",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y, t_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_72": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "cross",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[(0, -u_z, u_y), (u_z, 0, -u_x), (-u_y, u_x, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "cross",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "outer",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sin_77": {
                "variable": {
                    "value": "sin_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cos_78": {
                "variable": {
                    "value": "cos_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eye_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_102": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_112": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ger_114": {
                "variable": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "category",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "categories",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": []
                },
                "high": {
                    "value": "len(categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_152": {
                "variable": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_211": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_211": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_246": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "variable": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "end": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "linspace_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "y0",
                    "type": "Name",
                    "possible_values": []
                },
                "end": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "(width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_297": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_298": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_299": {
                "variable": {
                    "value": "kernel_flip",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_327": {
                "variable": {
                    "value": "img_affine",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img_2x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "upfirdn2d(img_pad, kernel_flip, up=2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(n, h, w, 3, device=device)",
                            "Call"
                        ],
                        [
                            "make_grid(img_2x.shape, -2 * p_ux1 / w_o - 1, 2 * (w_p - p_ux1) / w_o - 1, -2 * p_uy1 / h_o - 1, 2 * (h_p - p_uy1) / h_o - 1, device=img_2x.device).to(img_2x)",
                            "Call"
                        ],
                        [
                            "affine_grid(grid, torch.inverse(G)[:, :2, :].to(img_2x))",
                            "Call"
                        ],
                        [
                            "grid * torch.tensor([w_o / w_p, h_o / h_p], device=grid.device) + torch.tensor([(w_o + 2 * p_ux1) / w_p - 1, (h_o + 2 * p_uy1) / h_p - 1], device=grid.device)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_121": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_132": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_136": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_140": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_157": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "round_169": {
                "input": {
                    "value": "param * height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_170": {
                "input": {
                    "value": "param * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "data": {
                    "value": "[(-1.0, -1, 1), (-1, 1, 1), (1, -1, 1), (1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_282": {
                "variable": {
                    "value": "img_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img_down[:, :, pad_y1:end_y, pad_x1:end_x]",
                            "Subscript"
                        ],
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img @ mat_mul + mat_add",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "apply_color(img, C.to(img))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_x1 + pad_k, pad_x2 + pad_k, pad_y1 + pad_k, pad_y2 + pad_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "[w_o / w_p, h_o / h_p]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "grid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_104": {
                "input": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "inverse_279": {
                "input": {
                    "value": "G_try",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G",
                            "Name"
                        ],
                        [
                            "sample_affine(p, batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_322": {
                "input": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(3).unsqueeze(0).repeat(size, 1, 1)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "contrastive_learner.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "projs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(queries, keys)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_63": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b * 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(b, device=device) + b - 1, torch.arange(b, device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries @ keys.t()",
                            "BinOp"
                        ],
                        [
                            "logits - logits.max(dim=-1, keepdim=True).values",
                            "BinOp"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "projs @ projs.t()",
                            "BinOp"
                        ],
                        [
                            "logits[~mask].reshape(n, n - 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((torch.arange(b, device=device) + b - 1, torch.arange(b, device=device)), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "(arr, el)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_53": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries @ keys.t()",
                            "BinOp"
                        ],
                        [
                            "logits - logits.max(dim=-1, keepdim=True).values",
                            "BinOp"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ],
                        [
                            "projs @ projs.t()",
                            "BinOp"
                        ],
                        [
                            "logits[~mask].reshape(n, n - 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.arange(b, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_193": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image_size",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "image_size",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_205": {
                "data": {
                    "value": "torch.eye(dim, device=device, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "nn.Linear(dim, dim, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eye_205": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.project_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "convert_weight.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start}.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "latent_avg",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g_ema.vars['dlatent_avg'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "img_tf",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_tf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_ema.run(z, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_tf).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "img_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_tf, img_pt, img_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "flip_35": {
                "variable": {
                    "value": "dic_torch[target_name + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_torch[target_name + '.conv.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start + 1}.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'g_ema': state_dict, 'latent_avg': latent_avg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "vars['G_synthesis/4x4/Const/const'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "ndarray": {
                    "value": "vars[f'G_synthesis/noise{i}'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_228": {
                "ndarray": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.RandomState(0).randn(n_sample, 512).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset.py": {
        "torch": {}
    },
    "distributed.py": {
        "torch": {
            "cat_89": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_13": {
                "variable": {
                    "value": "sample_z",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_audiovisual.py": {
        "torch": {
            "DataParallel_55": {
                "variable": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G_style(output_size=out_size, checkpoint=ckpt).cuda()",
                            "Call"
                        ],
                        [
                            "Generator(G_res, latent_dim, n_mlp, channel_multiplier=channel_multiplier, constant_input=not noconst, checkpoint=ckpt, output_size=out_size, base_res_factor=base_res_factor).cuda()",
                            "Call"
                        ],
                        [
                            "th.nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "load_generator(ckpt=ckpt, is_stylegan1=stylegan1, G_res=G_res, out_size=out_size, noconst=noconst, latent_dim=latent_dim, n_mlp=n_mlp, channel_multiplier=channel_multiplier, dataparallel=dataparallel, base_res_factor=base_res_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_104": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_video.py": {
        "torch": {
            "arange_22": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 / sigma ** 2 * kernel ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_32": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, n_frames // max(1, num_loops))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(radius, radius)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_33": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(t, c, h * w)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (radius, radius), mode='circular')",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=kernel, groups=channels)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(t, c, h, w)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, n_frames // max(1, num_loops))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.arange(-radius, radius + 1, dtype=th.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "th.exp(-0.5 / sigma ** 2 * kernel ** 2)",
                            "Call"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, len(kernel)).repeat(channels, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.mgrid[0:res[0]:delta[0], 0:res[1]:delta[1], 0:res[2]:delta[2]]",
                            "Subscript"
                        ],
                        [
                            "grid.transpose(1, 2, 3, 0) % 1",
                            "BinOp"
                        ],
                        [
                            "th.from_numpy(grid).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.stack((np.sin(phi) * np.cos(theta), np.sin(phi) * np.sin(theta), np.cos(phi)), axis=3)",
                            "Call"
                        ],
                        [
                            "gradients.repeat(d[0], 0).repeat(d[1], 1).repeat(d[2], 2)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(gradients).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_107": {
                "variable": {
                    "value": "n000",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2]), axis=3) * g000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "n100",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2]), axis=3) * g100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "n010",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2]), axis=3) * g010",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "n110",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2]), axis=3) * g110",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "n001",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2] - 1), axis=3) * g001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "n101",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2] - 1), axis=3) * g101",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "n011",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1), axis=3) * g011",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "n111",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack((grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1), axis=3) * g111",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.from_numpy(base_latents)] * int(n_frames / len(base_latents))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((len(x), *base_latent_selection.shape[1:]))",
                            "Call"
                        ],
                        [
                            "th.cat([th.from_numpy(base_latents)] * int(n_frames / len(base_latents)), axis=0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(base_latents, axis=0).cuda()",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.stack([base_latents] * base_latent_selection.shape[1], axis=1)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(base_latents, smoothing)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents] * int(n_frames / len(base_latents))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_latents] * base_latent_selection.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[styles[[0]]] * args.n_frames",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.interpolate(noise[3][:200], (256, 256)), F.interpolate(th.cat([noise[3][[200]]] * 30, axis=0), (256, 256)), F.interpolate(th.cat([noise[7][[260]]] * 30, axis=0), (256, 256)), F.interpolate(noise[7][260:460], (256, 256)), F.interpolate(th.cat([noise[7][[460]]] * 30, axis=0), (256, 256)), F.interpolate(th.cat([noise[12][[520]]] * 30, axis=0), (256, 256)), F.interpolate(noise[12][520:], (256, 256))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_185": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "styles",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(args.latents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_215": {
                "variable": {
                    "value": "styles",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.duration, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "ndarray": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_from_center <= radius",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_315": {
                "variable": {
                    "value": "static",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n] * (len(latents) - len(moving))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "noise[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[moving, static]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1], grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_112": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1], grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "(grid[:, :, :, 0], grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_114": {
                "tensors": {
                    "value": "(grid[:, :, :, 0] - 1, grid[:, :, :, 1] - 1, grid[:, :, :, 2] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "static1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n] * 260",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "static2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n] * (len(latents) - 460)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "noise[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[static1, moving, static2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_384": {
                "input": {
                    "value": "noise[3][:200]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_385": {
                "input": {
                    "value": "th.cat([noise[3][[200]]] * 30, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_386": {
                "input": {
                    "value": "th.cat([noise[7][[260]]] * 30, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_387": {
                "input": {
                    "value": "noise[7][260:460]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_388": {
                "input": {
                    "value": "th.cat([noise[7][[460]]] * 30, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_389": {
                "input": {
                    "value": "th.cat([noise[12][[520]]] * 30, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_390": {
                "input": {
                    "value": "noise[12][520:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_270": {
                "*size": {
                    "value": "(1, 1, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_275": {
                "*size": {
                    "value": "(1, 1, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "static",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n] * (len(latents) - len(moving))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "noise[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[static, moving]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "[noise[3][[200]]] * 30",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_386": {
                "tensors": {
                    "value": "[noise[7][[260]]] * 30",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_388": {
                "tensors": {
                    "value": "[noise[7][[460]]] * 30",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_389": {
                "tensors": {
                    "value": "[noise[12][[520]]] * 30",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_475": {
                "padding": {
                    "value": "(half, half, half, half)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_479": {
                "*args": {
                    "value": "*reflects",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_313": {
                "*size": {
                    "value": "(200, 1, n.shape[-2], n.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "base_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((len(x), *base_latent_selection.shape[1:]))",
                            "Call"
                        ],
                        [
                            "th.cat([th.from_numpy(base_latents)] * int(n_frames / len(base_latents)), axis=0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(base_latents, axis=0).cuda()",
                            "Call"
                        ],
                        [
                            "th.cat([base_latents] * int(n_frames / len(base_latents)), axis=0)",
                            "Call"
                        ],
                        [
                            "th.stack([base_latents] * base_latent_selection.shape[1], axis=1)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(base_latents, smoothing)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_322": {
                "*size": {
                    "value": "(200, 1, n.shape[-2], n.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_329": {
                "*size": {
                    "value": "(200, 1, n.shape[-2], n.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_480": {
                "size": {
                    "value": "(1, 1, 2 ** log_min_res, 2 ** log_min_res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gpu_profile.py": {
        "torch": {
            "is_tensor_100": {
                "obj": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gc.get_objects()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_102": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lightning.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "self.sample_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self.mean_path_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "g_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "d_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(self.path, transform, self.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_97": {
                "variable": {
                    "value": "real_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_98": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "self.discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_102": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Name",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_107": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_113": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(fake_img * noise).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "spectral_norms[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "empty_cache_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_111": {
                "input": {
                    "value": "fake_img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_123": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_123": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_125": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_228": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "-69",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "-69",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lookahead_minimax.py": {
        "torch": {
            "zeros_like_46": {
                "variable": {
                    "value": "param_state[cached_G_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "param_state[cached_D_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "param_state[cached_G_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "param_state[cached_D_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "param_state[backup_G_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "param_state[backup_D_params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "param_state[cached_G_mom]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "param_state[cached_D_mom]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_151": {
                "enabled": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "self.G_optimizer.state[p][momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_184": {
                "variable": {
                    "value": "self.D_optimizer.state[p][momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lucidrains.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_134": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_162": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_noise(num_rows ** 2, image_size)",
                            "Call"
                        ],
                        [
                            "image_noise(self.batch_size, image_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_183": {
                "negative_slope": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "chunked_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[model(*i) for i in split_args]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "[t[:, None, :].expand(-1, n, -1) for (t, n) in styles_def]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_284": {
                "variable": {
                    "value": "self.to_style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((out_chan, in_chan, kernel, kernel))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_336": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x, style)",
                            "Call"
                        ],
                        [
                            "x + prev_rgb",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(1, -1, h, w)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weights, padding=padding, groups=b)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.filters, h, w)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, style1)",
                            "Call"
                        ],
                        [
                            "self.activation(x + noise1)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, style2)",
                            "Call"
                        ],
                        [
                            "self.activation(x + noise2)",
                            "Call"
                        ],
                        [
                            "self.net(x)",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.initial_block.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "attn(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.flatten(x)",
                            "Call"
                        ],
                        [
                            "self.to_logit(x)",
                            "Call"
                        ],
                        [
                            "attn_block(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w2 * (w1 + 1)",
                            "BinOp"
                        ],
                        [
                            "weights * d",
                            "BinOp"
                        ],
                        [
                            "weights.reshape(b * self.filters, *ws)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._get_same_padding(h, self.kernel, self.dilation, self.stride)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.to_style1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.to_noise1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.to_style2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.to_noise2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_381": {
                "variable": {
                    "value": "self.conv_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_383": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, filters, 3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_409": {
                "variable": {
                    "value": "self.initial_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((init_channels, 4, 4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_413": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_483": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_484": {
                "variable": {
                    "value": "self.attn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "attn_blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_485": {
                "variable": {
                    "value": "self.quantize_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "quantize_blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_490": {
                "variable": {
                    "value": "self.to_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * 2 * filters[-1]",
                            "BinOp"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "self.GAN.G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "G.latent_dim",
                            "Attribute"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_495": {
                "variable": {
                    "value": "quantize_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_765": {
                "variable": {
                    "value": "total_disc_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_766": {
                "variable": {
                    "value": "total_gen_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_946": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1010": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_992": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1044": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1098": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rsqrt_327": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(weights ** 2).sum(dim=(2, 3, 4), keepdim=True) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_569": {
                "variable": {
                    "value": "self.augment_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(int((sqrt(2) - 1) * image_size / 4))",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_1063": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1077": {
                "variable": {
                    "value": "latent_e",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_1111": {
                "variable": {
                    "value": "av_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.av",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1138": {
                "obj": {
                    "value": "self.GAN.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_name(num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_170": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_289": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_313": {
                "*size": {
                    "value": "(out_chan, in_chan, kernel, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_345": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_384": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "in_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_channels] + [network_capacity * 2 ** (i + 1) for i in range(self.num_layers)][::-1]",
                            "BinOp"
                        ],
                        [
                            "[num_init_filters] + [network_capacity * 2 ** i for i in range(num_layers + 1)]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_409": {
                "*size": {
                    "value": "(init_channels, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_745": {
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "default(self.num_workers, num_cores)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_979": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1069": {
                "variable": {
                    "value": "av",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.av",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_1083": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate_in_chunks(self.batch_size, self.GAN.GE, latent_e, noise)",
                            "Call"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1153": {
                "f": {
                    "value": "self.model_name(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "output.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_422": {
                "*args": {
                    "value": "*[Residual(Rezero(ImageLinearAttention(in_chan))) for _ in range(2)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_473": {
                "*args": {
                    "value": "*[Residual(Rezero(ImageLinearAttention(out_chan))) for _ in range(2)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_570": {
                "padding": {
                    "value": "int((sqrt(2) - 1) * image_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_910": {
                "input": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "in_features": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_576": {
                "*args": {
                    "value": "augs.RandomRotation(180)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_832": {
                "input": {
                    "value": "1 - fake_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_876": {
                "*size": {
                    "value": "w_styles.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_884": {
                "input": {
                    "value": "pl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((pl_lengths - self.pl_mean) ** 2).mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/autoencoder.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "my_hidden_dims[-1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "my_hidden_dims[-1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "my_hidden_dims[-1] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "th.nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "th.flatten(result, start_dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoder_input(z)",
                            "Call"
                        ],
                        [
                            "result.view(-1, self.latent_dim, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.decoder(result)",
                            "Call"
                        ],
                        [
                            "self.final_layer(result)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_121": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_122": {
                "variable": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "th.exp(0.5 * log_var)",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_136": {
                "variable": {
                    "value": "kld_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * th.sum(1 + log_var - mu ** 2 - log_var.exp(), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "conv_mod",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_176": {
                "variable": {
                    "value": "self.maxpool_with_argmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_192": {
                "variable": {
                    "value": "self.maxpool_with_argmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_206": {
                "variable": {
                    "value": "self.unpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxUnpool2d_220": {
                "variable": {
                    "value": "self.unpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_256": {
                "variable": {
                    "value": "xy",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch, channel, height, width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_257": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "height * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2DBatchNormRelu(in_channels, 64, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "th.nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2DBatchNormRelu(in_channels, 64, 3, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten(512, 4)",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_460": {
                "variable": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_461": {
                "variable": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "th.exp(0.5 * log_var)",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_483": {
                "*args": {
                    "value": "th.nn.Conv2d(in_chs, out_chs, kernel_size=kernel, padding=(kernel - 1) // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_503": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_504": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_520": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_530": {
                "variable": {
                    "value": "self.upch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_557": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(bn) + self.conv3(bn) + self.conv5(bn) + self.conv7(bn) + self.pool3(x) + self.pool5(x)",
                            "BinOp"
                        ],
                        [
                            "self.stage1(self.upch1(x))",
                            "Call"
                        ],
                        [
                            "self.stage2(self.upch2(out))",
                            "Call"
                        ],
                        [
                            "self.stage3(self.upch3(out))",
                            "Call"
                        ],
                        [
                            "self.stage4(self.upch4(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "self.conv1(bn) + self.conv3(bn) + self.conv5(bn) + self.conv7(bn) + self.pool3(x) + self.pool5(x)",
                            "BinOp"
                        ],
                        [
                            "F.upsample(x.view(-1, 256, 1, 1), scale_factor=8)",
                            "Call"
                        ],
                        [
                            "self.downch1(self.stage1(out))",
                            "Call"
                        ],
                        [
                            "self.downch2(self.stage2(out))",
                            "Call"
                        ],
                        [
                            "self.downch3(self.stage3(out))",
                            "Call"
                        ],
                        [
                            "self.downch4(self.stage4(out))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_565": {
                "*args": {
                    "value": "th.nn.ConvTranspose2d(in_chs, out_chs, kernel_size=kernel, padding=(kernel - 1) // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_585": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_586": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_602": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_620": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_630": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, 256, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_653": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_latent_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_654": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_latent_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_655": {
                "variable": {
                    "value": "self.fc_rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.n_latent_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_661": {
                "variable": {
                    "value": "esp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*mu.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_672": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_latent_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_mod",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_484": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_485": {
                "num_features": {
                    "value": "out_chs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_540": {
                "*args": {
                    "value": "th.nn.AvgPool2d(pooling_kenel)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_566": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_567": {
                "num_features": {
                    "value": "out_chs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_623": {
                "*args": {
                    "value": "th.nn.ConvTranspose2d(input_channels, input_channels // 2, kernel_size=pooling_kenel, stride=pooling_kenel)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_635": {
                "input": {
                    "value": "self.last(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_96": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "my_hidden_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "my_hidden_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "my_hidden_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "my_hidden_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "1.0 + th.exp(-2 * self.alpha * t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_349": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_352": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_356": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_360": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_364": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_369": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_373": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_377": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_381": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_384": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_413": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_416": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_420": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_424": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_428": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_438": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_442": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_446": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_450": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_453": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_541": {
                "kernel_size": {
                    "value": "pooling_kenel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_542": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_543": {
                "num_features": {
                    "value": "input_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_624": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pooling_kenel",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "pooling_kenel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_625": {
                "num_features": {
                    "value": "input_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "th.nn.Conv2d(in_channels, out_channels=h_dim, kernel_size=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "th.nn.Upsample(scale_factor=2, mode='bilinear', align_corners=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "1 + log_var - mu ** 2 - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_dim",
                            "Name"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "my_hidden_dims",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "h_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "my_hidden_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "Upsample_86": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "my_hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "my_hidden_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "my_hidden_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_133": {
                "input": {
                    "value": "-2 * self.alpha * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_258": {
                "start": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "models/stylegan1.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(output_size, input_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(output_channels, input_channels, kernel_size, kernel_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 1]",
                            "List"
                        ],
                        [
                            "th.tensor(kernel, dtype=th.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2, 1]",
                            "List"
                        ],
                        [
                            "th.tensor(kernel, dtype=th.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.kernel.size(2) - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lerp_233": {
                "variable": {
                    "value": "interp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.avg_latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.top_epi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_495": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_568": {
                "variable": {
                    "value": "getattr(self.g_synthesis.blocks, 4x4).const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "layer0 + th.normal(0, const.std() / 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_577": {
                "variable": {
                    "value": "latent_in",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_38": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(output_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_91": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "(w.size(-1) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_235": {
                "condition": {
                    "value": "do_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(th.arange(x.size(1)) < self.max_layer).view(1, -1, 1)",
                            "Call"
                        ],
                        [
                            "(th.arange(styles.size(1)) < 8).view(1, -1, 1).to(styles.device)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "interp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.lerp(self.avg_latent, x, self.threshold)",
                            "Call"
                        ],
                        [
                            "th.lerp(self.truncation_latent.to(styles.device), styles, truncation)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_337": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.ones(1, nf, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_338": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.ones(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512, int(4 * 1024 / network_resolution), int(4 * 1024 / network_resolution))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_548": {
                "variable": {
                    "value": "const",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.zeros(size=(1, 512, int(4 * 1024 / network_resolution), int(4 * 1024 / network_resolution)))",
                            "Call"
                        ]
                    ]
                },
                "std": {
                    "value": "th.ones_like(means) * const.std()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "layer0",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[const[:, :, :, [0]], const[:, :, :, [0]], const, const[:, :, :, [-1]], const[:, :, :, [-1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lerp_604": {
                "variable": {
                    "value": "interp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.truncation_latent.to(styles.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "styles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.where(do_trunc, interp, styles)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "truncation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_606": {
                "variable": {
                    "value": "styles",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "do_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(th.arange(x.size(1)) < self.max_layer).view(1, -1, 1)",
                            "Call"
                        ],
                        [
                            "(th.arange(styles.size(1)) < 8).view(1, -1, 1).to(styles.device)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "interp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.lerp(self.avg_latent, x, self.threshold)",
                            "Call"
                        ],
                        [
                            "th.lerp(self.truncation_latent.to(styles.device), styles, truncation)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "styles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.where(do_trunc, interp, styles)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_97": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "self.intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0], noise=noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2], noise=noise)",
                            "Call"
                        ],
                        [
                            "block(styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ],
                        [
                            "block(x, styles[:, 2 * i:2 * i + 2], noise=noise[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_145": {
                "input": {
                    "value": "th.mean(x ** 2, dim=1, keepdim=True) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1920",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1920",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_69": {
                "*size": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_337": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_338": {
                "*size": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "normal_568": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "const.std() / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_572": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "width * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_193": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_234": {
                "start": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_260": {
                "num_features": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_448": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_518": {
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_548": {
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.zeros(size=(1, 512, int(4 * 1024 / network_resolution), int(4 * 1024 / network_resolution)))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_525": {
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_605": {
                "start": {
                    "value": "styles.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_532": {
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_539": {
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/stylegan2.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.tensor(k, dtype=th.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_159": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_273": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.randn(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_425": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_426": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_427": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_428": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_484": {
                "variable": {
                    "value": "latent_in",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_675": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_681": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_142": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_145": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_224": {
                "variable": {
                    "value": "demod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_235": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_507": {
                "variable": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.style(s[None, None, :]) for s in styles]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_693": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_696": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_20": {
                "input": {
                    "value": "th.mean(inputs ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_127": {
                "*size": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_205": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_250": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "inputs.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_273": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_288": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_475": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_525": {
                "variable": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_700": {
                "variable": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_703": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_435": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_459": {
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_470": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_479": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "op/fused_act.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "fused",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "leaky_relu_90": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "op/upfirdn2d.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_186": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_101": {
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_vae_codes.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(args.data_path, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.n_worker / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "vae",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "vae",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ConvSegNet()",
                            "Call"
                        ],
                        [
                            "th.nn.DataParallel(vae).eval().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_68": {
                "f": {
                    "value": "args.vae_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projector.py": {
        "torch": {
            "stack_113": {
                "variable": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "noise_sample",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "mse_loss_165": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img_gen.reshape(batch, channel, height // factor, factor, width // factor, factor)",
                            "Call"
                        ],
                        [
                            "img_gen.mean([3, 5])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_199": {
                "obj": {
                    "value": "result_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'noises': noises}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_26": {
                "input": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_25": {
                "input": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "render.py": {
        "torch": {
            "set_grad_enabled_10": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "data": {
                    "value": "rewritten_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(original_weights[param]).cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "select_latents.py": {
        "torch": {
            "set_grad_enabled_231": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_279": {
                "variable": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)[:n]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(imgs, IMSIZE, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) * 127.5",
                            "BinOp"
                        ],
                        [
                            "imgs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "IMSIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1920 - 240) // IMAGES_PER_ROW",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)[:n]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(imgs, IMSIZE, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) * 127.5",
                            "BinOp"
                        ],
                        [
                            "imgs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_265": {
                "variable": {
                    "value": "random_latents",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)[:n]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(imgs, IMSIZE, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) * 127.5",
                            "BinOp"
                        ],
                        [
                            "imgs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(imgs)",
                            "Call"
                        ],
                        [
                            "(imgs.clamp_(-1, 1) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_321": {
                "ndarray": {
                    "value": "intro_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate(ALL_LATENTS)[INTRO_IDXS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_331": {
                "ndarray": {
                    "value": "drop_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate(ALL_LATENTS)[DROP_IDXS]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "softplus_66": {
                "variable": {
                    "value": "real_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_67": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_72": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_img_og",
                            "Name"
                        ],
                        [
                            "next(loader).to(device, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_91": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "noisy_img_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(fake_img * img_noise).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "sample_z",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_118": {
                "variable": {
                    "value": "mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_508": {
                "variable": {
                    "value": "g_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_511": {
                "variable": {
                    "value": "d_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio * args.d_lr_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_591": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_525": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_556": {
                "variable": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Generator(args.size, args.latent_size, args.n_mlp, channel_multiplier=args.channel_multiplier, constant_input=args.constant_input, min_rgb_size=args.min_rgb_size).to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_564": {
                "variable": {
                    "value": "discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier, use_skip=args.d_skip).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_33": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RandomSampler_35": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_37": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_60": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "unbind_60": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_88": {
                "input": {
                    "value": "fake_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_img_og",
                            "Name"
                        ]
                    ]
                }
            },
            "isnan_96": {
                "input": {
                    "value": "path_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mean_path_length + 0.01 * (path_lengths.mean() - mean_path_length)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_445": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_573": {
                "variable": {
                    "value": "contrast_learner",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "contrast_learner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ContrastiveLearner(discriminator, args.size, augment_fn=nn.Sequential(nn.ReflectionPad2d(int((math.sqrt(2) - 1) * args.size / 4)), augs.RandomHorizontalFlip(), RandomApply(augs.RandomAffine(degrees=0, translate=(0.25, 0.25), shear=(15, 15)), p=0.1), RandomApply(augs.RandomRotation(180), p=0.1), augs.RandomResizedCrop(size=(args.size, args.size), scale=(1, 1), ratio=(1, 1)), RandomApply(augs.RandomResizedCrop(size=(args.size, args.size), scale=(0.5, 0.9)), p=0.1), RandomApply(augs.RandomErasing(), p=0.1)), hidden_layer=(-1, 0))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(contrast_learner, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "sign_208": {
                "input": {
                    "value": "real_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(real_img)",
                            "Call"
                        ],
                        [
                            "discriminator(real_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_221": {
                "variable": {
                    "value": "ada_aug_p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ada_aug_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "th.cuda.FloatTensor([args.augment_p if args.augment_p > 0 else 0.0])",
                            "Call"
                        ],
                        [
                            "ada_aug_p + sign * ada_aug_step * ada_aug_n",
                            "BinOp"
                        ],
                        [
                            "th.clamp(ada_aug_p, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(sample).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_491": {
                "*args": {
                    "value": "nn.ReflectionPad2d(int((math.sqrt(2) - 1) * args.size / 4))",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "{'g': g_module.state_dict(), 'd': d_module.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'/home/hans/modelzoo/maua-sg2/{check_name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_492": {
                "padding": {
                    "value": "int((math.sqrt(2) - 1) * args.size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_profile.py": {
        "torch": {
            "softplus_67": {
                "variable": {
                    "value": "real_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_73": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "real_img_og",
                            "Name"
                        ],
                        [
                            "next(loader).to(device, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_92": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "noisy_img_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(fake_img * img_noise).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_122": {
                "variable": {
                    "value": "sample_z",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "MSELoss_123": {
                "variable": {
                    "value": "mse",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "ada_augment",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "softplus_80": {
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_34": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "RandomSampler_36": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_38": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_61": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "unbind_61": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_89": {
                "input": {
                    "value": "fake_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fake_img_og",
                            "Name"
                        ]
                    ]
                }
            },
            "isnan_97": {
                "input": {
                    "value": "path_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mean_path_length + 0.01 * (path_lengths.mean() - mean_path_length)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "profile_485": {
                "enabled": {
                    "value": "args.th_prof",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "record_shapes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "profile_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "with_stack": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_564": {
                "variable": {
                    "value": "g_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_567": {
                "variable": {
                    "value": "d_optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio * args.d_lr_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_647": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "range_push_145": {
                "msg": {
                    "value": "'Iter {}'.format(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_154": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_157": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_581": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_612": {
                "variable": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Generator(args.size, args.latent_size, args.n_mlp, channel_multiplier=args.channel_multiplier, constant_input=args.constant_input, min_rgb_size=args.min_rgb_size).to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_620": {
                "variable": {
                    "value": "discriminator",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier, use_skip=args.d_skip).to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_push_164": {
                "msg": {
                    "value": "D train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "(th.sign(real_pred).sum().item(), real_pred.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "loss_dict[Rt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "r_t_stat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "pred_signs / n_pred",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "loss_dict[Augment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ada_aug_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.augment_p if args.augment_p > 0 else 0.0",
                            "IfExp"
                        ],
                        [
                            "ada_aug_p + sign * ada_aug_step * n_pred",
                            "BinOp"
                        ],
                        [
                            "min(1, max(0, ada_aug_p))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "range_push_251": {
                "msg": {
                    "value": "G train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_push_286": {
                "msg": {
                    "value": "G accum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_push_292": {
                "msg": {
                    "value": "Log / Eval",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_pop_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_499": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_629": {
                "variable": {
                    "value": "contrast_learner",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "contrast_learner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ContrastiveLearner(discriminator, args.size, augment_fn=nn.Sequential(nn.ReflectionPad2d(int((math.sqrt(2) - 1) * args.size / 4)), augs.RandomHorizontalFlip(), RandomApply(augs.RandomAffine(degrees=0, translate=(0.25, 0.25), shear=(15, 15)), p=0.1), RandomApply(augs.RandomRotation(180), p=0.1), augs.RandomResizedCrop(size=(args.size, args.size), scale=(1, 1), ratio=(1, 1)), RandomApply(augs.RandomResizedCrop(size=(args.size, args.size), scale=(0.5, 0.9)), p=0.1), RandomApply(augs.RandomErasing(), p=0.1)), hidden_layer=(-1, 0))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(contrast_learner, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_push_211": {
                "msg": {
                    "value": "D reg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_push_228": {
                "msg": {
                    "value": "ADA",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_push_273": {
                "msg": {
                    "value": "G reg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "range_pop_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_229": {
                "input": {
                    "value": "real_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(real_img)",
                            "Call"
                        ],
                        [
                            "discriminator(real_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_383": {
                "obj": {
                    "value": "{'g': g_module.state_dict(), 'd': d_module.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'/home/hans/modelzoo/maua-sg2/{check_name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "*args": {
                    "value": "nn.ReflectionPad2d(int((math.sqrt(2) - 1) * args.size / 4))",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_546": {
                "padding": {
                    "value": "int((math.sqrt(2) - 1) * args.size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "validation/calc_fid.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "extract_feature_from_samples(g, inception, args.truncation, mean_latent, args.batch, args.n_sample, device).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Generator(args.size, 512, 8).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": [
                        [
                            "InceptionV3([3], normalize_input=False, init_weights=False)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception).eval().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_22": {
                "variable": {
                    "value": "latent",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation/calc_inception.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_90": {
                "variable": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_patched_inception_v3()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception).eval().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_21": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation/calc_ppl.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "input": {
                    "value": "x.pow(2).sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_20": {
                "input": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(a * b).sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a * torch.cos(p) + c * torch.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_67": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cos_22": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_22": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_74": {
                "variable": {
                    "value": "latent_e",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "validation/inception.py": {
        "torch": {
            "ModuleList_81": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_206": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_234": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_267": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_302": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_306": {
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_93": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_99": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation/lpips/__init__.py": {
        "torch": {}
    },
    "validation/lpips/base_model.py": {
        "torch": {
            "save_38": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_45": {
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "validation/lpips/dist_model.py": {
        "torch": {
            "Adam_109": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_178": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_145": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "validation/lpips/networks_basic.py": {
        "torch": {
            "Sequential_120": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_159": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_17": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(torch.mean((in0 - in1) ** 2, dim=1).view(N, 1, X, Y), dim=2).view(N, 1, 1, Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_133": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_139": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_182": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "validation/lpips/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "validation/lpips/util.py": {
        "torch": {
            "sqrt_11": {
                "variable": {
                    "value": "norm_factor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "validation/spectral_norm.py": {
        "torch": {
            "chain_matmul_50": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "*matrices": {
                    "value": "weight_mat.t().mm(weight_mat).pinverse()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dot_37": {
                "variable": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(h).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(w).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "next(module.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_51": {
                "input": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_32": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(h).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_33": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_51": {
                "input": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "self.reshape_weight_to_matrix(weight)",
                            "Call"
                        ],
                        [
                            "fn.reshape_weight_to_matrix(weight)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(torch.mv(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "torch.chain_matmul(weight_mat.t().mm(weight_mat).pinverse(), weight_mat.t(), u.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(weight.new_empty(w).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}